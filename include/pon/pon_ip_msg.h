/*****************************************************************************
 *
 * Copyright (c) 2020 - 2024 MaxLinear, Inc.
 * Copyright (c) 2017 - 2020 Intel Corporation
 *
 * For licensing information, see the file 'LICENSE' in the root folder of
 * this software module.
 *
 *****************************************************************************/

/* attention, this file was automatically generated by script */

#ifndef _PON_IP_MSG_H_
#define _PON_IP_MSG_H_

#if defined(WIN32)
#  include <stdint.h>
#  define __BIG_ENDIAN              4321
#  define __LITTLE_ENDIAN           1234
#  define __BYTE_ORDER              __LITTLE_ENDIAN
#elif defined(LINUX) && !defined(__KERNEL__)
#    include <stdint.h>
#    include <endian.h>
#    if !defined(__BYTE_ORDER) || \
	!defined(__LITTLE_ENDIAN) || \
	!defined(__BIG_ENDIAN)
#      error "Unknown byte order (linux userspace)!"
#    endif
#else
#  if defined(__KERNEL__)
#    include <asm/byteorder.h>
#  endif
#  if defined(__BIG_ENDIAN)
#    undef __BYTE_ORDER
#    undef __BIG_ENDIAN
#    undef __LITTLE_ENDIAN
#    define __BIG_ENDIAN            4321
#    define __LITTLE_ENDIAN         1234
#    define __BYTE_ORDER            __BIG_ENDIAN
#  elif defined(__LITTLE_ENDIAN)
#    undef __BYTE_ORDER
#    undef __BIG_ENDIAN
#    undef __LITTLE_ENDIAN
#    define __BIG_ENDIAN            4321
#    define __LITTLE_ENDIAN         1234
#    define __BYTE_ORDER            __LITTLE_ENDIAN
#  else
#    error "Unknown byte order (unknown OS)!"
#  endif
#endif

#ifndef __PACKED__
#  if defined(__GNUC__) || defined(__GNUG__)
	/* GNU C or C++ compiler */
#    define __PACKED__ __attribute__((packed))
#  else
	/* Byte alignment adjustment */
#    pragma pack(push, 1)
#    if !defined(_PACKED_)
#      define __PACKED__        /* nothing */
#    endif
#  endif
#  define __PACKED_DEFINED__
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** \defgroup PON_FAPI_REFERENCE_MESSAGES Firmware Messages
 *  This chapter describes the message structures used for
 *  the sw-fw mailbox driver.
 *  @{
 */

/** Message Format */
struct ponfw_generic_message {
#if __BYTE_ORDER == __BIG_ENDIAN
	/** Data */
	uint32_t data;
#else
	/** Data */
	uint32_t data;
#endif
} __PACKED__;

/** Write message */
#define PONFW_WRITE	0
/** Read message */
#define PONFW_READ	1

/** This message is a command */
#define PONFW_CMD		0x0
/** This message is a positive acknowledge */
#define PONFW_ACK		0x1

/** ITU-T message G.987, G.9807, G.989 */
#define PONFW_STD_ITUT 0x2000
/** EPON message */
#define PONFW_STD_EPON 0x4000

/**
 * This message is a negative acknowledge (NACK)
 * A NACK can occur e.g., if required data cannot be accessed or
 * written, maybe different kinds of NACK will be defined in future
 */
#define PONFW_NACK	0x2
/**
 * This message is a negative acknowledge
 * if a duplicate entry is tried to be written.
 */
#define PONFW_NACK_DUP	0x3
/**
 * This message is a negative acknowledge
 * if a debug function was accessed which is disabled by hardware.
 */
#define PONFW_NACK_DBG	0x4
/**
 * This message is a negative acknowledge
 * indicating that this message is not allowed in the current ploam state.
 */
#define PONFW_NACK_STATE	0x5
/**
 * This message has an error in the header format
 * This should only occur during development phase
 */
#define PONFW_CMDERR	0xf

/** A message was sent by the PON IP */
#define PONFW_PONIP	0
/** A message was sent by the HOST */
#define PONFW_HOST	1

/** Message applicability unknown */
#define PONFW_PROP_HW_UNKNOWN	0
/** Message applicable to all HW types */
#define PONFW_PROP_HW_ALL	1
/** Message applicable to PRX/URX */
#define PONFW_PROP_HW_PRXURX	2
/** Message applicable to TOPAZ */
#define PONFW_PROP_HW_TOPAZ	3

/** Firmware Version */
#define PONFW_VERSION_CMD_ID (0x01)
#define PONFW_VERSION_LEN 16
/* The firmware is run on an SoC. */
#define PONFW_VERSION_HWT_SOC 0
/* The firmware is run on an FPGA prototype. */
#define PONFW_VERSION_HWT_FPGA 1
/* The PON IP is integrated into the PRX300 B SoC. */
#define PONFW_VERSION_HWVERSION_PRX_B 7
/* The PON IP is integrated into the URX800 A SoC. */
#define PONFW_VERSION_HWVERSION_URX_A 8
/* The PON IP is integrated into the URX800 B0 SoC. */
#define PONFW_VERSION_HWVERSION_URX_B 9
/* The PON IP is integrated into the URX800 C SoC. */
#define PONFW_VERSION_HWVERSION_URX_C 10
/* Indicates this is a official released FW */
#define PONFW_VERSION_TFW_REL 0
/* Indicates this is a test FW */
#define PONFW_VERSION_TFW_TEST 1
/* Current major version number */
#define PONFW_VERSION_MAJ_DEV 4
/* Current minor version number */
#define PONFW_VERSION_MIN_DEV 1
/* This FW supports the ITU G.989, G.987 and G.9087 standards. */
#define PONFW_VERSION_STANDARD_XGSPON 0
/* This FW version supports the ITU G.984 standard. */
#define PONFW_VERSION_STANDARD_GPON 1
/* This FW version is intended for the FPGA of the PRX300 step A device
 * family.
 */
#define PONFW_VERSION_PLATFORM_FPGA_PRX_A 0
/* This FW version is intended for the SoC of the PRX300 step A device
 * family.
 */
#define PONFW_VERSION_PLATFORM_SOC_PRX_A 1
/* This FW version is intended for the FPGA of the PRX300 step B device
 * family.
 */
#define PONFW_VERSION_PLATFORM_FPGA_PRX_B 2
/* This FW version is intended for the SoC of the PRX300 step B device
 * family.
 */
#define PONFW_VERSION_PLATFORM_SOC_PRX_B 3
/* This FW version is intended for the FPGA of the URX800 step A device
 * family.
 */
#define PONFW_VERSION_PLATFORM_FPGA_URX_A 4
/* This FW version is intended for the SoC of the URX800 step A device
 * family.
 */
#define PONFW_VERSION_PLATFORM_SOC_URX_A 5
/* This FW version is intended for the FPGA of the URX800 step B device
 * family.
 */
#define PONFW_VERSION_PLATFORM_FPGA_URX_B 6
/* This FW version is intended for the SoC of the URX800 step B device
 * family.
 */
#define PONFW_VERSION_PLATFORM_SOC_URX_B 7
/* This FW version is intended for the SoC of the URX800 step C device
 * family.
 */
#define PONFW_VERSION_PLATFORM_SOC_URX_C 8
/* No current patch available */
#define PONFW_VERSION_PATCH_NO 0

/* HW applicability of FW_VERSION */
#define PONFW_VERSION_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_version {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Hardware Target */
	uint32_t hwt : 3;
	/* Reserved */
	uint32_t res : 5;
	/* Hardware ID */
	uint32_t hwid : 16;
	/* Hardware Version */
	uint32_t hwversion : 8;
	/* Test Firmware */
	uint32_t tfw : 1;
	/* Major */
	uint32_t maj : 7;
	/* Minor */
	uint32_t min : 8;
	/* Standard */
	uint32_t standard : 4;
	/* Platform */
	uint32_t platform : 4;
	/* Patch */
	uint32_t patch : 8;
	/* Time Stamp */
	uint32_t time;
	/* GIT Changeset Value */
	uint32_t gitversion;
#else
	/* Hardware Version */
	uint32_t hwversion : 8;
	/* Hardware ID */
	uint32_t hwid : 16;
	/* Reserved */
	uint32_t res : 5;
	/* Hardware Target */
	uint32_t hwt : 3;
	/* Patch */
	uint32_t patch : 8;
	/* Platform */
	uint32_t platform : 4;
	/* Standard */
	uint32_t standard : 4;
	/* Minor */
	uint32_t min : 8;
	/* Major */
	uint32_t maj : 7;
	/* Test Firmware */
	uint32_t tfw : 1;
	/* Time Stamp */
	uint32_t time;
	/* GIT Changeset Value */
	uint32_t gitversion;
#endif
} __PACKED__;

/** Firmware Capabilities */
#define PONFW_CAPABILITIES_CMD_ID (0x02)
#define PONFW_CAPABILITIES_LEN 12
/* AON mode is supported. */
#define PONFW_CAPABILITIES_AON 1
/* Secure debug mode is activated. */
#define PONFW_CAPABILITIES_SDBG 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_AMCC 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_G984 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_G987 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_G989 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_G9807 1
/* Annex C is supported. */
#define PONFW_CAPABILITIES_ANXC 1
/* Annex D is supported. */
#define PONFW_CAPABILITIES_ANXD 1
/* Annex E is supported. */
#define PONFW_CAPABILITIES_ANXE 1
/* Annex F is supported. */
#define PONFW_CAPABILITIES_ANXF 1
/* Doze mode is supported. */
#define PONFW_CAPABILITIES_DOZE 1
/* Cyclic sleep mode is supported. */
#define PONFW_CAPABILITIES_CSLP 1
/* Watchful sleep mode is supported. */
#define PONFW_CAPABILITIES_WSLP 1
/* DBA mode 0 is supported. */
#define PONFW_CAPABILITIES_DBAM0 1
/* DBA mode 1 is supported. */
#define PONFW_CAPABILITIES_DBAM1 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_CRY1 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_CRY2 1
/* This mode is supported. */
#define PONFW_CAPABILITIES_CRY3 1
/* Secure debug mode is supported. */
#define PONFW_CAPABILITIES_DBG_SEC 0
/* Insecure debug mode is supported. */
#define PONFW_CAPABILITIES_DBG_INSEC 1

/* HW applicability of FW_CAPABILITIES */
#define PONFW_CAPABILITIES_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_capabilities {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Maximum number of QoS index values */
	uint32_t qos_max : 8;
	/* Reserved */
	uint32_t res1 : 1;
	/* Active Ethernet Mode */
	uint32_t aon : 1;
	/* Secure Debug Mode */
	uint32_t sdbg : 1;
	/* ITU-T G.989 AMCC Channel */
	uint32_t amcc : 1;
	/* ITU-T G.984.3 */
	uint32_t g984 : 1;
	/* ITU-T G.987.3 */
	uint32_t g987 : 1;
	/* ITU-T G.989.3 */
	uint32_t g989 : 1;
	/* ITU-T G.9807.1 */
	uint32_t g9807 : 1;
	/* ITU-T G.984.3 Annex C */
	uint32_t anxc : 1;
	/* ITU-T G.984.3 Annex D */
	uint32_t anxd : 1;
	/* ITU-T G.987.3 Annex E */
	uint32_t anxe : 1;
	/* ITU-T G.987.3 Annex F */
	uint32_t anxf : 1;
	/* IEEE 802.3 EPON */
	uint32_t epon : 1;
	/* IEEE 802.3 10GEPON Asymmetrical */
	uint32_t xgepon : 1;
	/* IEEE 802.3 10GEPON Symmetrical */
	uint32_t xgsepon : 1;
	/* Power Saving - Doze Mode */
	uint32_t doze : 1;
	/* Power Saving - Cyclic Sleep Mode */
	uint32_t cslp : 1;
	/* Power Saving - Watchful Sleep Mode */
	uint32_t wslp : 1;
	/* DBA Mode 0 */
	uint32_t dbam0 : 1;
	/* DBA Mode 1 */
	uint32_t dbam1 : 1;
	/* Cryptographic Mode 1 */
	uint32_t cry1 : 1;
	/* Cryptographic Mode 2 */
	uint32_t cry2 : 1;
	/* Cryptographic Mode 3 */
	uint32_t cry3 : 1;
	/* Debug Mode Enable */
	uint32_t dbg : 1;
	/* Reserved */
	uint32_t res2 : 8;
	/* GEM Ports */
	uint32_t gem : 16;
	/* Allocations */
	uint32_t alloc : 8;
	/* Transceiver Initialization Time */
	uint32_t itransinit : 16;
	/* Transmitter Initialization Time */
	uint32_t itxinit : 16;
#else
	/* Debug Mode Enable */
	uint32_t dbg : 1;
	/* Cryptographic Mode 3 */
	uint32_t cry3 : 1;
	/* Cryptographic Mode 2 */
	uint32_t cry2 : 1;
	/* Cryptographic Mode 1 */
	uint32_t cry1 : 1;
	/* DBA Mode 1 */
	uint32_t dbam1 : 1;
	/* DBA Mode 0 */
	uint32_t dbam0 : 1;
	/* Power Saving - Watchful Sleep Mode */
	uint32_t wslp : 1;
	/* Power Saving - Cyclic Sleep Mode */
	uint32_t cslp : 1;
	/* Power Saving - Doze Mode */
	uint32_t doze : 1;
	/* IEEE 802.3 10GEPON Symmetrical */
	uint32_t xgsepon : 1;
	/* IEEE 802.3 10GEPON Asymmetrical */
	uint32_t xgepon : 1;
	/* IEEE 802.3 EPON */
	uint32_t epon : 1;
	/* ITU-T G.987.3 Annex F */
	uint32_t anxf : 1;
	/* ITU-T G.987.3 Annex E */
	uint32_t anxe : 1;
	/* ITU-T G.984.3 Annex D */
	uint32_t anxd : 1;
	/* ITU-T G.984.3 Annex C */
	uint32_t anxc : 1;
	/* ITU-T G.9807.1 */
	uint32_t g9807 : 1;
	/* ITU-T G.989.3 */
	uint32_t g989 : 1;
	/* ITU-T G.987.3 */
	uint32_t g987 : 1;
	/* ITU-T G.984.3 */
	uint32_t g984 : 1;
	/* ITU-T G.989 AMCC Channel */
	uint32_t amcc : 1;
	/* Secure Debug Mode */
	uint32_t sdbg : 1;
	/* Active Ethernet Mode */
	uint32_t aon : 1;
	/* Reserved */
	uint32_t res1 : 1;
	/* Maximum number of QoS index values */
	uint32_t qos_max : 8;
	/* Allocations */
	uint32_t alloc : 8;
	/* GEM Ports */
	uint32_t gem : 16;
	/* Reserved */
	uint32_t res2 : 8;
	/* Transmitter Initialization Time */
	uint32_t itxinit : 16;
	/* Transceiver Initialization Time */
	uint32_t itransinit : 16;
#endif
} __PACKED__;

/** XGTC ONU Configuration */
#define PONFW_XGTC_ONU_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x03)
#define PONFW_XGTC_ONU_CONFIG_LEN 76
/* The additional padding function is off (default). */
#define PONFW_XGTC_ONU_CONFIG_PAD_2ND_PAD_OFF 0
/* The additional padding function is on. */
#define PONFW_XGTC_ONU_CONFIG_PAD_2ND_PAD_ON 1
/* The FCS bytes are stripped from the Ethernet frames (default). */
#define PONFW_XGTC_ONU_CONFIG_DS_FCS_EN_STRIP 0
/* The FCS bytes are kept with the Ethernet frames. */
#define PONFW_XGTC_ONU_CONFIG_DS_FCS_EN_KEEP 1
/* A timestamp is attached to the Ethernet packets (default). */
#define PONFW_XGTC_ONU_CONFIG_DS_TS_DIS_EN 0
/* No timestamp is attached to the Ethernet packets. */
#define PONFW_XGTC_ONU_CONFIG_DS_TS_DIS_DIS 1
/* Sending of Dying Gasp information is enabled (default). */
#define PONFW_XGTC_ONU_CONFIG_DG_DIS_EN 0
/* Sending of Dying Gasp information is disabled. */
#define PONFW_XGTC_ONU_CONFIG_DG_DIS_DIS 1
/* Coexistence mode is disabled (default). */
#define PONFW_XGTC_ONU_CONFIG_COEX_OP_DIS 0
/* Coexistence mode is enabled. */
#define PONFW_XGTC_ONU_CONFIG_COEX_OP_EN 1
/* XGS-PON mode (G.9807) */
#define PONFW_XGTC_ONU_CONFIG_MODE_9807 0
/* XG-PON mode (G.987) */
#define PONFW_XGTC_ONU_CONFIG_MODE_987 1
/* NG-PON2 mode, 2.5 G upstream (G.989) */
#define PONFW_XGTC_ONU_CONFIG_MODE_989_2G5 3
/* NG-PON2 mode, 10 G upstream (G.989) */
#define PONFW_XGTC_ONU_CONFIG_MODE_989_10G 4

/* HW applicability of XGTC_ONU_CONFIG */
#define PONFW_XGTC_ONU_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_onu_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Registration ID */
	uint32_t id[9];
	/* Prototype Board Identifier */
	uint32_t vlan_msb : 4;
	/* Additional Padding after XGMII-TX [LGM-C] */
	uint32_t pad_2nd : 1;
	/* Downstream Ethernet FCS Mode */
	uint32_t ds_fcs_en : 1;
	/* Downstream Timestamp Disable */
	uint32_t ds_ts_dis : 1;
	/* Dying Gasp Disable */
	uint32_t dg_dis : 1;
	/* Emergency stop state */
	uint32_t emergency : 1;
	/* Coexistence Operation Enable */
	uint32_t coex_op : 1;
	/* Reserved */
	uint32_t res1 : 6;
	/* Power Leveling Capability */
	uint32_t plev_cap : 8;
	/* ONU Operation Mode */
	uint32_t mode : 8;
	/* Timeout Timer 0 (Discovery Timer) */
	uint32_t to0 : 16;
	/* Timeout Timer 1 (Ranging Timer) */
	uint32_t to1 : 16;
	/* Timeout Timer 2 (LODS Timer) */
	uint32_t to2 : 16;
	/* Timeout Timer 3 (LODS Timer with WLCP) */
	uint32_t to3 : 16;
	/* Timeout Timer 4 (Downstream Tuning Timer) */
	uint32_t to4 : 16;
	/* Timeout Timer 5 (Upstream Tuning Timer) */
	uint32_t to5 : 16;
	/* Timeout Timer 6 (Lost ONU Timer) */
	uint32_t to6 : 16;
	/* Timeout Timer CPL (Change Transmit Power Level) */
	uint32_t to_cpl : 16;
	/* Reserved */
	uint32_t res2 : 12;
	/* Timeout for Channel Partition Index Searching */
	uint32_t to_cpi : 20;
	/* Reserved */
	uint32_t res3 : 16;
	/* Timeout for TProfileDwell Timer */
	uint32_t to_tpd : 16;
	/* Reserved */
	uint32_t res4;
#else
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Registration ID */
	uint32_t id[9];
	/* ONU Operation Mode */
	uint32_t mode : 8;
	/* Power Leveling Capability */
	uint32_t plev_cap : 8;
	/* Reserved */
	uint32_t res1 : 6;
	/* Coexistence Operation Enable */
	uint32_t coex_op : 1;
	/* Emergency stop state */
	uint32_t emergency : 1;
	/* Dying Gasp Disable */
	uint32_t dg_dis : 1;
	/* Downstream Timestamp Disable */
	uint32_t ds_ts_dis : 1;
	/* Downstream Ethernet FCS Mode */
	uint32_t ds_fcs_en : 1;
	/* Additional Padding after XGMII-TX [LGM-C] */
	uint32_t pad_2nd : 1;
	/* Prototype Board Identifier */
	uint32_t vlan_msb : 4;
	/* Timeout Timer 1 (Ranging Timer) */
	uint32_t to1 : 16;
	/* Timeout Timer 0 (Discovery Timer) */
	uint32_t to0 : 16;
	/* Timeout Timer 3 (LODS Timer with WLCP) */
	uint32_t to3 : 16;
	/* Timeout Timer 2 (LODS Timer) */
	uint32_t to2 : 16;
	/* Timeout Timer 5 (Upstream Tuning Timer) */
	uint32_t to5 : 16;
	/* Timeout Timer 4 (Downstream Tuning Timer) */
	uint32_t to4 : 16;
	/* Timeout Timer CPL (Change Transmit Power Level) */
	uint32_t to_cpl : 16;
	/* Timeout Timer 6 (Lost ONU Timer) */
	uint32_t to6 : 16;
	/* Timeout for Channel Partition Index Searching */
	uint32_t to_cpi : 20;
	/* Reserved */
	uint32_t res2 : 12;
	/* Timeout for TProfileDwell Timer */
	uint32_t to_tpd : 16;
	/* Reserved */
	uint32_t res3 : 16;
	/* Reserved */
	uint32_t res4;
#endif
} __PACKED__;

/** Time of Day Synchronization */
#define PONFW_ONU_TOD_SYNC_CMD_ID (PONFW_STD_ITUT | 0x04)
#define PONFW_ONU_TOD_SYNC_LEN 12
/* TOD module is free running using local oscillator */
#define PONFW_ONU_TOD_SYNC_TOD_QUALITY_LOC 0x0
/* TOD is in sync with OLT */
#define PONFW_ONU_TOD_SYNC_TOD_QUALITY_OLT 0x1

/* HW applicability of ONU_TOD_SYNC */
#define PONFW_ONU_TOD_SYNC_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_tod_sync {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Multiframe count */
	uint32_t mf_count;
	/* TOD seconds */
	uint32_t tod_sec;
	/* Time of Day quality */
	uint32_t tod_quality : 1;
	/* Reserved */
	uint32_t res1 : 1;
	/* TOD Microseconds */
	uint32_t tod_micro : 14;
	/* Reserved */
	uint32_t res2 : 1;
	/* TOD Nanoseconds */
	uint32_t tod_clocks : 15;
#else
	/* Multiframe count */
	uint32_t mf_count;
	/* TOD seconds */
	uint32_t tod_sec;
	/* TOD Nanoseconds */
	uint32_t tod_clocks : 15;
	/* Reserved */
	uint32_t res2 : 1;
	/* TOD Microseconds */
	uint32_t tod_micro : 14;
	/* Reserved */
	uint32_t res1 : 1;
	/* Time of Day quality */
	uint32_t tod_quality : 1;
#endif
} __PACKED__;

/** Time of Day Configuration */
#define PONFW_ONU_TOD_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x05)
#define PONFW_ONU_TOD_CONFIG_LEN 12
/* Normal operation mode */
#define PONFW_ONU_TOD_CONFIG_FREN_DIS 0
/* Free-running debug mode is enabled. */
#define PONFW_ONU_TOD_CONFIG_FREN_EN 1
/* Select the positive polarity. The PPS pulse starts with a rising edge and
 * forms a positive pulse of PPSW width.
 */
#define PONFW_ONU_TOD_CONFIG_PPSP_POS 0
/* Select the negative polarity. The PPS pulse starts with a falling edge and
 * forms a negative pulse of PPSW width.
 */
#define PONFW_ONU_TOD_CONFIG_PPSP_NEG 1
/* Select the rising edge */
#define PONFW_ONU_TOD_CONFIG_CTES_RISE 0x0
/* Select the falling edge */
#define PONFW_ONU_TOD_CONFIG_CTES_FALL 0x1
/* Select both edges */
#define PONFW_ONU_TOD_CONFIG_CTES_BOTH 0x2

/* HW applicability of ONU_TOD_CONFIG */
#define PONFW_ONU_TOD_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_tod_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 15;
	/* 1PPS Free Running Mode Enable */
	uint32_t fren : 1;
	/* PPS Signal Pulse Width */
	uint32_t ppsw : 13;
	/* PPS Signal Pulse Polarity */
	uint32_t ppsp : 1;
	/* Capture Trigger Edge Selection */
	uint32_t ctes : 2;
	/* Reserved */
	uint32_t res2 : 6;
	/* Upstream Correction */
	uint32_t usc : 10;
	/* Reserved */
	uint32_t res3 : 6;
	/* Downstream Correction */
	uint32_t dsc : 10;
	/* Reserved */
	uint32_t res4 : 7;
	/* Output Sub-sampling */
	uint32_t outss : 9;
	/* Reserved */
	uint32_t res5 : 6;
	/* Output Correction */
	uint32_t outc : 10;
#else
	/* Capture Trigger Edge Selection */
	uint32_t ctes : 2;
	/* PPS Signal Pulse Polarity */
	uint32_t ppsp : 1;
	/* PPS Signal Pulse Width */
	uint32_t ppsw : 13;
	/* 1PPS Free Running Mode Enable */
	uint32_t fren : 1;
	/* Reserved */
	uint32_t res1 : 15;
	/* Downstream Correction */
	uint32_t dsc : 10;
	/* Reserved */
	uint32_t res3 : 6;
	/* Upstream Correction */
	uint32_t usc : 10;
	/* Reserved */
	uint32_t res2 : 6;
	/* Output Correction */
	uint32_t outc : 10;
	/* Reserved */
	uint32_t res5 : 6;
	/* Output Sub-sampling */
	uint32_t outss : 9;
	/* Reserved */
	uint32_t res4 : 7;
#endif
} __PACKED__;

/** Random Number */
#define PONFW_RAND_NUM_CMD_ID (0x06)
#define PONFW_RAND_NUM_LEN 16

/* HW applicability of RAND_NUM */
#define PONFW_RAND_NUM_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_rand_num {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Random number 0 */
	uint32_t rand0;
	/* Random number 1 */
	uint32_t rand1;
	/* Random number 2 */
	uint32_t rand2;
	/* Random number 3 */
	uint32_t rand3;
#else
	/* Random number 0 */
	uint32_t rand0;
	/* Random number 1 */
	uint32_t rand1;
	/* Random number 2 */
	uint32_t rand2;
	/* Random number 3 */
	uint32_t rand3;
#endif
} __PACKED__;

/** Monitor Configuration */
#define PONFW_MONITOR_CONFIG_CMD_ID (0x07)
#define PONFW_MONITOR_CONFIG_LEN 4
/* Automatic time message is disabled. */
#define PONFW_MONITOR_CONFIG_PPS_TIME_DIS 0
/* Automatic time message is enabled. */
#define PONFW_MONITOR_CONFIG_PPS_TIME_EN 1
/* PSM logging is disabled. */
#define PONFW_MONITOR_CONFIG_PSM_LOG_DIS 0
/* PSM logging is enabled. */
#define PONFW_MONITOR_CONFIG_PSM_LOG_EN 1
/* PLOAM/MPCP logging in DS and US is disabled. */
#define PONFW_MONITOR_CONFIG_CTRL_LOG_DIS 0
/* PLOAM/MPCP logging in DS and US is enabled. */
#define PONFW_MONITOR_CONFIG_CTRL_LOG_EN 1

/* HW applicability of MONITOR_CONFIG */
#define PONFW_MONITOR_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_monitor_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Alarm Repetition Count Threshold */
	uint32_t alarm_thr : 4;
	/* Alarm Repetition Observation Time */
	uint32_t alarm_ot : 12;
	/* Reserved */
	uint32_t res1 : 12;
	/* Automatic Time Message after 1PPS Pulse */
	uint32_t pps_time : 1;
	/* PSM Logging */
	uint32_t psm_log : 1;
	/* Reserved */
	uint32_t res2 : 1;
	/* Control logging */
	uint32_t ctrl_log : 1;
#else
	/* Control logging */
	uint32_t ctrl_log : 1;
	/* Reserved */
	uint32_t res2 : 1;
	/* PSM Logging */
	uint32_t psm_log : 1;
	/* Automatic Time Message after 1PPS Pulse */
	uint32_t pps_time : 1;
	/* Reserved */
	uint32_t res1 : 12;
	/* Alarm Repetition Observation Time */
	uint32_t alarm_ot : 12;
	/* Alarm Repetition Count Threshold */
	uint32_t alarm_thr : 4;
#endif
} __PACKED__;

/** XGTC PLOAM Log Messages */
#define PONFW_XGTC_PLOAM_LOG_CMD_ID (PONFW_STD_ITUT | 0x08)
#define PONFW_XGTC_PLOAM_LOG_LEN 44
/* Downstream PLOAM */
#define PONFW_XGTC_PLOAM_LOG_DIR_DS 0x0
/* Upstream PLOAM */
#define PONFW_XGTC_PLOAM_LOG_DIR_US 0x1

/* HW applicability of XGTC_PLOAM_LOG */
#define PONFW_XGTC_PLOAM_LOG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_ploam_log {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Direction Information */
	uint32_t dir : 1;
	/* Time Stamp */
	uint32_t time_stamp : 31;
	/* ONU-ID (octet1-2) */
	uint32_t id : 16;
	/* Message type ID (octet 3) */
	uint32_t type : 8;
	/* Sequence number (octet 4) */
	uint32_t seqno : 8;
	/* Message content 0 (octet 5 - 8) */
	uint32_t msg[9];
#else
	/* Time Stamp */
	uint32_t time_stamp : 31;
	/* Direction Information */
	uint32_t dir : 1;
	/* Sequence number (octet 4) */
	uint32_t seqno : 8;
	/* Message type ID (octet 3) */
	uint32_t type : 8;
	/* ONU-ID (octet1-2) */
	uint32_t id : 16;
	/* Message content 0 (octet 5 - 8) */
	uint32_t msg[9];
#endif
} __PACKED__;

/** GTC PLOAM Log Messages */
#define PONFW_GTC_PLOAM_LOG_CMD_ID (PONFW_STD_ITUT | 0x09)
#define PONFW_GTC_PLOAM_LOG_LEN 16
/* Downstream PLOAM */
#define PONFW_GTC_PLOAM_LOG_DIR_DS 0x0
/* Upstream PLOAM */
#define PONFW_GTC_PLOAM_LOG_DIR_US 0x1

/* HW applicability of GTC_PLOAM_LOG */
#define PONFW_GTC_PLOAM_LOG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gtc_ploam_log {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Direction Information */
	uint32_t dir : 1;
	/* Time Stamp */
	uint32_t time_stamp : 31;
	/* ONU-ID (octet 1) */
	uint32_t id : 8;
	/* Message type ID (octet 2) */
	uint32_t mid : 8;
	/* DATA0 (octet 3 - 4) */
	uint32_t data1 : 16;
	/* DATA1 (octet 5 - 8) */
	uint32_t data2;
	/* DATA2 (octet 9 - 12) */
	uint32_t data3;
#else
	/* Time Stamp */
	uint32_t time_stamp : 31;
	/* Direction Information */
	uint32_t dir : 1;
	/* DATA0 (octet 3 - 4) */
	uint32_t data1 : 16;
	/* Message type ID (octet 2) */
	uint32_t mid : 8;
	/* ONU-ID (octet 1) */
	uint32_t id : 8;
	/* DATA1 (octet 5 - 8) */
	uint32_t data2;
	/* DATA2 (octet 9 - 12) */
	uint32_t data3;
#endif
} __PACKED__;

/** ONU Optical Interface Configuration */
#define PONFW_ONU_OPTIC_CONFIG_CMD_ID (0x0A)
#define PONFW_ONU_OPTIC_CONFIG_LEN 24
/* Automatic rogue ONU state detection is disabled (default). */
#define PONFW_ONU_OPTIC_CONFIG_RE_DIS 0
/* Internal automatic rogue ONU state detection is enabled. */
#define PONFW_ONU_OPTIC_CONFIG_RE_EN 1
/* External automatic rogue ONU state detection is enabled. */
#define PONFW_ONU_OPTIC_CONFIG_RE_EXT 2
/* The PSE alarm is disabled. */
#define PONFW_ONU_OPTIC_CONFIG_PSE_EN_DIS 0
/* The PSE alarm is enabled. */
#define PONFW_ONU_OPTIC_CONFIG_PSE_EN_EN 1
/* Direct signal detect function. */
#define PONFW_ONU_OPTIC_CONFIG_OPT_TX_SD_POL_DIR 0
/* Inverted signal detect function. */
#define PONFW_ONU_OPTIC_CONFIG_OPT_TX_SD_POL_INV 1
/* The LOS output is disabled. */
#define PONFW_ONU_OPTIC_CONFIG_LOS_SD_EN_DIS 0
/* The LOS output is enabled. */
#define PONFW_ONU_OPTIC_CONFIG_LOS_SD_EN_EN 1
/* The loop timing power save mode is disabled. */
#define PONFW_ONU_OPTIC_CONFIG_LOOP_PS_EN_DIS 0
/* The loop timing power save mode is enabled. */
#define PONFW_ONU_OPTIC_CONFIG_LOOP_PS_EN_EN 1
/* The LOS output is used as "Loss of Signal" indication (high level if no
 * light is received).
 */
#define PONFW_ONU_OPTIC_CONFIG_LOS_SD_OUT_LOS 0
/* The LOS output is used as "Signal Detect" indication (low level if no
 * light is received).
 */
#define PONFW_ONU_OPTIC_CONFIG_LOS_SD_OUT_SD 1
/* Fixed low off-level. */
#define PONFW_ONU_OPTIC_CONFIG_TX_PUP_MODE_LOW 0x1
/* Fixed high off-level. */
#define PONFW_ONU_OPTIC_CONFIG_TX_PUP_MODE_HIGH 0x3
/* Automatic level detection based on the pull-up/pull-down configuration of
 * the external optical module.
 */
#define PONFW_ONU_OPTIC_CONFIG_TX_BIAS_MODE_AUTO 0x0
/* Fixed high off-level. */
#define PONFW_ONU_OPTIC_CONFIG_TX_BIAS_MODE_HIGH 0x1
/* Fixed low off-level. */
#define PONFW_ONU_OPTIC_CONFIG_TX_BIAS_MODE_LOW 0x3
/* The input is used as "Loss of Signal" indication (high level if no light
 * is received).
 */
#define PONFW_ONU_OPTIC_CONFIG_LOS_SD_LOS 0
/* The input is used as "Signal Detect" indication (low level if no light is
 * received).
 */
#define PONFW_ONU_OPTIC_CONFIG_LOS_SD_SD 1
/* Signals are not ORed */
#define PONFW_ONU_OPTIC_CONFIG_ENV_SEL_DIS 0
/* The transmitter burst enable signal is ORed with the envelope defined by
 * LASER_LEAD and LASER_LAG.
 */
#define PONFW_ONU_OPTIC_CONFIG_ENV_SEL_EN 1

/* HW applicability of ONU_OPTIC_CONFIG */
#define PONFW_ONU_OPTIC_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_optic_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 4;
	/* Laser Lead Time */
	uint32_t laser_lead : 12;
	/* Reserved */
	uint32_t res2 : 6;
	/* Laser Lag Time */
	uint32_t laser_lag : 10;
	/* Reserved */
	uint32_t res3 : 4;
	/* SerDes Lead Time */
	uint32_t serdes_lead : 12;
	/* Reserved */
	uint32_t res4 : 6;
	/* SerDes Lag Time */
	uint32_t serdes_lag : 10;
	/* Automatic Rogue Detection Enable */
	uint32_t re : 2;
	/* Reserved */
	uint32_t res5 : 4;
	/* Rogue Lead Time */
	uint32_t rogue_lead : 10;
	/* Reserved */
	uint32_t res6 : 6;
	/* Rogue Lag Time */
	uint32_t rogue_lag : 10;
	/* BIAS Enable Rising Edge Delay Time */
	uint32_t bias_rd : 16;
	/* BIAS Enable Falling Edge Delay Time */
	uint32_t bias_fd : 16;
	/* Burst Pause Pattern */
	uint32_t bpp;
	/* Reserved */
	uint32_t res7 : 16;
	/* Reserved */
	uint32_t res8 : 2;
	/* Enable the PSE Detection */
	uint32_t pse_en : 1;
	/* OPT_TX_SD Input Polarity */
	uint32_t opt_tx_sd_pol : 1;
	/* Signal Loss Output Enable for SFP */
	uint32_t los_sd_en : 1;
	/* Loop Timing Power Save Mode Enable */
	uint32_t loop_ps_en : 1;
	/* Signal Loss Output Polarity for SFP */
	uint32_t los_sd_out : 1;
	/* RESERVED */
	uint32_t res9 : 2;
	/* TX_PUP Output Polarity */
	uint32_t tx_pup_mode : 2;
	/* TX_BIAS Output Polarity */
	uint32_t tx_bias_mode : 2;
	/* Receive Signal Loss Input Polarity */
	uint32_t los_sd : 1;
	/* Reserved */
	uint32_t res10 : 1;
	/* Envelope Selection */
	uint32_t env_sel : 1;
#else
	/* Laser Lag Time */
	uint32_t laser_lag : 10;
	/* Reserved */
	uint32_t res2 : 6;
	/* Laser Lead Time */
	uint32_t laser_lead : 12;
	/* Reserved */
	uint32_t res1 : 4;
	/* SerDes Lag Time */
	uint32_t serdes_lag : 10;
	/* Reserved */
	uint32_t res4 : 6;
	/* SerDes Lead Time */
	uint32_t serdes_lead : 12;
	/* Reserved */
	uint32_t res3 : 4;
	/* Rogue Lag Time */
	uint32_t rogue_lag : 10;
	/* Reserved */
	uint32_t res6 : 6;
	/* Rogue Lead Time */
	uint32_t rogue_lead : 10;
	/* Reserved */
	uint32_t res5 : 4;
	/* Automatic Rogue Detection Enable */
	uint32_t re : 2;
	/* BIAS Enable Falling Edge Delay Time */
	uint32_t bias_fd : 16;
	/* BIAS Enable Rising Edge Delay Time */
	uint32_t bias_rd : 16;
	/* Burst Pause Pattern */
	uint32_t bpp;
	/* Envelope Selection */
	uint32_t env_sel : 1;
	/* Reserved */
	uint32_t res10 : 1;
	/* Receive Signal Loss Input Polarity */
	uint32_t los_sd : 1;
	/* TX_BIAS Output Polarity */
	uint32_t tx_bias_mode : 2;
	/* TX_PUP Output Polarity */
	uint32_t tx_pup_mode : 2;
	/* RESERVED */
	uint32_t res9 : 2;
	/* Signal Loss Output Polarity for SFP */
	uint32_t los_sd_out : 1;
	/* Loop Timing Power Save Mode Enable */
	uint32_t loop_ps_en : 1;
	/* Signal Loss Output Enable for SFP */
	uint32_t los_sd_en : 1;
	/* OPT_TX_SD Input Polarity */
	uint32_t opt_tx_sd_pol : 1;
	/* Enable the PSE Detection */
	uint32_t pse_en : 1;
	/* Reserved */
	uint32_t res8 : 2;
	/* Reserved */
	uint32_t res7 : 16;
#endif
} __PACKED__;

/** XGTC ONU Reboot Request */
#define PONFW_XGTC_ONU_REBOOT_REQ_CMD_ID (PONFW_STD_ITUT | 0x0B)
#define PONFW_XGTC_ONU_REBOOT_REQ_LEN 4
/* MIB reset is defined in ITU-T G.988 Clause 9.1.3 */
#define PONFW_XGTC_ONU_REBOOT_REQ_DEPTH_MIB_RESET 0x0
/* Perform equivalent of OMCI reboot (Clause A.2.35 of G.988 */
#define PONFW_XGTC_ONU_REBOOT_REQ_DEPTH_OMCI 0x1
/* Perform equivalent of power cycle reboot */
#define PONFW_XGTC_ONU_REBOOT_REQ_DEPTH_PCR 0x2
/* Configuration reset, then perform MIB reset and reboot */
#define PONFW_XGTC_ONU_REBOOT_REQ_DEPTH_CR_MIB 0x3
/* Load and execute the image that is currently committed */
#define PONFW_XGTC_ONU_REBOOT_REQ_IMAGE_CURRENT 0x0
/* Load and execute the image that is not currently committed */
#define PONFW_XGTC_ONU_REBOOT_REQ_IMAGE_NOT_CURRENT 0x1
/* Reboot if ONU is in any state */
#define PONFW_XGTC_ONU_REBOOT_REQ_STATE_ANY 0x0
/* Reboot only if ONU in states O1, O2-3 */
#define PONFW_XGTC_ONU_REBOOT_REQ_STATE_SELECTED 0x1
/* Reboot regardless of POTS/VoIP call state */
#define PONFW_XGTC_ONU_REBOOT_REQ_FLAGS_IGNORE 0x0
/* Reboot only if no POTS/VoIP calls are in progress */
#define PONFW_XGTC_ONU_REBOOT_REQ_FLAGS_NO_CALLS 0x1
/* Reboot only if no emergency call is in progress */
#define PONFW_XGTC_ONU_REBOOT_REQ_FLAGS_NO_EMERGENCY 0x2

/* HW applicability of XGTC_ONU_REBOOT_REQ */
#define PONFW_XGTC_ONU_REBOOT_REQ_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_onu_reboot_req {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reboot Depth */
	uint32_t depth : 8;
	/* Reboot Image */
	uint32_t image : 8;
	/* ONU State */
	uint32_t state : 8;
	/* Control Flags */
	uint32_t flags : 8;
#else
	/* Control Flags */
	uint32_t flags : 8;
	/* ONU State */
	uint32_t state : 8;
	/* Reboot Image */
	uint32_t image : 8;
	/* Reboot Depth */
	uint32_t depth : 8;
#endif
} __PACKED__;

/** Transmit Power Level Request */
#define PONFW_TX_POWER_LEVEL_REQ_CMD_ID (PONFW_STD_ITUT | 0x0C)
#define PONFW_TX_POWER_LEVEL_REQ_LEN 4
/* Direct attenuation level control, set the level which is defined by the
 * ATTENUATION value (in dB).
 */
#define PONFW_TX_POWER_LEVEL_REQ_OPER_DIRECT 0x00
/* Decrease the optical transmit power by 3 dB. */
#define PONFW_TX_POWER_LEVEL_REQ_OPER_DEC 0x01
/* Increase the optical transmit power by 3 dB. */
#define PONFW_TX_POWER_LEVEL_REQ_OPER_INC 0x02
/* Request the current level without changing it. */
#define PONFW_TX_POWER_LEVEL_REQ_OPER_REQ 0x03

/* HW applicability of TX_POWER_LEVEL_REQ */
#define PONFW_TX_POWER_LEVEL_REQ_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_tx_power_level_req {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Operation Type */
	uint32_t oper : 8;
	/* Attenuation Level */
	uint32_t attenuation : 8;
	/* Reserved */
	uint32_t res : 16;
#else
	/* Reserved */
	uint32_t res : 16;
	/* Attenuation Level */
	uint32_t attenuation : 8;
	/* Operation Type */
	uint32_t oper : 8;
#endif
} __PACKED__;

/** Time Capture Value */
#define PONFW_ONU_TIME_CAPTURE_CMD_ID (PONFW_STD_ITUT | 0x0D)
#define PONFW_ONU_TIME_CAPTURE_LENR 4
#define PONFW_ONU_TIME_CAPTURE_LEN 16

/* External triggered capture value */
#define PONFW_ONU_TIME_CAPTURE_CAP_SRC_EXT 0x0
/* Downstream tick triggered capture value */
#define PONFW_ONU_TIME_CAPTURE_CAP_SRC_DST 0x1
/* SFC/MPCP counter match triggered capture value */
#define PONFW_ONU_TIME_CAPTURE_CAP_SRC_SCM 0x2
/* TOD module is free running using local oscillator */
#define PONFW_ONU_TIME_CAPTURE_TOD_QUALITY_LOC 0x0
/* TOD is in sync with OLT */
#define PONFW_ONU_TIME_CAPTURE_TOD_QUALITY_OLT 0x1

/* HW applicability of ONU_TIME_CAPTURE */
#define PONFW_ONU_TIME_CAPTURE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_time_capture {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 30;
	/* Capture Source */
	uint32_t cap_src : 2;
	/* Multiframe count */
	uint32_t mf_count;
	/* TOD seconds */
	uint32_t tod_sec;
	/* Time of Day quality */
	uint32_t tod_quality : 1;
	/* Reserved */
	uint32_t res2 : 1;
	/* TOD Microseconds */
	uint32_t tod_micro : 14;
	/* Reserved */
	uint32_t res3 : 1;
	/* TOD Nanoseconds */
	uint32_t tod_clocks : 15;
#else
	/* Capture Source */
	uint32_t cap_src : 2;
	/* Reserved */
	uint32_t res1 : 30;
	/* Multiframe count */
	uint32_t mf_count;
	/* TOD seconds */
	uint32_t tod_sec;
	/* TOD Nanoseconds */
	uint32_t tod_clocks : 15;
	/* Reserved */
	uint32_t res3 : 1;
	/* TOD Microseconds */
	uint32_t tod_micro : 14;
	/* Reserved */
	uint32_t res2 : 1;
	/* Time of Day quality */
	uint32_t tod_quality : 1;
#endif
} __PACKED__;

/** Time Compare Value */
#define PONFW_ONU_TIME_COMPARE_CMD_ID (PONFW_STD_ITUT | 0x0E)
#define PONFW_ONU_TIME_COMPARE_LEN 8

/* HW applicability of ONU_TIME_COMPARE */
#define PONFW_ONU_TIME_COMPARE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_time_compare {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* TOD seconds */
	uint32_t tod_sec;
	/* Reserved */
	uint32_t res1 : 2;
	/* TOD Microseconds */
	uint32_t tod_micro : 14;
	/* Reserved */
	uint32_t res2 : 1;
	/* TOD Nanoseconds */
	uint32_t tod_clocks : 15;
#else
	/* TOD seconds */
	uint32_t tod_sec;
	/* TOD Nanoseconds */
	uint32_t tod_clocks : 15;
	/* Reserved */
	uint32_t res2 : 1;
	/* TOD Microseconds */
	uint32_t tod_micro : 14;
	/* Reserved */
	uint32_t res1 : 2;
#endif
} __PACKED__;

/** GTC ONU Configuration */
#define PONFW_GTC_ONU_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x0F)
#define PONFW_GTC_ONU_CONFIG_LEN 44
/* The FCS bytes are stripped from the Ethernet frames (default). */
#define PONFW_GTC_ONU_CONFIG_DS_FCS_EN_STRIP 0
/* The new FCS bytes are added to the Ethernet frames after the old FCS has
 * been removed.
 */
#define PONFW_GTC_ONU_CONFIG_DS_FCS_EN_REPLACE 1
/* A timestamp is attached to the Ethernet packets (default). */
#define PONFW_GTC_ONU_CONFIG_DS_TS_DIS_EN 0
/* No timestamp is attached to the Ethernet packets. */
#define PONFW_GTC_ONU_CONFIG_DS_TS_DIS_DIS 1
/* Sending of Dying Gasp information is enabled (default). */
#define PONFW_GTC_ONU_CONFIG_DG_DIS_EN 0
/* Sending of Dying Gasp information is disabled. */
#define PONFW_GTC_ONU_CONFIG_DG_DIS_DIS 1

/* HW applicability of GTC_ONU_CONFIG */
#define PONFW_GTC_ONU_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gtc_onu_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Reserved */
	uint32_t res1 : 16;
	/* Password 1 */
	uint32_t pw1 : 8;
	/* Password 2 */
	uint32_t pw2 : 8;
	/* Password 3 */
	uint32_t pw3 : 8;
	/* Password 4 */
	uint32_t pw4 : 8;
	/* Password 5 */
	uint32_t pw5 : 8;
	/* Password 6 */
	uint32_t pw6 : 8;
	/* Password 7 */
	uint32_t pw7 : 8;
	/* Password 8 */
	uint32_t pw8 : 8;
	/* Password 9 */
	uint32_t pw9 : 8;
	/* Password 10 */
	uint32_t pw10 : 8;
	/* Reserved */
	uint32_t res2 : 16;
	/* Timeout Timer 1 (Ranging Timer) */
	uint32_t to1 : 16;
	/* Timeout Timer 2 (LODS Timer) */
	uint32_t to2 : 16;
	/* Prototype Board Identifier */
	uint32_t vlan_msb : 4;
	/* Reserved */
	uint32_t res3 : 12;
	/* Reserved */
	uint32_t res4 : 16;
	/* Reserved */
	uint32_t res5 : 12;
	/* Downstream Ethernet FCS Mode */
	uint32_t ds_fcs_en : 1;
	/* Downstream Timestamp Disable */
	uint32_t ds_ts_dis : 1;
	/* Dying Gasp Disable */
	uint32_t dg_dis : 1;
	/* Emergency stop state */
	uint32_t emergency : 1;
	/* Reserved */
	uint32_t res6;
	/* Reserved */
	uint32_t res7;
	/* Reserved */
	uint32_t res8;
#else
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Password 2 */
	uint32_t pw2 : 8;
	/* Password 1 */
	uint32_t pw1 : 8;
	/* Reserved */
	uint32_t res1 : 16;
	/* Password 6 */
	uint32_t pw6 : 8;
	/* Password 5 */
	uint32_t pw5 : 8;
	/* Password 4 */
	uint32_t pw4 : 8;
	/* Password 3 */
	uint32_t pw3 : 8;
	/* Password 10 */
	uint32_t pw10 : 8;
	/* Password 9 */
	uint32_t pw9 : 8;
	/* Password 8 */
	uint32_t pw8 : 8;
	/* Password 7 */
	uint32_t pw7 : 8;
	/* Timeout Timer 1 (Ranging Timer) */
	uint32_t to1 : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* Reserved */
	uint32_t res3 : 12;
	/* Prototype Board Identifier */
	uint32_t vlan_msb : 4;
	/* Timeout Timer 2 (LODS Timer) */
	uint32_t to2 : 16;
	/* Emergency stop state */
	uint32_t emergency : 1;
	/* Dying Gasp Disable */
	uint32_t dg_dis : 1;
	/* Downstream Timestamp Disable */
	uint32_t ds_ts_dis : 1;
	/* Downstream Ethernet FCS Mode */
	uint32_t ds_fcs_en : 1;
	/* Reserved */
	uint32_t res5 : 12;
	/* Reserved */
	uint32_t res4 : 16;
	/* Reserved */
	uint32_t res6;
	/* Reserved */
	uint32_t res7;
	/* Reserved */
	uint32_t res8;
#endif
} __PACKED__;

/** Transmitter Enable Control for Active Ethernet */
#define PONFW_AON_CONFIG_CMD_ID (0x10)
#define PONFW_AON_CONFIG_LEN 4
/* The LOS signal does not cause an alarm event. */
#define PONFW_AON_CONFIG_LOS_EN_DIS 0
/* The LOS signal is used to set and clear the LOS alarm event. */
#define PONFW_AON_CONFIG_LOS_EN_EN 1
/* The LOS signal is directly converted into the signal level. A high
 * electrical level indicates a loss of signal.
 */
#define PONFW_AON_CONFIG_LOS_POL_DIRECT 0
/* The LOS signal is inverted to select the signal level. A low electrical
 * level indicates a loss of signal.
 */
#define PONFW_AON_CONFIG_LOS_POL_INVERTED 1
/* The enable signal is directly converted into the signal level. A high
 * electrical level enables transmission.
 */
#define PONFW_AON_CONFIG_POL_DIRECT 0
/* The enable signal is inverted to select the signal level. A low electrical
 * level enables transmission.
 */
#define PONFW_AON_CONFIG_POL_INVERTED 1
/* The laser transmitter is switched off. */
#define PONFW_AON_CONFIG_LASER_ON_OFF 0
/* The laser transmitter is switched on. */
#define PONFW_AON_CONFIG_LASER_ON_ON 1

/* HW applicability of AON_CONFIG */
#define PONFW_AON_CONFIG_HW_PROP	PONFW_PROP_HW_PRXURX

struct ponfw_aon_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Alarm Repetition Count Threshold */
	uint32_t alarm_thr : 4;
	/* Alarm Repetition Observation Time */
	uint32_t alarm_ot : 12;
	/* Reserved */
	uint32_t res : 12;
	/* LOS Signal Event Enable */
	uint32_t los_en : 1;
	/* Polarity of the LOS Signal */
	uint32_t los_pol : 1;
	/* Polarity of the TX_ENABLE Signal */
	uint32_t pol : 1;
	/* Laser Enable Control */
	uint32_t laser_on : 1;
#else
	/* Laser Enable Control */
	uint32_t laser_on : 1;
	/* Polarity of the TX_ENABLE Signal */
	uint32_t pol : 1;
	/* Polarity of the LOS Signal */
	uint32_t los_pol : 1;
	/* LOS Signal Event Enable */
	uint32_t los_en : 1;
	/* Reserved */
	uint32_t res : 12;
	/* Alarm Repetition Observation Time */
	uint32_t alarm_ot : 12;
	/* Alarm Repetition Count Threshold */
	uint32_t alarm_thr : 4;
#endif
} __PACKED__;

/** TWDM Downstream Wavelength Configuration */
#define PONFW_TWDM_DS_WL_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x11)
#define PONFW_TWDM_DS_WL_CONFIG_LEN 8
/* Check if the given frequency is suitable for the connected transceiver. */
#define PONFW_TWDM_DS_WL_CONFIG_DS_EXECUTE_CHECK 0
/* Tune the transceiver to the given frequency. */
#define PONFW_TWDM_DS_WL_CONFIG_DS_EXECUTE_TUNE 1
/* The requested downstream wavelength is not supported. */
#define PONFW_TWDM_DS_WL_CONFIG_DS_VALID_NO 0
/* The requested downstream wavelength is supported. */
#define PONFW_TWDM_DS_WL_CONFIG_DS_VALID_YES 1

/* HW applicability of TWDM_DS_WL_CONFIG */
#define PONFW_TWDM_DS_WL_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_ds_wl_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Downstream Wavelength Change Execute */
	uint32_t ds_execute : 1;
	/* Downstream Wavelength is Valid */
	uint32_t ds_valid : 1;
	/* Reserved */
	uint32_t res : 26;
	/* Downstream Wavelength Channel ID */
	uint32_t dwlch_id : 4;
	/* Downstream Wavelength Channel Frequency */
	uint32_t ds_ch_frq;
#else
	/* Downstream Wavelength Channel ID */
	uint32_t dwlch_id : 4;
	/* Reserved */
	uint32_t res : 26;
	/* Downstream Wavelength is Valid */
	uint32_t ds_valid : 1;
	/* Downstream Wavelength Change Execute */
	uint32_t ds_execute : 1;
	/* Downstream Wavelength Channel Frequency */
	uint32_t ds_ch_frq;
#endif
} __PACKED__;

/** TWDM Upstream Wavelength Configuration */
#define PONFW_TWDM_US_WL_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x12)
#define PONFW_TWDM_US_WL_CONFIG_LEN 8
/* Check if the given frequency is suitable for the connected transceiver. */
#define PONFW_TWDM_US_WL_CONFIG_US_EXECUTE_CHECK 0
/* Tune the transceiver to the given frequency. */
#define PONFW_TWDM_US_WL_CONFIG_US_EXECUTE_TUNE 1
/* The requested upstream wavelength is not supported. */
#define PONFW_TWDM_US_WL_CONFIG_US_VALID_NO 0
/* The requested upstream wavelength is supported. */
#define PONFW_TWDM_US_WL_CONFIG_US_VALID_YES 1

/* HW applicability of TWDM_US_WL_CONFIG */
#define PONFW_TWDM_US_WL_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_us_wl_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Upstream Wavelength Change Execute */
	uint32_t us_execute : 1;
	/* Upstream Wavelength is Valid */
	uint32_t us_valid : 1;
	/* Reserved */
	uint32_t res : 26;
	/* Upstream Wavelength Channel ID */
	uint32_t uwlch_id : 4;
	/* Upstream Wavelength Channel Frequency */
	uint32_t us_ch_frq;
#else
	/* Upstream Wavelength Channel ID */
	uint32_t uwlch_id : 4;
	/* Reserved */
	uint32_t res : 26;
	/* Upstream Wavelength is Valid */
	uint32_t us_valid : 1;
	/* Upstream Wavelength Change Execute */
	uint32_t us_execute : 1;
	/* Upstream Wavelength Channel Frequency */
	uint32_t us_ch_frq;
#endif
} __PACKED__;

/** TWDM Upstream Wavelength Tuning */
#define PONFW_TWDM_US_WL_TUNING_CMD_ID (PONFW_STD_ITUT | 0x13)
#define PONFW_TWDM_US_WL_TUNING_LEN 4
/* Decrease the frequency (increase the wavelength). */
#define PONFW_TWDM_US_WL_TUNING_TDIR_DOWN 0
/* Increase the frequency (decrease the wavelength). */
#define PONFW_TWDM_US_WL_TUNING_TDIR_UP 1

/* HW applicability of TWDM_US_WL_TUNING */
#define PONFW_TWDM_US_WL_TUNING_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_us_wl_tuning {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 15;
	/* Tuning Direction */
	uint32_t tdir : 1;
	/* Upstream Channel Frequency Offset */
	uint32_t offset : 16;
#else
	/* Upstream Channel Frequency Offset */
	uint32_t offset : 16;
	/* Tuning Direction */
	uint32_t tdir : 1;
	/* Reserved */
	uint32_t res : 15;
#endif
} __PACKED__;

/** Optical Power Save Mode Configuration */
#define PONFW_OPTIC_POWER_SAVE_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x14)
#define PONFW_OPTIC_POWER_SAVE_CONFIG_LEN 4
/* Normal operation mode, receiver and transmitter are active. */
#define PONFW_OPTIC_POWER_SAVE_CONFIG_OPSM_NORMAL 0
/* Receive-only operation mode, receiver is active and transmitter is off. */
#define PONFW_OPTIC_POWER_SAVE_CONFIG_OPSM_TX_OFF 1
/* Not used (transmitter only is not allowed). */
#define PONFW_OPTIC_POWER_SAVE_CONFIG_OPSM_RESERVED 2
/* Disabled mode, receiver and transmitter are switched off. */
#define PONFW_OPTIC_POWER_SAVE_CONFIG_OPSM_ALL_OFF 3

/* HW applicability of OPTIC_POWER_SAVE_CONFIG */
#define PONFW_OPTIC_POWER_SAVE_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_optic_power_save_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 30;
	/* Optical Power Saving Mode */
	uint32_t opsm : 2;
#else
	/* Optical Power Saving Mode */
	uint32_t opsm : 2;
	/* Reserved */
	uint32_t res : 30;
#endif
} __PACKED__;

/** Local Wake-up */
#define PONFW_LOCAL_WAKEUP_CMD_ID (0x15)
#define PONFW_LOCAL_WAKEUP_LEN 4
/* LWI is controlled by hardware (default) */
#define PONFW_LOCAL_WAKEUP_LWI_SW_HW 0
/* LWI is controlled by software */
#define PONFW_LOCAL_WAKEUP_LWI_SW_SW 1
/* LWI is off (no data is available for upstream transmission). The internal
 * LSI is set (sleep mode is enabled).
 */
#define PONFW_LOCAL_WAKEUP_LWI_OFF 0
/* LWI is on (data is available for upstream transmission). The internal LSI
 * status is cleared (sleep mode is disabled).
 */
#define PONFW_LOCAL_WAKEUP_LWI_ON 1

/* HW applicability of LOCAL_WAKEUP */
#define PONFW_LOCAL_WAKEUP_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_local_wakeup {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 30;
	/* Local Wake-up Software Control */
	uint32_t lwi_sw : 1;
	/* Local Wake-up Indication */
	uint32_t lwi : 1;
#else
	/* Local Wake-up Indication */
	uint32_t lwi : 1;
	/* Local Wake-up Software Control */
	uint32_t lwi_sw : 1;
	/* Reserved */
	uint32_t res : 30;
#endif
} __PACKED__;

/** TWDM Calibration Record */
#define PONFW_TWDM_ONU_CAL_RECORD_CMD_ID (PONFW_STD_ITUT | 0x16)
#define PONFW_TWDM_ONU_CAL_RECORD_LEN 8

/* HW applicability of TWDM_ONU_CAL_RECORD */
#define PONFW_TWDM_ONU_CAL_RECORD_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_onu_cal_record {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Calibration Record Status Octet 1 */
	uint8_t cal_rec[8];
#else
	/* Calibration Record Status Octet 1 */
	uint8_t cal_rec[8];
#endif
} __PACKED__;

/** TWDM Optical Interface Configuration */
#define PONFW_TWDM_OPTIC_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x17)
#define PONFW_TWDM_OPTIC_CONFIG_LEN 16
/* The upstream wavelength can be selected independently from the downstream
 * wavelength.
 */
#define PONFW_TWDM_OPTIC_CONFIG_WL_LOCK_UNLOCKED 0
/* The upstream wavelength is selected together with the downstream
 * wavelength.
 */
#define PONFW_TWDM_OPTIC_CONFIG_WL_LOCK_LOCKED 1
/* The link type is unspecified. */
#define PONFW_TWDM_OPTIC_CONFIG_LT_NONE 0x0
/* Only type B is supported. */
#define PONFW_TWDM_OPTIC_CONFIG_LT_B 0x1
/* Only type A is supported. */
#define PONFW_TWDM_OPTIC_CONFIG_LT_A 0x2
/* Both type A and type B are supported. */
#define PONFW_TWDM_OPTIC_CONFIG_LT_AB 0x3

/* HW applicability of TWDM_OPTIC_CONFIG */
#define PONFW_TWDM_OPTIC_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_optic_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Receiver Tuning Time */
	uint32_t rx_tune_time;
	/* Free Spectral Range */
	uint32_t fsr : 16;
	/* Wavelength Channel Spacing */
	uint32_t wcs : 8;
	/* Spectral Excursion */
	uint32_t sp_exc : 8;
	/* Tuning Granularity */
	uint32_t tune_gran : 8;
	/* One-step Fine Tuning Time */
	uint32_t tune_time : 8;
	/* Reserved */
	uint32_t res : 5;
	/* Wavelength Locking */
	uint32_t wl_lock : 1;
	/* Channel Partition Index */
	uint32_t cpi : 4;
	/* Last Used Downstream Channel ID */
	uint32_t dwlch_id : 4;
	/* Optical Link Type */
	uint32_t lt : 2;
	/* Transmitter Tuning Time */
	uint32_t tx_tune_time;
#else
	/* Receiver Tuning Time */
	uint32_t rx_tune_time;
	/* Spectral Excursion */
	uint32_t sp_exc : 8;
	/* Wavelength Channel Spacing */
	uint32_t wcs : 8;
	/* Free Spectral Range */
	uint32_t fsr : 16;
	/* Optical Link Type */
	uint32_t lt : 2;
	/* Last Used Downstream Channel ID */
	uint32_t dwlch_id : 4;
	/* Channel Partition Index */
	uint32_t cpi : 4;
	/* Wavelength Locking */
	uint32_t wl_lock : 1;
	/* Reserved */
	uint32_t res : 5;
	/* One-step Fine Tuning Time */
	uint32_t tune_time : 8;
	/* Tuning Granularity */
	uint32_t tune_gran : 8;
	/* Transmitter Tuning Time */
	uint32_t tx_tune_time;
#endif
} __PACKED__;

/** Loop Timing Configuration */
#define PONFW_LOOP_TIME_CONFIG_CMD_ID (0x18)
#define PONFW_LOOP_TIME_CONFIG_LEN 4
/* The transmit clock is unlocked. */
#define PONFW_LOOP_TIME_CONFIG_LTS_UNLOCK 0
/* The transmit clock is locked to the receive clock. */
#define PONFW_LOOP_TIME_CONFIG_LTS_LOCK 1

/* HW applicability of LOOP_TIME_CONFIG */
#define PONFW_LOOP_TIME_CONFIG_HW_PROP	PONFW_PROP_HW_PRXURX

struct ponfw_loop_time_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 31;
	/* Loop Timing Status */
	uint32_t lts : 1;
#else
	/* Loop Timing Status */
	uint32_t lts : 1;
	/* Reserved */
	uint32_t res : 31;
#endif
} __PACKED__;

/** Physical Equipment Error Configuration */
#define PONFW_PEE_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x19)
#define PONFW_PEE_CONFIG_LEN 4
/* The RDI is triggered by firmware. */
#define PONFW_PEE_CONFIG_RDI_MODE_FW 0
/* The RDI is triggered by software. */
#define PONFW_PEE_CONFIG_RDI_MODE_SW 1
/* The RDI is inactive. */
#define PONFW_PEE_CONFIG_RDI_INACT 0
/* The RDI is inactive. */
#define PONFW_PEE_CONFIG_RDI_ACT 1
/* The PEE is inactive. */
#define PONFW_PEE_CONFIG_PEE_INACT 0
/* The PEE is inactive. */
#define PONFW_PEE_CONFIG_PEE_ACT 1

/* HW applicability of PEE_CONFIG */
#define PONFW_PEE_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_pee_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 29;
	/* Remote Defect Indication Status Mode */
	uint32_t rdi_mode : 1;
	/* Remote Defect Indication Status */
	uint32_t rdi : 1;
	/* Physical Equipment Error Status */
	uint32_t pee : 1;
#else
	/* Physical Equipment Error Status */
	uint32_t pee : 1;
	/* Remote Defect Indication Status */
	uint32_t rdi : 1;
	/* Remote Defect Indication Status Mode */
	uint32_t rdi_mode : 1;
	/* Reserved */
	uint32_t res : 29;
#endif
} __PACKED__;

/** Alarm Control Configuration */
#define PONFW_ALARM_CONTROL_CONFIG_CMD_ID (0x1A)
#define PONFW_ALARM_CONTROL_CONFIG_LEN 4
/* Disable alarm */
#define PONFW_ALARM_CONTROL_CONFIG_AEN_DIS 0x0
/* Enable alarm */
#define PONFW_ALARM_CONTROL_CONFIG_AEN_EN 0x1

/* HW applicability of ALARM_CONTROL_CONFIG */
#define PONFW_ALARM_CONTROL_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alarm_control_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Alarm Enable */
	uint32_t aen : 1;
	/* Reserved */
	uint32_t res : 15;
	/* Alarm ID */
	uint32_t alarm_id : 16;
#else
	/* Alarm ID */
	uint32_t alarm_id : 16;
	/* Reserved */
	uint32_t res : 15;
	/* Alarm Enable */
	uint32_t aen : 1;
#endif
} __PACKED__;

/** Hardware Version Configuration */
#define PONFW_HW_VERSION_CMD_ID (0x1B)
#define PONFW_HW_VERSION_LEN 4
#define PONFW_HW_VERSION_VERSION_FLM_A 0
#define PONFW_HW_VERSION_VERSION_FLM_B0_FLM_B1 1
#define PONFW_HW_VERSION_VERSION_FLM_B2_LGM_A 2
#define PONFW_HW_VERSION_VERSION_FLM_B3 3
#define PONFW_HW_VERSION_VERSION_LGM_B0 4
#define PONFW_HW_VERSION_VERSION_LGM_B1 5
#define PONFW_HW_VERSION_VERSION_LGM_C0 6

/* HW applicability of HW_VERSION */
#define PONFW_HW_VERSION_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_hw_version {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 28;
	/* Hardware Version */
	uint32_t version : 4;
#else
	/* Hardware Version */
	uint32_t version : 4;
	/* Reserved */
	uint32_t res : 28;
#endif
} __PACKED__;

/** PLOAM Forwarding Configuration */
#define PONFW_PLOAM_FORWARD_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x1C)
#define PONFW_PLOAM_FORWARD_CONFIG_LEN 20
/* PLOAMd forwarding is disabled for all message types (default). */
#define PONFW_PLOAM_FORWARD_CONFIG_EN_DIS 0x0000
/* PLOAMd forwarding is enabled for all message types. */
#define PONFW_PLOAM_FORWARD_CONFIG_EN_ALL 0xFFFF

/* HW applicability of PLOAM_FORWARD_CONFIG */
#define PONFW_PLOAM_FORWARD_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_ploam_forward_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 16;
	/* PLOAM Downstream Message Enable */
	uint32_t en : 16;
	/* PLOAM Downstream Message Type ID */
	uint8_t msg_type_id[16];
#else
	/* PLOAM Downstream Message Enable */
	uint32_t en : 16;
	/* Reserved */
	uint32_t res : 16;
	/* PLOAM Downstream Message Type ID */
	uint8_t msg_type_id[16];
#endif
} __PACKED__;

/** Synchronous Ethernet Control */
#define PONFW_SYNCE_CONTROL_CMD_ID (0x1D)
#define PONFW_SYNCE_CONTROL_LEN 4
/* Do not allow to change the Force Hold mode. */
#define PONFW_SYNCE_CONTROL_MASK_FORCE_DIS 0
/* Allow to change the Force Hold mode. */
#define PONFW_SYNCE_CONTROL_MASK_FORCE_EN 1
/* Do not allow to change the SyncE enable. */
#define PONFW_SYNCE_CONTROL_MASK_EN_DIS 0
/* Allow to change the SyncE enable. */
#define PONFW_SYNCE_CONTROL_MASK_EN_EN 1
/* Forced hold is disabled. */
#define PONFW_SYNCE_CONTROL_FORCE_HOLD_DIS 0
/* Forced hold is enabled. */
#define PONFW_SYNCE_CONTROL_FORCE_HOLD_EN 1
/* Synchronous Ethernet mode is disabled (forced free-run operation) */
#define PONFW_SYNCE_CONTROL_SYNCE_EN_DIS 0
/* Synchronous Ethernet mode is enabled (to the mode selected by SYNCE_MODE) */
#define PONFW_SYNCE_CONTROL_SYNCE_EN_EN 1

/* HW applicability of SYNCE_CONTROL */
#define PONFW_SYNCE_CONTROL_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_synce_control {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 14;
	/* Mask the Force Hold Mode */
	uint32_t mask_force : 1;
	/* Mask the SyncE Enable */
	uint32_t mask_en : 1;
	/* Reserved */
	uint32_t res2 : 14;
	/* Force the Hold Mode */
	uint32_t force_hold : 1;
	/* Synchronous Ethernet Mode Enable */
	uint32_t synce_en : 1;
#else
	/* Synchronous Ethernet Mode Enable */
	uint32_t synce_en : 1;
	/* Force the Hold Mode */
	uint32_t force_hold : 1;
	/* Reserved */
	uint32_t res2 : 14;
	/* Mask the SyncE Enable */
	uint32_t mask_en : 1;
	/* Mask the Force Hold Mode */
	uint32_t mask_force : 1;
	/* Reserved */
	uint32_t res1 : 14;
#endif
} __PACKED__;

/** GPIO Configuration */
#define PONFW_GPIO_CONFIG_CMD_ID (0x1E)
#define PONFW_GPIO_CONFIG_LEN 4
/* OPT_RX_SD_SFP */
#define PONFW_GPIO_CONFIG_GPIO25_MODE_DEFAULT 0x0
/* Fixed low voltage level */
#define PONFW_GPIO_CONFIG_GPIO25_MODE_LOW 0x1
/* Fixed high voltage level */
#define PONFW_GPIO_CONFIG_GPIO25_MODE_HIGH 0x2
/* High impedance (output driver disabled) */
#define PONFW_GPIO_CONFIG_GPIO25_MODE_HIMP 0x3
/* OPT_TX_PUP, hardware driven */
#define PONFW_GPIO_CONFIG_GPIO24_MODE_DEFAULT 0x0
/* OPT_TX_PUP, hardware driven with firmware override */
#define PONFW_GPIO_CONFIG_GPIO24_MODE_FW 0x1
/* OPT_TX_DIS_SFP */
#define PONFW_GPIO_CONFIG_GPIO21_MODE_DEFAULT 0x0

/* HW applicability of GPIO_CONFIG */
#define PONFW_GPIO_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gpio_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 26;
	/* GPIO25 Operation Mode */
	uint32_t gpio25_mode : 2;
	/* GPIO24 Operation Mode */
	uint32_t gpio24_mode : 2;
	/* GPIO21 Operation Mode */
	uint32_t gpio21_mode : 2;
#else
	/* GPIO21 Operation Mode */
	uint32_t gpio21_mode : 2;
	/* GPIO24 Operation Mode */
	uint32_t gpio24_mode : 2;
	/* GPIO25 Operation Mode */
	uint32_t gpio25_mode : 2;
	/* Reserved */
	uint32_t res : 26;
#endif
} __PACKED__;

/** SerDes Configuration */
#define PONFW_SERDES_CONFIG_CMD_ID (0x1F)
#define PONFW_SERDES_CONFIG_LEN 4
/* The automatic equalizer adaptation function is disabled. */
#define PONFW_SERDES_CONFIG_RX_ADAPT_EN_DIS 0x0
/* The automatic equalizer adaptation function is enabled. */
#define PONFW_SERDES_CONFIG_RX_ADAPT_EN_EN 0x1

/* HW applicability of SERDES_CONFIG */
#define PONFW_SERDES_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_serdes_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 2;
	/* Automatic Receive Equalizer Adaptation */
	uint32_t rx_adapt_en : 1;
	/* Reserved */
	uint32_t res2 : 21;
	/* Figure of Merit */
	uint32_t fom : 8;
#else
	/* Figure of Merit */
	uint32_t fom : 8;
	/* Reserved */
	uint32_t res2 : 21;
	/* Automatic Receive Equalizer Adaptation */
	uint32_t rx_adapt_en : 1;
	/* Reserved */
	uint32_t res1 : 2;
#endif
} __PACKED__;

/** Get Static Alarm Status */
#define PONFW_GET_STATIC_ALARM_CMD_ID (0x20)
#define PONFW_GET_STATIC_ALARM_LEN 128

/* HW applicability of GET_STATIC_ALARM */
#define PONFW_GET_STATIC_ALARM_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_get_static_alarm {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Static Alarm Status Code */
	uint32_t alarm_id[32];
#else
	/* Static Alarm Status Code */
	uint32_t alarm_id[32];
#endif
} __PACKED__;

/** Report Alarm Event */
#define PONFW_REPORT_ALARM_CMD_ID (0x21)
#define PONFW_REPORT_ALARM_LEN 8
/* Edge alarm mode */
#define PONFW_REPORT_ALARM_MODE_EDGE 0
/* Static alarm mode */
#define PONFW_REPORT_ALARM_MODE_STATIC 1

/* HW applicability of REPORT_ALARM */
#define PONFW_REPORT_ALARM_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_report_alarm {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Time Stamp */
	uint32_t time_stamp;
	/* Reserved */
	uint32_t res : 15;
	/* Alarm mode */
	uint32_t mode : 1;
	/* Alarm ID Code */
	uint32_t alarm_id : 16;
#else
	/* Time Stamp */
	uint32_t time_stamp;
	/* Alarm ID Code */
	uint32_t alarm_id : 16;
	/* Alarm mode */
	uint32_t mode : 1;
	/* Reserved */
	uint32_t res : 15;
#endif
} __PACKED__;

/** Clear Alarm Event */
#define PONFW_CLEAR_ALARM_CMD_ID (0x22)
#define PONFW_CLEAR_ALARM_LEN 8
/* Edge alarm mode */
#define PONFW_CLEAR_ALARM_MODE_EDGE 0
/* Static alarm mode */
#define PONFW_CLEAR_ALARM_MODE_STATIC 1

/* HW applicability of CLEAR_ALARM */
#define PONFW_CLEAR_ALARM_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_clear_alarm {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Time Stamp */
	uint32_t time_stamp;
	/* Reserved */
	uint32_t res : 15;
	/* Alarm mode */
	uint32_t mode : 1;
	/* Alarm ID Code */
	uint32_t alarm_id : 16;
#else
	/* Time Stamp */
	uint32_t time_stamp;
	/* Alarm ID Code */
	uint32_t alarm_id : 16;
	/* Alarm mode */
	uint32_t mode : 1;
	/* Reserved */
	uint32_t res : 15;
#endif
} __PACKED__;

/** ONU Status */
#define PONFW_ONU_STATUS_CMD_ID (PONFW_STD_ITUT | 0x23)
#define PONFW_ONU_STATUS_LEN 52
/* Hunt state. */
#define PONFW_ONU_STATUS_GTC_STAT_HUNT 0
/* First Pre-sync state. */
#define PONFW_ONU_STATUS_GTC_STAT_PRESYNC 1
/* Second Pre-sync state (G.984 only) */
#define PONFW_ONU_STATUS_GTC_STAT_PRESYNC2 2
/* Sync state. */
#define PONFW_ONU_STATUS_GTC_STAT_SYNC 3
/* Re-sync state (G.987, G.9807 and G.989) */
#define PONFW_ONU_STATUS_GTC_STAT_RESYNC 4
/* Active held state. */
#define PONFW_ONU_STATUS_PSM_STAT_ACTHELD 0
/* Active Free state. */
#define PONFW_ONU_STATUS_PSM_STAT_ACTFREE 1
/* Sleep aware state. */
#define PONFW_ONU_STATUS_PSM_STAT_SLEEPAWARE 2
/* A sleep state. */
#define PONFW_ONU_STATUS_PSM_STAT_ASLEEP 3
/* Doze aware state. */
#define PONFW_ONU_STATUS_PSM_STAT_DOZEAWARE 4
/* Listen state. */
#define PONFW_ONU_STATUS_PSM_STAT_LISTEN 5
/* Watch aware state. */
#define PONFW_ONU_STATUS_PSM_STAT_WATCHAWARE 6
/* Watch state. */
#define PONFW_ONU_STATUS_PSM_STAT_WATCH 7
/* FEC off in US and DS */
#define PONFW_ONU_STATUS_FEC_STAT_FECOFF 0
/* FEC on in DS, FEC off in US */
#define PONFW_ONU_STATUS_FEC_STAT_FECONDS 1
/* FEC off in DS, FEC on in US */
#define PONFW_ONU_STATUS_FEC_STAT_FECOFFDS 2
/* FEC on in US and in DS */
#define PONFW_ONU_STATUS_FEC_STAT_FECON 3
/* No change of the P-bit has been detected. */
#define PONFW_ONU_STATUS_COEX_NONE 0
/* A change of the P-bit in the OC structure has been detected since last
 * read of the ONU status
 */
#define PONFW_ONU_STATUS_COEX_DETECT 1
/* OLT downstream output */
#define PONFW_ONU_STATUS_PIT_OLT 0
/* reach extender downstream output */
#define PONFW_ONU_STATUS_PIT_RE 1
/* Class N1 */
#define PONFW_ONU_STATUS_PIT_CLASS_N1 0
/* Class N2/N2a */
#define PONFW_ONU_STATUS_PIT_CLASS_N2A 1
/* Class N2b */
#define PONFW_ONU_STATUS_PIT_CLASS_N2B 2
/* Class E1 */
#define PONFW_ONU_STATUS_PIT_CLASS_E1 3
/* Class E2/E2a/D */
#define PONFW_ONU_STATUS_PIT_CLASS_E2A 4
/* Class E2b */
#define PONFW_ONU_STATUS_PIT_CLASS_E2B 5
/* Class B+ */
#define PONFW_ONU_STATUS_PIT_CLASS_BP 6
/* Class C+ */
#define PONFW_ONU_STATUS_PIT_CLASS_CP 7
/* Downstream FEC is disabled */
#define PONFW_ONU_STATUS_PIT_FEC_OFF 0
/* Downstream FEC is enabled */
#define PONFW_ONU_STATUS_PIT_FEC_ON 1
/* The protocol according to G.987 is used */
#define PONFW_ONU_STATUS_PIT_XG_PON 0
/* The protocol according to G.989 and G.9807 is used. */
#define PONFW_ONU_STATUS_PIT_NG_PON2 1
/* The link type is unspecified. */
#define PONFW_ONU_STATUS_PIT_LT_NONE 0
/* Only link type A is supported. */
#define PONFW_ONU_STATUS_PIT_LT_A 1
/* Only link type B is supported. */
#define PONFW_ONU_STATUS_PIT_LT_B 2
/* Link types A and B are supported. */
#define PONFW_ONU_STATUS_PIT_LT_AB 3
/* 5 GHz for lower power. */
#define PONFW_ONU_STATUS_VCO_SPEED_LOW 0
/* 10 GHz for higher accuracy. */
#define PONFW_ONU_STATUS_VCO_SPEED_HIGH 1
/* The upstream data rate is unknown. */
#define PONFW_ONU_STATUS_US_RATE_NONE 0
/* The upstream data rate is 1.0 Gbit/s. */
#define PONFW_ONU_STATUS_US_RATE_1G 1
/* The upstream data rate is 1.24416 Gbit/s. */
#define PONFW_ONU_STATUS_US_RATE_1G2 2
/* The upstream data rate is 2.0 Gbit/s. */
#define PONFW_ONU_STATUS_US_RATE_2G 3
/* The upstream data rate is 2.48832 Gbit/s. */
#define PONFW_ONU_STATUS_US_RATE_2G4 4
/* The upstream data rate is 9.95328 Gbit/s. */
#define PONFW_ONU_STATUS_US_RATE_9G9 5
/* The upstream data rate is 10.0 Gbit/s. */
#define PONFW_ONU_STATUS_US_RATE_10G 6
/* The downstream data rate is unknown. */
#define PONFW_ONU_STATUS_DS_RATE_NONE 0
/* The downstream data rate is 1.0 Gbit/s. */
#define PONFW_ONU_STATUS_DS_RATE_1G 1
/* The downstream data rate is 2.0 Gbit/s. */
#define PONFW_ONU_STATUS_DS_RATE_2G 3
/* The downstream data rate is 2.48832 Gbit/s. */
#define PONFW_ONU_STATUS_DS_RATE_2G4 4
/* The downstream data rate is 9.95328 Gbit/s. */
#define PONFW_ONU_STATUS_DS_RATE_9G9 5
/* The downstream data rate is 10.0 Gbit/s. */
#define PONFW_ONU_STATUS_DS_RATE_10G 6
/* The operation mode is XGS-PON (ITU-T G.9807). */
#define PONFW_ONU_STATUS_PON_MODE_9807 0
/* The operation mode is XG-PON (ITU-T G.987). */
#define PONFW_ONU_STATUS_PON_MODE_987 1
/* The operation mode is G-PON (ITU-T G.984). */
#define PONFW_ONU_STATUS_PON_MODE_984 2
/* The operation mode is NG-PON2 (ITU-T G.989 with slow upstream speed). */
#define PONFW_ONU_STATUS_PON_MODE_989_2G5 3
/* The operation mode is NG-PON2 (ITU-T G.989 with high upstream speed). */
#define PONFW_ONU_STATUS_PON_MODE_989_10G 4
/* The operation mode is unknown. */
#define PONFW_ONU_STATUS_PON_MODE_NONE 7

/* HW applicability of ONU_STATUS */
#define PONFW_ONU_STATUS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Number of available GEM ports */
	uint32_t gem_port_cnt;
	/* Number of available Allocation IDs */
	uint32_t alloc_id_cnt;
	/* ONU response time */
	uint32_t onu_resp_time;
	/* GTC synchronization state */
	uint32_t gtc_stat;
	/* PLOAM state */
	uint32_t ploam_stat;
	/* Power saving state */
	uint32_t psm_stat;
	/* FEC status */
	uint32_t fec_stat;
	/* ONU ID */
	uint32_t onu_id;
	/* Equalization delay */
	uint32_t eq_del;
	/* Coexistence Flag */
	uint32_t coex : 1;
	/* Reserved */
	uint32_t res1 : 7;
	/* PON ID Extension (for G.984 only) */
	uint32_t pon_id_hi : 24;
	/* PON ID */
	uint32_t pon_id;
	/* TWDM upstream channel ID */
	uint32_t uwlch_id : 4;
	/* TWDM downstream channel ID */
	uint32_t dwlch_id : 4;
	/* Transceiver Optical Level */
	uint32_t tol : 16;
	/* PON ID Type */
	uint32_t pit : 8;
	/* Reserved */
	uint32_t res2 : 17;
	/* PSYNC Position */
	uint32_t psync_pos : 5;
	/* Speed of the PLL3 VCO */
	uint32_t vco_speed : 1;
	/* Upstream Data Rate */
	uint32_t us_rate : 3;
	/* Downstream Data Rate */
	uint32_t ds_rate : 3;
	/* PON Operation Mode */
	uint32_t pon_mode : 3;
#else
	/* Number of available GEM ports */
	uint32_t gem_port_cnt;
	/* Number of available Allocation IDs */
	uint32_t alloc_id_cnt;
	/* ONU response time */
	uint32_t onu_resp_time;
	/* GTC synchronization state */
	uint32_t gtc_stat;
	/* PLOAM state */
	uint32_t ploam_stat;
	/* Power saving state */
	uint32_t psm_stat;
	/* FEC status */
	uint32_t fec_stat;
	/* ONU ID */
	uint32_t onu_id;
	/* Equalization delay */
	uint32_t eq_del;
	/* PON ID Extension (for G.984 only) */
	uint32_t pon_id_hi : 24;
	/* Reserved */
	uint32_t res1 : 7;
	/* Coexistence Flag */
	uint32_t coex : 1;
	/* PON ID */
	uint32_t pon_id;
	/* PON ID Type */
	uint32_t pit : 8;
	/* Transceiver Optical Level */
	uint32_t tol : 16;
	/* TWDM downstream channel ID */
	uint32_t dwlch_id : 4;
	/* TWDM upstream channel ID */
	uint32_t uwlch_id : 4;
	/* PON Operation Mode */
	uint32_t pon_mode : 3;
	/* Downstream Data Rate */
	uint32_t ds_rate : 3;
	/* Upstream Data Rate */
	uint32_t us_rate : 3;
	/* Speed of the PLL3 VCO */
	uint32_t vco_speed : 1;
	/* PSYNC Position */
	uint32_t psync_pos : 5;
	/* Reserved */
	uint32_t res2 : 17;
#endif
} __PACKED__;

/** PLOAM State */
#define PONFW_PLOAM_STATE_CMD_ID (PONFW_STD_ITUT | 0x24)
#define PONFW_PLOAM_STATE_LEN 16
/* Timeout for Discovery Timer (TOZ) */
#define PONFW_PLOAM_STATE_REASON_TOZ 0x0
/* Timeout for Ranging Timer (TO1) */
#define PONFW_PLOAM_STATE_REASON_TO1 0x1
/* Timeout for LODS Timer (TO2) */
#define PONFW_PLOAM_STATE_REASON_TO2 0x2
/* Timeout for LODS Protection Timer (TO3, NG-PON2 only) */
#define PONFW_PLOAM_STATE_REASON_TO3 0x3
/* Timeout for DS Tuning Timer (TO4, NG-PON2 only) */
#define PONFW_PLOAM_STATE_REASON_TO4 4
/* Timeout for (US Tuning Timer (TO5, NG-PON2 only) */
#define PONFW_PLOAM_STATE_REASON_TO5 0x5
/* Timeout for Lost ONU Timer (TO6, in O5, NG-PON2 only) */
#define PONFW_PLOAM_STATE_REASON_TO6 0x6
/* Timeout for Profile Dwell Timer (TPD, NG-PON2 only) */
#define PONFW_PLOAM_STATE_REASON_TO_TPD 0x7
/* Timeout CPL(Change Tx Power Level) */
#define PONFW_PLOAM_STATE_REASON_TO_CPL 0x8
/* Timeout for CPI Waiver Timer (TO_CPI, NG-PON2 only) */
#define PONFW_PLOAM_STATE_REASON_TO_CPI 0x9
/* Any other reason */
#define PONFW_PLOAM_STATE_REASON_REASON_OTHER 0xFFFF

/* HW applicability of PLOAM_STATE */
#define PONFW_PLOAM_STATE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_ploam_state {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* PLOAM State Time */
	uint32_t ploam_time;
	/* Actual PLOAM state */
	uint32_t ploam_act;
	/* Previous PLOAM state */
	uint32_t ploam_prev;
	/* Reserved */
	uint32_t res : 16;
	/* Reason for PLOAM State Change */
	uint32_t reason : 16;
#else
	/* PLOAM State Time */
	uint32_t ploam_time;
	/* Actual PLOAM state */
	uint32_t ploam_act;
	/* Previous PLOAM state */
	uint32_t ploam_prev;
	/* Reason for PLOAM State Change */
	uint32_t reason : 16;
	/* Reserved */
	uint32_t res : 16;
#endif
} __PACKED__;

/** XGTC Authentication Status */
#define PONFW_XGTC_AUTH_STATUS_CMD_ID (PONFW_STD_ITUT | 0x25)
#define PONFW_XGTC_AUTH_STATUS_LEN 4
/* Indeterminate status. The authentication has not yet been completed. */
#define PONFW_XGTC_AUTH_STATUS_AUTHSTAT_IND 0x0
/* , unused, set to 0. */
#define PONFW_XGTC_AUTH_STATUS_AUTHSTAT_RES1 0x1
/* , unused, set to 0. */
#define PONFW_XGTC_AUTH_STATUS_AUTHSTAT_RES2 0x2
/* The authentication has been successfully completed. */
#define PONFW_XGTC_AUTH_STATUS_AUTHSTAT_SUCCESS 0x3
/* The authentication has failed. */
#define PONFW_XGTC_AUTH_STATUS_AUTHSTAT_FAIL 0x4

/* HW applicability of XGTC_AUTH_STATUS */
#define PONFW_XGTC_AUTH_STATUS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_auth_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 29;
	/* ONU Authentication Status */
	uint32_t authstat : 3;
#else
	/* ONU Authentication Status */
	uint32_t authstat : 3;
	/* Reserved */
	uint32_t res : 29;
#endif
} __PACKED__;

/** XGTC Master Session Key Hash */
#define PONFW_XGTC_MSK_HASH_CMD_ID (PONFW_STD_ITUT | 0x26)
#define PONFW_XGTC_MSK_HASH_LENR 4
#define PONFW_XGTC_MSK_HASH_LEN 20

/* Hash type is of AES-CMAC 128 bit */
#define PONFW_XGTC_MSK_HASH_TYPE_AES_CMAC128 0
/* Hash type is of HMAC-SHA 256 bit. */
#define PONFW_XGTC_MSK_HASH_TYPE_HMAC_SHA_256 1
/* Hash type is of HMAC-SHA 512 bit. */
#define PONFW_XGTC_MSK_HASH_TYPE_HMAC_SHA_512 2

/* HW applicability of XGTC_MSK_HASH */
#define PONFW_XGTC_MSK_HASH_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_msk_hash {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 30;
	/* Hash Algorithm Type */
	uint32_t type : 2;
	/* MSK Hash Part4 */
	uint32_t msk_hash4;
	/* MSK Hash Part3 */
	uint32_t msk_hash3;
	/* MSK Hash Part2 */
	uint32_t msk_hash2;
	/* MSK Hash Part1 */
	uint32_t msk_hash1;
#else
	/* Hash Algorithm Type */
	uint32_t type : 2;
	/* Reserved */
	uint32_t res : 30;
	/* MSK Hash Part4 */
	uint32_t msk_hash4;
	/* MSK Hash Part3 */
	uint32_t msk_hash3;
	/* MSK Hash Part2 */
	uint32_t msk_hash2;
	/* MSK Hash Part1 */
	uint32_t msk_hash1;
#endif
} __PACKED__;

/** XGTC OMCI Integrity Key */
#define PONFW_XGTC_OMCI_IK_CMD_ID (PONFW_STD_ITUT | 0x27)
#define PONFW_XGTC_OMCI_IK_LEN 20
/* No keys generated, default key is delivered */
#define PONFW_XGTC_OMCI_IK_VALID_DEFAULT 0
/* The current valid OMCI IK is delivered */
#define PONFW_XGTC_OMCI_IK_VALID_VALID 1

/* HW applicability of XGTC_OMCI_IK */
#define PONFW_XGTC_OMCI_IK_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_omci_ik {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 31;
	/* Key Validity */
	uint32_t valid : 1;
	/* OMCI IK Part4 */
	uint32_t omci_ik4;
	/* OMCI IK Part3 */
	uint32_t omci_ik3;
	/* OMCI IK Part2 */
	uint32_t omci_ik2;
	/* OMCI IK Part1 */
	uint32_t omci_ik1;
#else
	/* Key Validity */
	uint32_t valid : 1;
	/* Reserved */
	uint32_t res : 31;
	/* OMCI IK Part4 */
	uint32_t omci_ik4;
	/* OMCI IK Part3 */
	uint32_t omci_ik3;
	/* OMCI IK Part2 */
	uint32_t omci_ik2;
	/* OMCI IK Part1 */
	uint32_t omci_ik1;
#endif
} __PACKED__;

/** US Overhead Status */
#define PONFW_US_OVERHEAD_STATUS_CMD_ID (PONFW_STD_ITUT | 0x28)
#define PONFW_US_OVERHEAD_STATUS_LEN 12
/* No Extended_Burst_Length message received */
#define PONFW_US_OVERHEAD_STATUS_EXT_VALID_FALSE 0
/* Extended_Burst_Length message received */
#define PONFW_US_OVERHEAD_STATUS_EXT_VALID_TRUE 1
/* No pre-assigned delay for EqD calculation */
#define PONFW_US_OVERHEAD_STATUS_PRE_ASS_DELAY_EN_DIS 0
/* Use pre-assigned delay for EqD calculation */
#define PONFW_US_OVERHEAD_STATUS_PRE_ASS_DELAY_EN_EN 1
/* Mode 0: Normal */
#define PONFW_US_OVERHEAD_STATUS_TX_POW_MODE_MODE0 0x0
/* Mode 1: Normal -3 dB */
#define PONFW_US_OVERHEAD_STATUS_TX_POW_MODE_MODE1 0x1
/* Mode 2: Normal -6 dB */
#define PONFW_US_OVERHEAD_STATUS_TX_POW_MODE_MODE2 0x2

/* HW applicability of US_OVERHEAD_STATUS */
#define PONFW_US_OVERHEAD_STATUS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_us_overhead_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Number of Guard Bits. */
	uint32_t guard_bits : 8;
	/* Number of Type-1 Preamble Bits */
	uint32_t pre_type1 : 8;
	/* Number of Type-2 Preamble Bits */
	uint32_t pre_type2 : 8;
	/* Preamble Type-3 Pattern */
	uint32_t pre3_patt : 8;
	/* Number of Type-3 Preamble Bits in O3 and O4 */
	uint32_t pre3_pre : 8;
	/* Number of Type-3 Preamble Bits in O5 */
	uint32_t pre3_oper : 8;
	/* Pre-Assigned Delay */
	uint32_t pre_ass_delay : 16;
	/* Reserved */
	uint32_t res : 4;
	/* Extended_Burst_Length Message Received */
	uint32_t ext_valid : 1;
	/* Status of Pre-Assigned Delay usage */
	uint32_t pre_ass_delay_en : 1;
	/* Default ONU Transmit Power Level Mode */
	uint32_t tx_pow_mode : 2;
	/* Delimiter Pattern Byte 1 */
	uint32_t del_pat1 : 8;
	/* Delimiter Pattern Byte 2 */
	uint32_t del_pat2 : 8;
	/* Delimiter Pattern Byte 3 */
	uint32_t del_pat3 : 8;
#else
	/* Preamble Type-3 Pattern */
	uint32_t pre3_patt : 8;
	/* Number of Type-2 Preamble Bits */
	uint32_t pre_type2 : 8;
	/* Number of Type-1 Preamble Bits */
	uint32_t pre_type1 : 8;
	/* Number of Guard Bits. */
	uint32_t guard_bits : 8;
	/* Pre-Assigned Delay */
	uint32_t pre_ass_delay : 16;
	/* Number of Type-3 Preamble Bits in O5 */
	uint32_t pre3_oper : 8;
	/* Number of Type-3 Preamble Bits in O3 and O4 */
	uint32_t pre3_pre : 8;
	/* Delimiter Pattern Byte 3 */
	uint32_t del_pat3 : 8;
	/* Delimiter Pattern Byte 2 */
	uint32_t del_pat2 : 8;
	/* Delimiter Pattern Byte 1 */
	uint32_t del_pat1 : 8;
	/* Default ONU Transmit Power Level Mode */
	uint32_t tx_pow_mode : 2;
	/* Status of Pre-Assigned Delay usage */
	uint32_t pre_ass_delay_en : 1;
	/* Extended_Burst_Length Message Received */
	uint32_t ext_valid : 1;
	/* Reserved */
	uint32_t res : 4;
#endif
} __PACKED__;

/** Allocation Bandwidth */
#define PONFW_ALLOC_BW_CMD_ID (PONFW_STD_ITUT | 0x2B)
#define PONFW_ALLOC_BW_LENR 4
#define PONFW_ALLOC_BW_LEN 12


/* HW applicability of ALLOC_BW */
#define PONFW_ALLOC_BW_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alloc_bw {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 26;
	/* US Allocation Index */
	uint32_t alloc_idx : 6;
	/* US BW High */
	uint32_t us_bw_hi;
	/* US BW Low */
	uint32_t us_bw_lo;
#else
	/* US Allocation Index */
	uint32_t alloc_idx : 6;
	/* Reserved */
	uint32_t res : 26;
	/* US BW High */
	uint32_t us_bw_hi;
	/* US BW Low */
	uint32_t us_bw_lo;
#endif
} __PACKED__;

/** TWDM Wavelength Status */
#define PONFW_TWDM_WL_STATUS_CMD_ID (PONFW_STD_ITUT | 0x2C)
#define PONFW_TWDM_WL_STATUS_LEN 20
/* Wide band option */
#define PONFW_TWDM_WL_STATUS_UWBO_WB 0x0
/* Reduced band option */
#define PONFW_TWDM_WL_STATUS_UWBO_RB 0x1
/* Narrow band option */
#define PONFW_TWDM_WL_STATUS_UWBO_NB 0x2

/* HW applicability of TWDM_WL_STATUS */
#define PONFW_TWDM_WL_STATUS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_wl_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* TWDM Wavelength Channel Count */
	uint32_t wl_ch_cnt : 4;
	/* TWDM Upstream Channel Spacing */
	uint32_t us_ch_spacing : 8;
	/* TWDM System ID */
	uint32_t sys_id : 20;
	/* Reserved */
	uint32_t res : 26;
	/* Upstream Wavelength Band Option */
	uint32_t uwbo : 2;
	/* System Profile Version */
	uint32_t sys_prof_vers : 4;
	/* Downstream Wavelength Channel Frequency */
	uint32_t ds_ch_frq;
	/* Upstream Wavelength Channel Frequency */
	uint32_t us_ch_frq;
	/* TWDM Upstream Channel Adjustment Amplitude */
	uint32_t twdm_us_adj;
#else
	/* TWDM System ID */
	uint32_t sys_id : 20;
	/* TWDM Upstream Channel Spacing */
	uint32_t us_ch_spacing : 8;
	/* TWDM Wavelength Channel Count */
	uint32_t wl_ch_cnt : 4;
	/* System Profile Version */
	uint32_t sys_prof_vers : 4;
	/* Upstream Wavelength Band Option */
	uint32_t uwbo : 2;
	/* Reserved */
	uint32_t res : 26;
	/* Downstream Wavelength Channel Frequency */
	uint32_t ds_ch_frq;
	/* Upstream Wavelength Channel Frequency */
	uint32_t us_ch_frq;
	/* TWDM Upstream Channel Adjustment Amplitude */
	uint32_t twdm_us_adj;
#endif
} __PACKED__;

/** Burst Profile Status */
#define PONFW_BURST_PROFILE_STATUS_CMD_ID (PONFW_STD_ITUT | 0x2D)
#define PONFW_BURST_PROFILE_STATUS_LENR 4
#define PONFW_BURST_PROFILE_STATUS_LEN 32

/* Wavelength selection is ignored.This shall be used for all
 * single-wavelength operation modes.
 */
#define PONFW_BURST_PROFILE_STATUS_WL_SEL_DIS 0
/* Wavelength selection is used. This shall be selected if multiple
 * wavelengths are supported by the selected operation mode.
 */
#define PONFW_BURST_PROFILE_STATUS_WL_SEL_EN 1
/* 2.48832 Gbit/s */
#define PONFW_BURST_PROFILE_STATUS_RATE_SLOW 0
/* 9.95328 Gbit/s */
#define PONFW_BURST_PROFILE_STATUS_RATE_HIGH 1
/* Upstream FEC is disabled */
#define PONFW_BURST_PROFILE_STATUS_FEC_OFF 0
/* Upstream FEC is enabled */
#define PONFW_BURST_PROFILE_STATUS_FEC_ON 1

/* HW applicability of BURST_PROFILE_STATUS */
#define PONFW_BURST_PROFILE_STATUS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_burst_profile_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 24;
	/* Downstream Wavelength Channel ID */
	uint32_t dwlch_id : 4;
	/* Wavelength Selection */
	uint32_t wl_sel : 1;
	/* Burst Profile Data Rate */
	uint32_t rate : 1;
	/* Burst Profile Index */
	uint32_t bp_idx : 2;
	/* Reserved */
	uint32_t res2 : 11;
	/* Forward Error Correction */
	uint32_t fec : 1;
	/* Burst Profile Version */
	uint32_t version : 4;
	/* Delimiter Length */
	uint32_t del_len : 4;
	/* Preamble Length */
	uint32_t pre_len : 4;
	/* Preamble Repeat Count */
	uint32_t pre_rep : 8;
	/* Delimiter Pattern Byte 7 */
	uint32_t del_pat7 : 8;
	/* Delimiter Pattern Byte 6 */
	uint32_t del_pat6 : 8;
	/* Delimiter Pattern Byte 5 */
	uint32_t del_pat5 : 8;
	/* Delimiter Pattern Byte 4 */
	uint32_t del_pat4 : 8;
	/* Delimiter Pattern Byte 3 */
	uint32_t del_pat3 : 8;
	/* Delimiter Pattern Byte 2 */
	uint32_t del_pat2 : 8;
	/* Delimiter Pattern Byte 1 */
	uint32_t del_pat1 : 8;
	/* Delimiter Pattern Byte 0 */
	uint32_t del_pat0 : 8;
	/* Preamble Pattern Byte 7 */
	uint32_t pre_pat7 : 8;
	/* Preamble Pattern Byte 6 */
	uint32_t pre_pat6 : 8;
	/* Preamble Pattern Byte 5 */
	uint32_t pre_pat5 : 8;
	/* Preamble Pattern Byte 4 */
	uint32_t pre_pat4 : 8;
	/* Preamble Pattern Byte 3 */
	uint32_t pre_pat3 : 8;
	/* Preamble Pattern Byte 2 */
	uint32_t pre_pat2 : 8;
	/* Preamble Pattern Byte 1 */
	uint32_t pre_pat1 : 8;
	/* Preamble Pattern Byte 0 */
	uint32_t pre_pat0 : 8;
	/* PON Tag Byte 7 */
	uint32_t pon_tag7 : 8;
	/* PON Tag Byte 6 */
	uint32_t pon_tag6 : 8;
	/* PON Tag Byte 5 */
	uint32_t pon_tag5 : 8;
	/* PON Tag Byte 4 */
	uint32_t pon_tag4 : 8;
	/* PON Tag Byte 3 */
	uint32_t pon_tag3 : 8;
	/* PON Tag Byte 2 */
	uint32_t pon_tag2 : 8;
	/* PON Tag Byte 1 */
	uint32_t pon_tag1 : 8;
	/* PON Tag Byte 0 */
	uint32_t pon_tag0 : 8;
#else
	/* Burst Profile Index */
	uint32_t bp_idx : 2;
	/* Burst Profile Data Rate */
	uint32_t rate : 1;
	/* Wavelength Selection */
	uint32_t wl_sel : 1;
	/* Downstream Wavelength Channel ID */
	uint32_t dwlch_id : 4;
	/* Reserved */
	uint32_t res1 : 24;
	/* Preamble Repeat Count */
	uint32_t pre_rep : 8;
	/* Preamble Length */
	uint32_t pre_len : 4;
	/* Delimiter Length */
	uint32_t del_len : 4;
	/* Burst Profile Version */
	uint32_t version : 4;
	/* Forward Error Correction */
	uint32_t fec : 1;
	/* Reserved */
	uint32_t res2 : 11;
	/* Delimiter Pattern Byte 4 */
	uint32_t del_pat4 : 8;
	/* Delimiter Pattern Byte 5 */
	uint32_t del_pat5 : 8;
	/* Delimiter Pattern Byte 6 */
	uint32_t del_pat6 : 8;
	/* Delimiter Pattern Byte 7 */
	uint32_t del_pat7 : 8;
	/* Delimiter Pattern Byte 0 */
	uint32_t del_pat0 : 8;
	/* Delimiter Pattern Byte 1 */
	uint32_t del_pat1 : 8;
	/* Delimiter Pattern Byte 2 */
	uint32_t del_pat2 : 8;
	/* Delimiter Pattern Byte 3 */
	uint32_t del_pat3 : 8;
	/* Preamble Pattern Byte 4 */
	uint32_t pre_pat4 : 8;
	/* Preamble Pattern Byte 5 */
	uint32_t pre_pat5 : 8;
	/* Preamble Pattern Byte 6 */
	uint32_t pre_pat6 : 8;
	/* Preamble Pattern Byte 7 */
	uint32_t pre_pat7 : 8;
	/* Preamble Pattern Byte 0 */
	uint32_t pre_pat0 : 8;
	/* Preamble Pattern Byte 1 */
	uint32_t pre_pat1 : 8;
	/* Preamble Pattern Byte 2 */
	uint32_t pre_pat2 : 8;
	/* Preamble Pattern Byte 3 */
	uint32_t pre_pat3 : 8;
	/* PON Tag Byte 4 */
	uint32_t pon_tag4 : 8;
	/* PON Tag Byte 5 */
	uint32_t pon_tag5 : 8;
	/* PON Tag Byte 6 */
	uint32_t pon_tag6 : 8;
	/* PON Tag Byte 7 */
	uint32_t pon_tag7 : 8;
	/* PON Tag Byte 0 */
	uint32_t pon_tag0 : 8;
	/* PON Tag Byte 1 */
	uint32_t pon_tag1 : 8;
	/* PON Tag Byte 2 */
	uint32_t pon_tag2 : 8;
	/* PON Tag Byte 3 */
	uint32_t pon_tag3 : 8;
#endif
} __PACKED__;

/** Power Saving State */
#define PONFW_PSM_STATE_CMD_ID (PONFW_STD_ITUT | 0x2E)
#define PONFW_PSM_STATE_LEN 12

/* HW applicability of PSM_STATE */
#define PONFW_PSM_STATE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_psm_state {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Previous Time Duration */
	uint32_t psm_time;
	/* Actual PSM state */
	uint32_t psm_act;
	/* Previous PSM state */
	uint32_t psm_prev;
#else
	/* Previous Time Duration */
	uint32_t psm_time;
	/* Actual PSM state */
	uint32_t psm_act;
	/* Previous PSM state */
	uint32_t psm_prev;
#endif
} __PACKED__;

/** TWDM Channel Profile */
#define PONFW_TWDM_CHANNEL_PROFILE_CMD_ID (PONFW_STD_ITUT | 0x2F)
#define PONFW_TWDM_CHANNEL_PROFILE_LENW 24
#define PONFW_TWDM_CHANNEL_PROFILE_LENR 4

/* The channel profile pertains to another TWDM channel. */
#define PONFW_TWDM_CHANNEL_PROFILE_THIS_CH_OTHER 0
/* The channel profile pertains to the TWDM channel in which it is
 * transmitted.
 */
#define PONFW_TWDM_CHANNEL_PROFILE_THIS_CH_THIS 1
/* Not available */
#define PONFW_TWDM_CHANNEL_PROFILE_DS_VALID_NA 0
/* Available */
#define PONFW_TWDM_CHANNEL_PROFILE_DS_VALID_AVAIL 1
/* Downstream FEC is used. */
#define PONFW_TWDM_CHANNEL_PROFILE_DS_FEC_OFF 0
/* Downstream FEC is not used. */
#define PONFW_TWDM_CHANNEL_PROFILE_DS_FEC_ON 1
/* 9.95328 Gbit/s */
#define PONFW_TWDM_CHANNEL_PROFILE_DS_RATE_HIGH 0
/* 2.48832 Gbit/s */
#define PONFW_TWDM_CHANNEL_PROFILE_DS_RATE_LOW 1
/* Not available */
#define PONFW_TWDM_CHANNEL_PROFILE_US_VALID_NA 0
/* Available */
#define PONFW_TWDM_CHANNEL_PROFILE_US_VALID_AVAIL 1
/* No upstream is supported (unused value) */
#define PONFW_TWDM_CHANNEL_PROFILE_US_TYPE_NONE 0
/* Only type B optical links are supported. */
#define PONFW_TWDM_CHANNEL_PROFILE_US_TYPE_B 1
/* Only type A optical links are supported. */
#define PONFW_TWDM_CHANNEL_PROFILE_US_TYPE_A 2
/* Type A and type B optical links are supported. */
#define PONFW_TWDM_CHANNEL_PROFILE_US_TYPE_AB 3
/* No upstream is supported (unused value) */
#define PONFW_TWDM_CHANNEL_PROFILE_US_RATE_NONE 0
/* 2.48832 Gbit/s only. */
#define PONFW_TWDM_CHANNEL_PROFILE_US_RATE_LOW 1
/* 9.95328 Gbit/s only. */
#define PONFW_TWDM_CHANNEL_PROFILE_US_RATE_HIGH 2
/* 2.48832 and 9.95328 Gbit/s are supported. */
#define PONFW_TWDM_CHANNEL_PROFILE_US_RATE_BOTH 3

/* HW applicability of TWDM_CHANNEL_PROFILE */
#define PONFW_TWDM_CHANNEL_PROFILE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_channel_profile {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 28;
	/* Channel Profile Identifier */
	uint32_t cp_id : 4;
	/* PON ID */
	uint32_t pon_id;
	/* Default Response Channel */
	uint32_t def_resp_ch;
	/* Upstream Wavelength Channel Frequency */
	uint32_t us_frq;
	/* ONU Power Leveling Response Threshold */
	uint32_t resp_thr : 8;
	/* Downstream Frequency Offset */
	uint32_t ds_offset : 8;
	/* Cloned Configuration Indication */
	uint32_t cloned : 8;
	/* Channel Profile Version */
	uint32_t version : 8;
	/* Reserved */
	uint32_t res2 : 7;
	/* "This" Channel Indicator */
	uint32_t this_ch : 1;
	/* Downstream Data is Available */
	uint32_t ds_valid : 1;
	/* Downstream Forward Error Correction */
	uint32_t ds_fec : 1;
	/* Downstream Data Rate */
	uint32_t ds_rate : 1;
	/* Upstream Data is Available */
	uint32_t us_valid : 1;
	/* Upstream Optical Link Type */
	uint32_t us_type : 2;
	/* Upstream Data Rate Options */
	uint32_t us_rate : 2;
	/* Downstream Wavelength Channel ID */
	uint32_t dwlch_id : 4;
	/* Upstream Wavelength Channel ID */
	uint32_t uwlch_id : 4;
	/* Default ONU Attenuation */
	uint32_t def_att : 4;
	/* Channel Partition Index */
	uint32_t cpi : 4;
#else
	/* Channel Profile Identifier */
	uint32_t cp_id : 4;
	/* Reserved */
	uint32_t res1 : 28;
	/* PON ID */
	uint32_t pon_id;
	/* Default Response Channel */
	uint32_t def_resp_ch;
	/* Upstream Wavelength Channel Frequency */
	uint32_t us_frq;
	/* Channel Profile Version */
	uint32_t version : 8;
	/* Cloned Configuration Indication */
	uint32_t cloned : 8;
	/* Downstream Frequency Offset */
	uint32_t ds_offset : 8;
	/* ONU Power Leveling Response Threshold */
	uint32_t resp_thr : 8;
	/* Channel Partition Index */
	uint32_t cpi : 4;
	/* Default ONU Attenuation */
	uint32_t def_att : 4;
	/* Upstream Wavelength Channel ID */
	uint32_t uwlch_id : 4;
	/* Downstream Wavelength Channel ID */
	uint32_t dwlch_id : 4;
	/* Upstream Data Rate Options */
	uint32_t us_rate : 2;
	/* Upstream Optical Link Type */
	uint32_t us_type : 2;
	/* Upstream Data is Available */
	uint32_t us_valid : 1;
	/* Downstream Data Rate */
	uint32_t ds_rate : 1;
	/* Downstream Forward Error Correction */
	uint32_t ds_fec : 1;
	/* Downstream Data is Available */
	uint32_t ds_valid : 1;
	/* "This" Channel Indicator */
	uint32_t this_ch : 1;
	/* Reserved */
	uint32_t res2 : 7;
#endif
} __PACKED__;

/** Synchronous Ethernet Status */
#define PONFW_SYNCE_STATUS_CMD_ID (0x31)
#define PONFW_SYNCE_STATUS_LEN 4
/* SyncE is off, forced free-run operation */
#define PONFW_SYNCE_STATUS_SYNCE_STAT_OFF 0
/* Synchronous Ethernet mode is trying to synchronize.- free running- forced
 * free running- forced holdover- synced, acquiring holdover- synced,
 * holdover acquired.
 */
#define PONFW_SYNCE_STATUS_SYNCE_STAT_SYNCING 1
/* Synchronous Ethernet mode is synchronized, locked mode (holdover memory
 * acquired)
 */
#define PONFW_SYNCE_STATUS_SYNCE_STAT_SYNC 2
/* Synchronous Ethernet mode is in hold-over mode. */
#define PONFW_SYNCE_STATUS_SYNCE_STAT_HOLD 3

/* HW applicability of SYNCE_STATUS */
#define PONFW_SYNCE_STATUS_HW_PROP	PONFW_PROP_HW_PRXURX

struct ponfw_synce_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 24;
	/* Additional Status Information */
	uint32_t synce_info : 4;
	/* Synchronous Ethernet Operation Status */
	uint32_t synce_stat : 4;
#else
	/* Synchronous Ethernet Operation Status */
	uint32_t synce_stat : 4;
	/* Additional Status Information */
	uint32_t synce_info : 4;
	/* Reserved */
	uint32_t res : 24;
#endif
} __PACKED__;

/** Power Save State Machine Status */
#define PONFW_PSM_STATUS_CMD_ID (PONFW_STD_ITUT | 0x32)
#define PONFW_PSM_STATUS_LEN 44

/* HW applicability of PSM_STATUS */
#define PONFW_PSM_STATUS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_psm_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Total IDLE state time in ms */
	uint32_t idle;
	/* Total ACTIVE state in ms */
	uint32_t act;
	/* Total ACTIVE held time in ms */
	uint32_t act_held;
	/* Total ACTIVE free time in ms */
	uint32_t act_free;
	/* Total ASLEEP time in ms */
	uint32_t asleep;
	/* Total LISTEN state time in ms */
	uint32_t listen;
	/* Total WATCH state time in ms */
	uint32_t watch;
	/* Total DOZE_AWARE time in ms */
	uint32_t doze_aware;
	/* Total WATCH_AWARE time in ms */
	uint32_t watch_aware;
	/* Total SLEEP_AWARE time in ms */
	uint32_t sleep_aware;
	/* Total WAIT time in ms */
	uint32_t wait;
#else
	/* Total IDLE state time in ms */
	uint32_t idle;
	/* Total ACTIVE state in ms */
	uint32_t act;
	/* Total ACTIVE held time in ms */
	uint32_t act_held;
	/* Total ACTIVE free time in ms */
	uint32_t act_free;
	/* Total ASLEEP time in ms */
	uint32_t asleep;
	/* Total LISTEN state time in ms */
	uint32_t listen;
	/* Total WATCH state time in ms */
	uint32_t watch;
	/* Total DOZE_AWARE time in ms */
	uint32_t doze_aware;
	/* Total WATCH_AWARE time in ms */
	uint32_t watch_aware;
	/* Total SLEEP_AWARE time in ms */
	uint32_t sleep_aware;
	/* Total WAIT time in ms */
	uint32_t wait;
#endif
} __PACKED__;

/** Log Info */
#define PONFW_LOG_INFO_CMD_ID (0x34)
#define PONFW_LOG_INFO_LENW 20
#define PONFW_LOG_INFO_LEN 4

/* Disable */
#define PONFW_LOG_INFO_LOGSEL0_DIS 0
/* Enable */
#define PONFW_LOG_INFO_LOGSEL0_EN 1

/* HW applicability of LOG_INFO */
#define PONFW_LOG_INFO_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_log_info {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 31;
	/* Log Info Bit 0: Deactivation Reason */
	uint32_t logsel0 : 1;
	/* Reserved */
	uint32_t res2 : 16;
	/* Deactivation Reason */
	uint32_t deact_reason : 16;
	/* Reserved (for Log Info 2) */
	uint32_t res3;
	/* Reserved (for Log Info 3) */
	uint32_t res4;
	/* Reserved (for Log Info 4) */
	uint32_t res5;
#else
	/* Log Info Bit 0: Deactivation Reason */
	uint32_t logsel0 : 1;
	/* Reserved */
	uint32_t res1 : 31;
	/* Deactivation Reason */
	uint32_t deact_reason : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* Reserved (for Log Info 2) */
	uint32_t res3;
	/* Reserved (for Log Info 3) */
	uint32_t res4;
	/* Reserved (for Log Info 4) */
	uint32_t res5;
#endif
} __PACKED__;

/** BIP Error Configuration */
#define PONFW_BIP_ERR_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x40)
#define PONFW_BIP_ERR_CONFIG_LEN 12

/* HW applicability of BIP_ERR_CONFIG */
#define PONFW_BIP_ERR_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_bip_err_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* BIP error interval */
	uint32_t bip_err_intvl;
	/* Signal fail threshold */
	uint32_t sigfail_th;
	/* Signal degrade threshold */
	uint32_t sigdeg_th;
#else
	/* BIP error interval */
	uint32_t bip_err_intvl;
	/* Signal fail threshold */
	uint32_t sigfail_th;
	/* Signal degrade threshold */
	uint32_t sigdeg_th;
#endif
} __PACKED__;

/** Synchronous Ethernet Configuration */
#define PONFW_SYNCE_CONFIG_CMD_ID (0x41)
#define PONFW_SYNCE_CONFIG_LEN 16
/* DPLL loop in HW, holdover in FW */
#define PONFW_SYNCE_CONFIG_LOOP_MODE_MIX 0
/* DPLL and holdover in FW */
#define PONFW_SYNCE_CONFIG_LOOP_MODE_FW 1
/* DPLL and holdover in HW(B0 and newer only, not yet supported) */
#define PONFW_SYNCE_CONFIG_LOOP_MODE_HW 2
/* The holdover mode is left automatically. */
#define PONFW_SYNCE_CONFIG_KEEP_HOLD_AUTO 0
/* The holdover mode is left manually. */
#define PONFW_SYNCE_CONFIG_KEEP_HOLD_KEEP 1
/* Reserved, do not use. */
#define PONFW_SYNCE_CONFIG_SYNCE_MODE_BW0 0
/* 2.9 Hz (EEC1 and enhanced EEC option). */
#define PONFW_SYNCE_CONFIG_SYNCE_MODE_BW1 1
/* Reserved for EEC2 option (< 0.1 Hz), do not use. */
#define PONFW_SYNCE_CONFIG_SYNCE_MODE_BW2 2
/* Reserved, do not use. */
#define PONFW_SYNCE_CONFIG_SYNCE_MODE_BW3 3
/* The LAN0 interface is used for synchronization. */
#define PONFW_SYNCE_CONFIG_SYNCE_SRC_P0 0
/* The LAN1 interface is used for synchronization. */
#define PONFW_SYNCE_CONFIG_SYNCE_SRC_P1 1
/* The WAN interface is used for synchronization. The allowed frequencies are
 * 155.52 MHz for G-PON mode and 622.08 MHz for 10G ITU PON modes.
 */
#define PONFW_SYNCE_CONFIG_SYNCE_SRC_P2 2
/* The GPHY interface is used for synchronization. */
#define PONFW_SYNCE_CONFIG_SYNCE_SRC_GPHY 3
/* The general purpose clock input pin is used for synchronization. */
#define PONFW_SYNCE_CONFIG_SYNCE_SRC_GPC1 4
/* The general purpose clock input pin is used for synchronization. */
#define PONFW_SYNCE_CONFIG_SYNCE_SRC_GPC2 5
/* 1.544 MHz, used for GPC clock input. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F1M 0
/* 2.048 MHz, used for internal GPHY or E1 clock on GPC. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F2M 1
/* 10.0 MHz, used for GPC clock input. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F10M 2
/* 25.0 MHz, used for GPC clock input. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F25M 3
/* 50.0 MHz, used for GPC clock input. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F50M 4
/* Reserved, do not use. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_RES1 5
/* 125.0 MHz, used for 1000BASE-X. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F125M 6
/* 155.52 MHz, used for G-PON. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F155M 7
/* Reserved, do not use. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_RES2 8
/* Reserved, do not use. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_RES3 9
/* 312.5 MHz, used for 10GBASE-R. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F312M 10
/* 622.08 MHz, used for XG(S)-PON, NG-PON2. */
#define PONFW_SYNCE_CONFIG_SYNCE_FRQ_F622M 11
/* Automatic message sending is disabled. */
#define PONFW_SYNCE_CONFIG_SEND_INFO_DIS 0
/* Automatic message sending is enabled. */
#define PONFW_SYNCE_CONFIG_SEND_INFO_EN 1

/* HW applicability of SYNCE_CONFIG */
#define PONFW_SYNCE_CONFIG_HW_PROP	PONFW_PROP_HW_PRXURX

struct ponfw_synce_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Limiter Threshold */
	uint32_t lim_thr : 16;
	/* Holdover Average Coefficient N0 */
	uint32_t n0 : 4;
	/* Loop Mode */
	uint32_t loop_mode : 2;
	/* Keep Holdover */
	uint32_t keep_hold : 1;
	/* Synchronous Ethernet Operation Mode */
	uint32_t synce_mode : 2;
	/* Synchronous Ethernet Source Selection */
	uint32_t synce_src : 3;
	/* Synchronous Ethernet Reference Frequency */
	uint32_t synce_frq : 4;
	/* Reserved */
	uint32_t res1 : 15;
	/* Send the Status upon SYNCE_INFO Changes */
	uint32_t send_info : 1;
	/* Divider Deviance Threshold */
	uint32_t ddt : 16;
	/* Reserved */
	uint32_t res2;
	/* IIR Coefficient B0 */
	uint32_t b0 : 4;
	/* IIR Coefficient B1 */
	uint32_t b1 : 4;
	/* IIR Coefficient B2 */
	uint32_t b2 : 4;
	/* IIR Coefficient B3 */
	uint32_t b3 : 4;
	/* IIR Coefficient B4 */
	uint32_t b4 : 4;
	/* IIR Coefficient B5 */
	uint32_t b5 : 4;
	/* IIR Coefficient B6 */
	uint32_t b6 : 4;
	/* IIR Coefficient B7 */
	uint32_t b7 : 4;
#else
	/* Synchronous Ethernet Reference Frequency */
	uint32_t synce_frq : 4;
	/* Synchronous Ethernet Source Selection */
	uint32_t synce_src : 3;
	/* Synchronous Ethernet Operation Mode */
	uint32_t synce_mode : 2;
	/* Keep Holdover */
	uint32_t keep_hold : 1;
	/* Loop Mode */
	uint32_t loop_mode : 2;
	/* Holdover Average Coefficient N0 */
	uint32_t n0 : 4;
	/* Limiter Threshold */
	uint32_t lim_thr : 16;
	/* Divider Deviance Threshold */
	uint32_t ddt : 16;
	/* Send the Status upon SYNCE_INFO Changes */
	uint32_t send_info : 1;
	/* Reserved */
	uint32_t res1 : 15;
	/* Reserved */
	uint32_t res2;
	/* IIR Coefficient B7 */
	uint32_t b7 : 4;
	/* IIR Coefficient B6 */
	uint32_t b6 : 4;
	/* IIR Coefficient B5 */
	uint32_t b5 : 4;
	/* IIR Coefficient B4 */
	uint32_t b4 : 4;
	/* IIR Coefficient B3 */
	uint32_t b3 : 4;
	/* IIR Coefficient B2 */
	uint32_t b2 : 4;
	/* IIR Coefficient B1 */
	uint32_t b1 : 4;
	/* IIR Coefficient B0 */
	uint32_t b0 : 4;
#endif
} __PACKED__;

/** Power Saving Mode Configuration */
#define PONFW_PSM_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x43)
#define PONFW_PSM_CONFIG_LEN 20
/* Doze mode */
#define PONFW_PSM_CONFIG_MODE_DOZE 0x1
/* Cyclic sleep mode */
#define PONFW_PSM_CONFIG_MODE_CSL 0x2
/* Watchful sleep mode */
#define PONFW_PSM_CONFIG_MODE_WSL 0x4
/* Disable the power state machine. All settings of the mode and timing
 * parameters are ignored.
 */
#define PONFW_PSM_CONFIG_EN_DIS 0x0
/* Enable the power state machine. All mode and timing parameters must be
 * populated with valid values.
 */
#define PONFW_PSM_CONFIG_EN_EN 0x1

/* HW applicability of PSM_CONFIG */
#define PONFW_PSM_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_psm_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Transmit Path Wake-up Time */
	uint32_t tx_wake_time : 16;
	/* Reserved */
	uint32_t res : 12;
	/* PSM Mode */
	uint32_t mode : 3;
	/* PSM Enable */
	uint32_t en : 1;
	/* Maximum sleep interval */
	uint32_t max_slp_int;
	/* Minimum aware interval */
	uint32_t min_aw_int;
	/* Minimum active held interval */
	uint32_t min_act_int;
	/* Maximum receiver off interval */
	uint32_t max_cyl_int;
#else
	/* PSM Enable */
	uint32_t en : 1;
	/* PSM Mode */
	uint32_t mode : 3;
	/* Reserved */
	uint32_t res : 12;
	/* Transmit Path Wake-up Time */
	uint32_t tx_wake_time : 16;
	/* Maximum sleep interval */
	uint32_t max_slp_int;
	/* Minimum aware interval */
	uint32_t min_aw_int;
	/* Minimum active held interval */
	uint32_t min_act_int;
	/* Maximum receiver off interval */
	uint32_t max_cyl_int;
#endif
} __PACKED__;

/** XGTC Encryption Configuration */
#define PONFW_XGTC_ENC_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x44)
#define PONFW_XGTC_ENC_CONFIG_LEN 20
/* Default mode, mandatory, supported. */
#define PONFW_XGTC_ENC_CONFIG_ENCMODE_AES_CMAC_128 0x1
/* Optional mode, for future enhancement, not supported. */
#define PONFW_XGTC_ENC_CONFIG_ENCMODE_HMAC_SHA_256 0x2
/* Optional mode, for future enhancement, not supported. */
#define PONFW_XGTC_ENC_CONFIG_ENCMODE_HMAC_SHA_512 0x3

/* HW applicability of XGTC_ENC_CONFIG */
#define PONFW_XGTC_ENC_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_enc_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 8;
	/* Encryption Mode */
	uint32_t encmode : 8;
	/* Encryption Key Size */
	uint32_t keysize : 16;
	/* Pre-shared Key (Part 3) */
	uint32_t psk3;
	/* Pre-shared Key (Part 2) */
	uint32_t psk2;
	/* Pre-shared Key (Part 1) */
	uint32_t psk1;
	/* Pre-shared Key (Part 0) */
	uint32_t psk0;
#else
	/* Encryption Key Size */
	uint32_t keysize : 16;
	/* Encryption Mode */
	uint32_t encmode : 8;
	/* Reserved */
	uint32_t res : 8;
	/* Pre-shared Key (Part 3) */
	uint32_t psk3;
	/* Pre-shared Key (Part 2) */
	uint32_t psk2;
	/* Pre-shared Key (Part 1) */
	uint32_t psk1;
	/* Pre-shared Key (Part 0) */
	uint32_t psk0;
#endif
} __PACKED__;

/** XGTC OLT Random Challenge Table */
#define PONFW_XGTC_OLT_RND_CHAL_TABLE_CMD_ID (PONFW_STD_ITUT | 0x45)
#define PONFW_XGTC_OLT_RND_CHAL_TABLE_LEN 16

/* HW applicability of XGTC_OLT_RND_CHAL_TABLE */
#define PONFW_XGTC_OLT_RND_CHAL_TABLE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_olt_rnd_chal_table {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Requested OLT Random Challenge Data byte 1 */
	uint8_t oltrct[16];
#else
	/* Requested OLT Random Challenge Data byte 1 */
	uint8_t oltrct[16];
#endif
} __PACKED__;

/** XGTC ONU Random Challenge Table */
#define PONFW_XGTC_ONU_RND_CHAL_TABLE_CMD_ID (PONFW_STD_ITUT | 0x46)
#define PONFW_XGTC_ONU_RND_CHAL_TABLE_LEN 16

/* HW applicability of XGTC_ONU_RND_CHAL_TABLE */
#define PONFW_XGTC_ONU_RND_CHAL_TABLE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_onu_rnd_chal_table {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* ONU Random Challenge Data byte 1 */
	uint8_t onurct[16];
#else
	/* ONU Random Challenge Data byte 1 */
	uint8_t onurct[16];
#endif
} __PACKED__;

/** XGTC OLT Authentication Result Table */
#define PONFW_XGTC_OLT_AUTH_RESULT_TABLE_CMD_ID (PONFW_STD_ITUT | 0x47)
#define PONFW_XGTC_OLT_AUTH_RESULT_TABLE_LEN 16

/* HW applicability of XGTC_OLT_AUTH_RESULT_TABLE */
#define PONFW_XGTC_OLT_AUTH_RESULT_TABLE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_olt_auth_result_table {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* OLT Authentication Result Table byte 1 */
	uint8_t oltart[16];
#else
	/* OLT Authentication Result Table byte 1 */
	uint8_t oltart[16];
#endif
} __PACKED__;

/** XGTC ONU Authentication Result Table */
#define PONFW_XGTC_ONU_AUTH_RESULT_TABLE_CMD_ID (PONFW_STD_ITUT | 0x48)
#define PONFW_XGTC_ONU_AUTH_RESULT_TABLE_LEN 16

/* HW applicability of XGTC_ONU_AUTH_RESULT_TABLE */
#define PONFW_XGTC_ONU_AUTH_RESULT_TABLE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_onu_auth_result_table {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* ONU Authentication Result Table data byte 1 */
	uint8_t onuart[16];
#else
	/* ONU Authentication Result Table data byte 1 */
	uint8_t onuart[16];
#endif
} __PACKED__;

/** XGTC Broadcast Key Table */
#define PONFW_XGTC_BROADCAST_KEY_TABLE_CMD_ID (PONFW_STD_ITUT | 0x49)
#define PONFW_XGTC_BROADCAST_KEY_TABLE_LEN 20
/* Broadcast Key Index1 */
#define PONFW_XGTC_BROADCAST_KEY_TABLE_IDX_IDX1 0x0
/* Broadcast Key Index2 */
#define PONFW_XGTC_BROADCAST_KEY_TABLE_IDX_IDX2 0x1

/* HW applicability of XGTC_BROADCAST_KEY_TABLE */
#define PONFW_XGTC_BROADCAST_KEY_TABLE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_broadcast_key_table {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 31;
	/* Broadcast Key Index */
	uint32_t idx : 1;
	/* Broadcast Key Table data byte 1 */
	uint8_t oltbkt[16];
#else
	/* Broadcast Key Index */
	uint32_t idx : 1;
	/* Reserved */
	uint32_t res : 31;
	/* Broadcast Key Table data byte 1 */
	uint8_t oltbkt[16];
#endif
} __PACKED__;

/** OMCI Encapsulation Configuration */
#define PONFW_OMCI_ENCAP_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x4B)
#define PONFW_OMCI_ENCAP_CONFIG_LEN 24

/* HW applicability of OMCI_ENCAP_CONFIG */
#define PONFW_OMCI_ENCAP_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_omci_encap_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* OMCI Encapsulation Ethertype */
	uint32_t ethtype : 16;
	/* Reserved */
	uint32_t res1 : 8;
	/* OMCI Encapsulation Protocol upper part */
	uint32_t omcip1 : 8;
	/* OMCI Encapsulation Protocol lower part */
	uint32_t omcip0;
	/* Reserved */
	uint32_t res2 : 16;
	/* PON IP OMCI Interface MAC Address upper part */
	uint32_t macsa1 : 16;
	/* PON IP OMCI Interface MAC Address lower part */
	uint32_t macsa0;
	/* Reserved */
	uint32_t res3 : 16;
	/* SoC OMCI Interface MAC Address upper part */
	uint32_t macda1 : 16;
	/* SoC OMCI Interface MAC Address lower part */
	uint32_t macda0;
#else
	/* OMCI Encapsulation Protocol upper part */
	uint32_t omcip1 : 8;
	/* Reserved */
	uint32_t res1 : 8;
	/* OMCI Encapsulation Ethertype */
	uint32_t ethtype : 16;
	/* OMCI Encapsulation Protocol lower part */
	uint32_t omcip0;
	/* PON IP OMCI Interface MAC Address upper part */
	uint32_t macsa1 : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* PON IP OMCI Interface MAC Address lower part */
	uint32_t macsa0;
	/* SoC OMCI Interface MAC Address upper part */
	uint32_t macda1 : 16;
	/* Reserved */
	uint32_t res3 : 16;
	/* SoC OMCI Interface MAC Address lower part */
	uint32_t macda0;
#endif
} __PACKED__;

/** MPLS Encapsulation Configuration */
#define PONFW_MPLS_ENCAP_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x4D)
#define PONFW_MPLS_ENCAP_CONFIG_LEN 20

/* HW applicability of MPLS_ENCAP_CONFIG */
#define PONFW_MPLS_ENCAP_CONFIG_HW_PROP	PONFW_PROP_HW_PRXURX

struct ponfw_mpls_encap_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 16;
	/* MPLS Encapsulation Ethertype */
	uint32_t mpls_ethtype : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* PON IP MPLS Interface MAC Address upper part */
	uint32_t macsa1 : 16;
	/* PON IP MPLS Interface MAC Address lower part */
	uint32_t macsa0;
	/* Reserved */
	uint32_t res3 : 16;
	/* SoC MPLS Interface MAC Address upper part */
	uint32_t macda1 : 16;
	/* SoC MPLS Interface MAC Address lower part */
	uint32_t macda0;
#else
	/* MPLS Encapsulation Ethertype */
	uint32_t mpls_ethtype : 16;
	/* Reserved */
	uint32_t res1 : 16;
	/* PON IP MPLS Interface MAC Address upper part */
	uint32_t macsa1 : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* PON IP MPLS Interface MAC Address lower part */
	uint32_t macsa0;
	/* SoC MPLS Interface MAC Address upper part */
	uint32_t macda1 : 16;
	/* Reserved */
	uint32_t res3 : 16;
	/* SoC MPLS Interface MAC Address lower part */
	uint32_t macda0;
#endif
} __PACKED__;

/** QoS Configuration */
#define PONFW_ONU_QOS_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x4F)
#define PONFW_ONU_QOS_CONFIG_LEN 4
/* The block size is 16 byte. */
#define PONFW_ONU_QOS_CONFIG_PSF_BS16 16
/* The block size is 32 byte. */
#define PONFW_ONU_QOS_CONFIG_PSF_BS32 32
/* The block size is 48 byte. */
#define PONFW_ONU_QOS_CONFIG_PSF_BS48 48
/* The block size is 64 byte. */
#define PONFW_ONU_QOS_CONFIG_PSF_BS64 64

/* HW applicability of ONU_QOS_CONFIG */
#define PONFW_ONU_QOS_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_qos_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 16;
	/* Priority Queue Scale Factor */
	uint32_t psf : 16;
#else
	/* Priority Queue Scale Factor */
	uint32_t psf : 16;
	/* Reserved */
	uint32_t res : 16;
#endif
} __PACKED__;

/** TWDM Configuration */
#define PONFW_TWDM_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x50)
#define PONFW_TWDM_CONFIG_LEN 8

/* HW applicability of TWDM_CONFIG */
#define PONFW_TWDM_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Wavelength Switching Delay */
	uint32_t wl_sw_delay : 16;
	/* Reserved */
	uint32_t res1 : 8;
	/* Last Used Downstream Channel ID */
	uint32_t dwlch_id : 4;
	/* Channel Partition Index */
	uint32_t cpi : 4;
	/* Wavelength Switching Delay Initial */
	uint32_t wl_sw_delay_init : 16;
	/* Reserved */
	uint32_t res2 : 8;
	/* Wavelength Switching Initial Scan Rounds */
	uint32_t wl_sw_rounds_init : 8;
#else
	/* Channel Partition Index */
	uint32_t cpi : 4;
	/* Last Used Downstream Channel ID */
	uint32_t dwlch_id : 4;
	/* Reserved */
	uint32_t res1 : 8;
	/* Wavelength Switching Delay */
	uint32_t wl_sw_delay : 16;
	/* Wavelength Switching Initial Scan Rounds */
	uint32_t wl_sw_rounds_init : 8;
	/* Reserved */
	uint32_t res2 : 8;
	/* Wavelength Switching Delay Initial */
	uint32_t wl_sw_delay_init : 16;
#endif
} __PACKED__;

/** Timeout Values */
#define PONFW_TIMEOUT_VALUES_CMD_ID (PONFW_STD_ITUT | 0x51)
#define PONFW_TIMEOUT_VALUES_LEN 36

/* HW applicability of TIMEOUT_VALUES */
#define PONFW_TIMEOUT_VALUES_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_timeout_values {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 16;
	/* Timeout 0 */
	uint32_t toz : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* Timeout 1 */
	uint32_t to1 : 16;
	/* Reserved */
	uint32_t res3 : 16;
	/* Timeout 2 */
	uint32_t to2 : 16;
	/* Reserved */
	uint32_t res4 : 16;
	/* Timeout 3 */
	uint32_t to3 : 16;
	/* Reserved */
	uint32_t res5 : 16;
	/* Timeout 4 */
	uint32_t to4 : 16;
	/* Reserved */
	uint32_t res6 : 16;
	/* Timeout 5 */
	uint32_t to5 : 16;
	/* Reserved */
	uint32_t res7 : 16;
	/* Timeout 6 */
	uint32_t to6 : 16;
	/* Timeout for TProfileDwell Timer */
	uint32_t to_tpd : 16;
	/* Timeout Change Power Level */
	uint32_t to_cpl : 16;
	/* Reserved */
	uint32_t res8 : 12;
	/* Timeout for Channel Partition Index Searching */
	uint32_t to_cpi : 20;
#else
	/* Timeout 0 */
	uint32_t toz : 16;
	/* Reserved */
	uint32_t res1 : 16;
	/* Timeout 1 */
	uint32_t to1 : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* Timeout 2 */
	uint32_t to2 : 16;
	/* Reserved */
	uint32_t res3 : 16;
	/* Timeout 3 */
	uint32_t to3 : 16;
	/* Reserved */
	uint32_t res4 : 16;
	/* Timeout 4 */
	uint32_t to4 : 16;
	/* Reserved */
	uint32_t res5 : 16;
	/* Timeout 5 */
	uint32_t to5 : 16;
	/* Reserved */
	uint32_t res6 : 16;
	/* Timeout 6 */
	uint32_t to6 : 16;
	/* Reserved */
	uint32_t res7 : 16;
	/* Timeout Change Power Level */
	uint32_t to_cpl : 16;
	/* Timeout for TProfileDwell Timer */
	uint32_t to_tpd : 16;
	/* Timeout for Channel Partition Index Searching */
	uint32_t to_cpi : 20;
	/* Reserved */
	uint32_t res8 : 12;
#endif
} __PACKED__;

/** ITU Interoperability Configuration */
#define PONFW_ONU_INTEROP_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x52)
#define PONFW_ONU_INTEROP_CONFIG_LEN 4
/* Disabled (default) */
#define PONFW_ONU_INTEROP_CONFIG_IOP11_STD 0
/* Laser switch-off after dying -gasp alarm. */
#define PONFW_ONU_INTEROP_CONFIG_IOP11_LASER_OFF 1
/* No additional request. (default) */
#define PONFW_ONU_INTEROP_CONFIG_IOP10_STD 0
/* Additional request of 8 kbyte. */
#define PONFW_ONU_INTEROP_CONFIG_IOP10_TIB 1
/* The SeqNo value zero is ignored (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP8_STD 0
/* The SeqNo value zero is accepted. */
#define PONFW_ONU_INTEROP_CONFIG_IOP8_VSPEC 1
/* BIP errors are not counted (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP7_BIP_OFF 0
/* BIP errors are counted. */
#define PONFW_ONU_INTEROP_CONFIG_IOP7_BIP_ON 1
/* Standard behavior (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP6_STD 0
/* Vendor-specific behavior. */
#define PONFW_ONU_INTEROP_CONFIG_IOP6_VSPEC 1
/* Standard behavior (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP5_STD 0
/* Vendor-specific behavior. */
#define PONFW_ONU_INTEROP_CONFIG_IOP5_VSPEC 1
/* The PLOAM state is not changed (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP4_NORM 0
/* The PLOAM state is changed to O7. */
#define PONFW_ONU_INTEROP_CONFIG_IOP4_O7 1
/* Disabled (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP3_DIS 0
/* Enabled (do not use). */
#define PONFW_ONU_INTEROP_CONFIG_IOP3_EN 1
/* Normal operation mode (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP2_ZERO 0
/* Increased ranging offset mode. */
#define PONFW_ONU_INTEROP_CONFIG_IOP2_OFFSET 1
/* Normal encrypted OMCC mode (default). */
#define PONFW_ONU_INTEROP_CONFIG_IOP1_NORM 0
/* Unencrypted OMCC upstream (required for some OLT types) */
#define PONFW_ONU_INTEROP_CONFIG_IOP1_UNENC 1
/* Normal encrypted OMCC mode (default) */
#define PONFW_ONU_INTEROP_CONFIG_IOP0_NORM 0
/* Unencrypted OMCC (required for some OLT types) */
#define PONFW_ONU_INTEROP_CONFIG_IOP0_UNENC 1

/* HW applicability of ONU_INTEROP_CONFIG */
#define PONFW_ONU_INTEROP_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_interop_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 20;
	/* PON Interoperability Mode 11 - Laser-Off Timer */
	uint32_t iop11 : 1;
	/* PON Interoperability Mode 10 - Addition Request */
	uint32_t iop10 : 1;
	/* PON Interoperability Mode 9 - Reserved */
	uint32_t iop9 : 1;
	/* PON Interoperability Mode 8 - SeqNo Handling */
	uint32_t iop8 : 1;
	/* PON Interoperability Mode 7 - BIP error counting */
	uint32_t iop7 : 1;
	/* PON Interoperability Mode 6 - PLOAM message ID 0xFF handling */
	uint32_t iop6 : 1;
	/* PON Interoperability Mode 5 - Hybrid XG-PON/XGS-PON */
	uint32_t iop5 : 1;
	/* PON Interoperability Mode 4 - PLOAM state O7 after rogue ONU
	 * detection
	 */
	uint32_t iop4 : 1;
	/* PON Interoperability Mode 3 - Reserved */
	uint32_t iop3 : 1;
	/* PON Interoperability Mode 2 - Ranging time increase */
	uint32_t iop2 : 1;
	/* PON Interoperability Mode 1 - OMCC encrypted in downstream only */
	uint32_t iop1 : 1;
	/* PON Interoperability Mode 0 - OMCC not encrypted */
	uint32_t iop0 : 1;
#else
	/* PON Interoperability Mode 0 - OMCC not encrypted */
	uint32_t iop0 : 1;
	/* PON Interoperability Mode 1 - OMCC encrypted in downstream only */
	uint32_t iop1 : 1;
	/* PON Interoperability Mode 2 - Ranging time increase */
	uint32_t iop2 : 1;
	/* PON Interoperability Mode 3 - Reserved */
	uint32_t iop3 : 1;
	/* PON Interoperability Mode 4 - PLOAM state O7 after rogue ONU
	 * detection
	 */
	uint32_t iop4 : 1;
	/* PON Interoperability Mode 5 - Hybrid XG-PON/XGS-PON */
	uint32_t iop5 : 1;
	/* PON Interoperability Mode 6 - PLOAM message ID 0xFF handling */
	uint32_t iop6 : 1;
	/* PON Interoperability Mode 7 - BIP error counting */
	uint32_t iop7 : 1;
	/* PON Interoperability Mode 8 - SeqNo Handling */
	uint32_t iop8 : 1;
	/* PON Interoperability Mode 9 - Reserved */
	uint32_t iop9 : 1;
	/* PON Interoperability Mode 10 - Addition Request */
	uint32_t iop10 : 1;
	/* PON Interoperability Mode 11 - Laser-Off Timer */
	uint32_t iop11 : 1;
	/* Reserved */
	uint32_t res : 20;
#endif
} __PACKED__;

/** TWDM Power Configuration */
#define PONFW_TWDM_POWER_CMD_ID (PONFW_STD_ITUT | 0x53)
#define PONFW_TWDM_POWER_LEN 4

/* HW applicability of TWDM_POWER */
#define PONFW_TWDM_POWER_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_power {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Power Value */
	uint32_t power : 16;
	/* Reserved */
	uint32_t res : 12;
	/* Channel Profile ID */
	uint32_t cp_id : 4;
#else
	/* Channel Profile ID */
	uint32_t cp_id : 4;
	/* Reserved */
	uint32_t res : 12;
	/* Power Value */
	uint32_t power : 16;
#endif
} __PACKED__;

/** Enhanced Inter-burst Pattern Configuration */
#define PONFW_BURST_PAUSE_CONFIG_CMD_ID (0x54)
#define PONFW_BURST_PAUSE_CONFIG_LEN 32

/* HW applicability of BURST_PAUSE_CONFIG */
#define PONFW_BURST_PAUSE_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_burst_pause_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Burst Pause Pattern Word 1 */
	uint32_t bpp1;
	/* Burst Pause Pattern Word 2 */
	uint32_t bpp2;
	/* Burst Pause Pattern Word 3 */
	uint32_t bpp3;
	/* Burst Pause Pattern Word 4 */
	uint32_t bpp4;
	/* Burst Pause Pattern Word 5 */
	uint32_t bpp5;
	/* Burst Pause Pattern Word 6 */
	uint32_t bpp6;
	/* Burst Pause Pattern Word 7 */
	uint32_t bpp7;
	/* Burst Pause Pattern Word 8 */
	uint32_t bpp8;
#else
	/* Burst Pause Pattern Word 1 */
	uint32_t bpp1;
	/* Burst Pause Pattern Word 2 */
	uint32_t bpp2;
	/* Burst Pause Pattern Word 3 */
	uint32_t bpp3;
	/* Burst Pause Pattern Word 4 */
	uint32_t bpp4;
	/* Burst Pause Pattern Word 5 */
	uint32_t bpp5;
	/* Burst Pause Pattern Word 6 */
	uint32_t bpp6;
	/* Burst Pause Pattern Word 7 */
	uint32_t bpp7;
	/* Burst Pause Pattern Word 8 */
	uint32_t bpp8;
#endif
} __PACKED__;

/** XGTC Credentials Configuration */
#define PONFW_XGTC_CREDENTIALS_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x55)
#define PONFW_XGTC_CREDENTIALS_CONFIG_LEN 44

/* HW applicability of XGTC_CREDENTIALS_CONFIG */
#define PONFW_XGTC_CREDENTIALS_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_credentials_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Registration ID */
	uint32_t id[9];
#else
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Registration ID */
	uint32_t id[9];
#endif
} __PACKED__;

/** GTC Credentials Configuration */
#define PONFW_GTC_CREDENTIALS_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x56)
#define PONFW_GTC_CREDENTIALS_CONFIG_LEN 20

/* HW applicability of GTC_CREDENTIALS_CONFIG */
#define PONFW_GTC_CREDENTIALS_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gtc_credentials_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Reserved */
	uint32_t res : 16;
	/* Password 1 */
	uint32_t pw1 : 8;
	/* Password 2 */
	uint32_t pw2 : 8;
	/* Password 3 */
	uint32_t pw3 : 8;
	/* Password 4 */
	uint32_t pw4 : 8;
	/* Password 5 */
	uint32_t pw5 : 8;
	/* Password 6 */
	uint32_t pw6 : 8;
	/* Password 7 */
	uint32_t pw7 : 8;
	/* Password 8 */
	uint32_t pw8 : 8;
	/* Password 9 */
	uint32_t pw9 : 8;
	/* Password 10 */
	uint32_t pw10 : 8;
#else
	/* Serial Number - First Octet */
	uint8_t sn[8];
	/* Password 2 */
	uint32_t pw2 : 8;
	/* Password 1 */
	uint32_t pw1 : 8;
	/* Reserved */
	uint32_t res : 16;
	/* Password 6 */
	uint32_t pw6 : 8;
	/* Password 5 */
	uint32_t pw5 : 8;
	/* Password 4 */
	uint32_t pw4 : 8;
	/* Password 3 */
	uint32_t pw3 : 8;
	/* Password 10 */
	uint32_t pw10 : 8;
	/* Password 9 */
	uint32_t pw9 : 8;
	/* Password 8 */
	uint32_t pw8 : 8;
	/* Password 7 */
	uint32_t pw7 : 8;
#endif
} __PACKED__;

/** Link Control */
#define PONFW_LINK_CONTROL_CMD_ID (PONFW_STD_ITUT | 0x57)
#define PONFW_LINK_CONTROL_LEN 4
/* Synthetic LODS is inactive. */
#define PONFW_LINK_CONTROL_LODS_ACT_INACTIVE 0x0
/* Synthetic LODS is active. */
#define PONFW_LINK_CONTROL_LODS_ACT_ACTIVE 0x1
/* The PLOAM state machine is enabled. */
#define PONFW_LINK_CONTROL_PSMDIS_EN 0
/* The PLOAM state machine is disabled. */
#define PONFW_LINK_CONTROL_PSMDIS_DIS 1
/* The optical transmitter is enabled. */
#define PONFW_LINK_CONTROL_TXDIS_EN 0
/* The optical transmitter is disabled. */
#define PONFW_LINK_CONTROL_TXDIS_DIS 1

/* HW applicability of LINK_CONTROL */
#define PONFW_LINK_CONTROL_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_link_control {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* LODS Activation Time */
	uint32_t lods_time : 16;
	/* Reserved */
	uint32_t res : 13;
	/* Synthetic LODS Activity Status */
	uint32_t lods_act : 1;
	/* PLOAM State Machine Disable */
	uint32_t psmdis : 1;
	/* Transmitter Disable */
	uint32_t txdis : 1;
#else
	/* Transmitter Disable */
	uint32_t txdis : 1;
	/* PLOAM State Machine Disable */
	uint32_t psmdis : 1;
	/* Synthetic LODS Activity Status */
	uint32_t lods_act : 1;
	/* Reserved */
	uint32_t res : 13;
	/* LODS Activation Time */
	uint32_t lods_time : 16;
#endif
} __PACKED__;

/** Adaptive Request Control */
#define PONFW_REQUESTING_ADAPTATION_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x58)
#define PONFW_REQUESTING_ADAPTATION_CONFIG_LEN 8

/* HW applicability of REQUESTING_ADAPTATION_CONFIG */
#define PONFW_REQUESTING_ADAPTATION_CONFIG_HW_PROP	PONFW_PROP_HW_PRXURX

struct ponfw_requesting_adaptation_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Requesting Decrease Threshold */
	uint32_t rdthr : 9;
	/* Requesting Increase Threshold */
	uint32_t rithr : 9;
	/* Requesting Decrease Fast Percentage */
	uint32_t rdfast : 7;
	/* Requesting Increase Fast Percentage */
	uint32_t rifast : 7;
	/* Reserved */
	uint32_t res;
#else
	/* Requesting Increase Fast Percentage */
	uint32_t rifast : 7;
	/* Requesting Decrease Fast Percentage */
	uint32_t rdfast : 7;
	/* Requesting Increase Threshold */
	uint32_t rithr : 9;
	/* Requesting Decrease Threshold */
	uint32_t rdthr : 9;
	/* Reserved */
	uint32_t res;
#endif
} __PACKED__;

/** Descriptor Controller Configuration */
#define PONFW_DESC_CONTROL_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x59)
#define PONFW_DESC_CONTROL_CONFIG_LEN 44
/* Disable. Use Activity Fixed Value (ACTFV) from register. */
#define PONFW_DESC_CONTROL_CONFIG_ACTDET_DIS 0
/* Enable automatic activity detection based on DMA ring emptiness. */
#define PONFW_DESC_CONTROL_CONFIG_ACTDET_EN 1
/* Deactivate. */
#define PONFW_DESC_CONTROL_CONFIG_FSMACT_DEACT 0
/* Activate. */
#define PONFW_DESC_CONTROL_CONFIG_FSMACT_ACT 1
/* Request Mode: FSM reacts only on requests coming from FW. */
#define PONFW_DESC_CONTROL_CONFIG_FSMMODE_REQUEST 0
/* Watermark Mode: FSM refills POBUF autonomously. */
#define PONFW_DESC_CONTROL_CONFIG_FSMMODE_WATERMARK 1

/* HW applicability of DESC_CONTROL_CONFIG */
#define PONFW_DESC_CONTROL_CONFIG_HW_PROP	PONFW_PROP_HW_TOPAZ

struct ponfw_desc_control_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 22;
	/* Monitored AIX */
	uint32_t monitor : 5;
	/* Activity Fixed Value */
	uint32_t actfv : 2;
	/* Activity Detection */
	uint32_t actdet : 1;
	/* FSM Activation */
	uint32_t fsmact : 1;
	/* FSM Mode Select */
	uint32_t fsmmode : 1;
	/* Replenishment Address */
	uint32_t repladdr;
	/* SBM Return Address */
	uint32_t sbmaddr;
	/* BBM Return Address */
	uint32_t bbmaddr;
	/* Maximum POBUF Subtraction */
	uint32_t maxreqpobufsub : 18;
	/* Reserved */
	uint32_t res2 : 6;
	/* Packet Overhead */
	uint32_t packetoh : 8;
	/* Reserved */
	uint32_t res3 : 16;
	/* Careful Margin */
	uint32_t cmargin : 16;
	/* Reserved */
	uint32_t res4 : 3;
	/* Minimum Number of Free POBUF Segments */
	uint32_t minfreespace : 9;
	/* Reserved */
	uint32_t res5 : 2;
	/* Maximum POBUF Occupation per AIX */
	uint32_t maxperaix : 18;
	/* Reserved */
	uint32_t res6 : 19;
	/* Maximum DMA Descriptors (Careful) */
	uint32_t maxringcareful : 5;
	/* Reserved */
	uint32_t res7 : 3;
	/* Maximum DMA Descriptors (Normal) */
	uint32_t maxringnormal : 5;
	/* Maximum DMA Size (Normal) */
	uint32_t maxdmasizecareful : 16;
	/* Maximum DMA Size (Careful) */
	uint32_t maxdmasizenormal : 16;
	/* POBUF Level Check Enable Mask */
	uint32_t plevelcheck;
	/* POBUF Level In-Flight Enable Mask */
	uint32_t plevelinflight;
	/* POBUF Free Space In-Flight Enable Mask */
	uint32_t pfreespaceinflight;
#else
	/* FSM Mode Select */
	uint32_t fsmmode : 1;
	/* FSM Activation */
	uint32_t fsmact : 1;
	/* Activity Detection */
	uint32_t actdet : 1;
	/* Activity Fixed Value */
	uint32_t actfv : 2;
	/* Monitored AIX */
	uint32_t monitor : 5;
	/* Reserved */
	uint32_t res1 : 22;
	/* Replenishment Address */
	uint32_t repladdr;
	/* SBM Return Address */
	uint32_t sbmaddr;
	/* BBM Return Address */
	uint32_t bbmaddr;
	/* Packet Overhead */
	uint32_t packetoh : 8;
	/* Reserved */
	uint32_t res2 : 6;
	/* Maximum POBUF Subtraction */
	uint32_t maxreqpobufsub : 18;
	/* Careful Margin */
	uint32_t cmargin : 16;
	/* Reserved */
	uint32_t res3 : 16;
	/* Maximum POBUF Occupation per AIX */
	uint32_t maxperaix : 18;
	/* Reserved */
	uint32_t res5 : 2;
	/* Minimum Number of Free POBUF Segments */
	uint32_t minfreespace : 9;
	/* Reserved */
	uint32_t res4 : 3;
	/* Maximum DMA Descriptors (Normal) */
	uint32_t maxringnormal : 5;
	/* Reserved */
	uint32_t res7 : 3;
	/* Maximum DMA Descriptors (Careful) */
	uint32_t maxringcareful : 5;
	/* Reserved */
	uint32_t res6 : 19;
	/* Maximum DMA Size (Careful) */
	uint32_t maxdmasizenormal : 16;
	/* Maximum DMA Size (Normal) */
	uint32_t maxdmasizecareful : 16;
	/* POBUF Level Check Enable Mask */
	uint32_t plevelcheck;
	/* POBUF Level In-Flight Enable Mask */
	uint32_t plevelinflight;
	/* POBUF Free Space In-Flight Enable Mask */
	uint32_t pfreespaceinflight;
#endif
} __PACKED__;

/** Descriptor Controller Configuration Watermark */
#define PONFW_DESC_CONTROL_WMK_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x5A)
#define PONFW_DESC_CONTROL_WMK_CONFIG_LEN 172
/* Request Mode: FSM reacts only on requests coming from FW. */
#define PONFW_DESC_CONTROL_WMK_CONFIG_FSMMODE_REQUEST 0
/* Watermark Mode: FSM refills POBUF autonomously. */
#define PONFW_DESC_CONTROL_WMK_CONFIG_FSMMODE_WATERMARK 1

/* HW applicability of DESC_CONTROL_WMK_CONFIG */
#define PONFW_DESC_CONTROL_WMK_CONFIG_HW_PROP	PONFW_PROP_HW_TOPAZ

struct ponfw_desc_control_wmk_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 31;
	/* FSM Mode Select */
	uint32_t fsmmode : 1;
	/* Minimum Request Size for Priority Refill */
	uint32_t minsizep : 8;
	/* Reserved */
	uint32_t res2 : 6;
	/* Maximum Request Size for Priority Refill */
	uint32_t maxsizep : 18;
	/* Minimum Request Size for Background Refill */
	uint32_t minsizeb : 8;
	/* Reserved */
	uint32_t res3 : 6;
	/* Maximum Request Size for Background Refill */
	uint32_t maxsizeb : 18;
	/* Priority Refill Start */
	uint32_t priorefillstart : 16;
	/* Request Duration */
	uint32_t reqduration : 16;
	/* Reserved */
	uint32_t res4 : 16;
	/* Careful Margin */
	uint32_t cmargin : 16;
	/* Reserved */
	uint32_t res5 : 3;
	/* Minimum Number of Free POBUF Segments */
	uint32_t minfreespace : 9;
	/* Reserved */
	uint32_t res6 : 2;
	/* Maximum POBUF Occupation per AIX */
	uint32_t maxperaix : 18;
	/* Reserved */
	uint32_t res7 : 19;
	/* Maximum DMA Descriptors (Careful) */
	uint32_t maxringcareful : 5;
	/* Reserved */
	uint32_t res8 : 3;
	/* Maximum DMA Descriptors (Normal) */
	uint32_t maxringnormal : 5;
	/* Maximum DMA Size (Normal) */
	uint32_t maxdmasizecareful : 16;
	/* Maximum DMA Size (Careful) */
	uint32_t maxdmasizenormal : 16;
	/* POBUF Level Check Enable Mask */
	uint32_t plevelcheck;
	/* POBUF Level In-Flight Enable Mask */
	uint32_t plevelinflight;
	/* POBUF Free Space In-Flight Enable Mask */
	uint32_t pfreespaceinflight;
	/* Target POBUF Filling Level for AIX0 */
	uint32_t watermark00;
	/* Target POBUF Filling Level for AIX 1 */
	uint32_t watermark01;
	/* Target POBUF Filling Level for AIX 2 */
	uint32_t watermark02;
	/* Target POBUF Filling Level for AIX 3 */
	uint32_t watermark03;
	/* Target POBUF Filling Level for AIX 4 */
	uint32_t watermark04;
	/* Target POBUF Filling Level for AIX 5 */
	uint32_t watermark05;
	/* Target POBUF Filling Level for AIX 6 */
	uint32_t watermark06;
	/* Target POBUF Filling Level for AIX 7 */
	uint32_t watermark07;
	/* Target POBUF Filling Level for AIX 8 */
	uint32_t watermark08;
	/* Target POBUF Filling Level for AIX 9 */
	uint32_t watermark09;
	/* Target POBUF Filling Level for AIX 10 */
	uint32_t watermark10;
	/* Target POBUF Filling Level for AIX 11 */
	uint32_t watermark11;
	/* Target POBUF Filling Level for AIX 12 */
	uint32_t watermark12;
	/* Target POBUF Filling Level for AIX 13 */
	uint32_t watermark13;
	/* Target POBUF Filling Level for AIX 14 */
	uint32_t watermark14;
	/* Target POBUF Filling Level for AIX 15 */
	uint32_t watermark15;
	/* Target POBUF Filling Level for AIX 16 */
	uint32_t watermark16;
	/* Target POBUF Filling Level for AIX 17 */
	uint32_t watermark17;
	/* Target POBUF Filling Level for AIX 18 */
	uint32_t watermark18;
	/* Target POBUF Filling Level for AIX 19 */
	uint32_t watermark19;
	/* Target POBUF Filling Level for AIX 20 */
	uint32_t watermark20;
	/* Target POBUF Filling Level for AIX 21 */
	uint32_t watermark21;
	/* Target POBUF Filling Level for AIX 22 */
	uint32_t watermark22;
	/* Target POBUF Filling Level for AIX 23 */
	uint32_t watermark23;
	/* Target POBUF Filling Level for AIX 24 */
	uint32_t watermark24;
	/* Target POBUF Filling Level for AIX 25 */
	uint32_t watermark25;
	/* Target POBUF Filling Level for AIX 26 */
	uint32_t watermark26;
	/* Target POBUF Filling Level for AIX 27 */
	uint32_t watermark27;
	/* Target POBUF Filling Level for AIX 28 */
	uint32_t watermark28;
	/* Target POBUF Filling Level for AIX 29 */
	uint32_t watermark29;
	/* Target POBUF Filling Level for AIX 30 */
	uint32_t watermark30;
	/* Target POBUF Filling Level for AIX 31 */
	uint32_t watermark31;
#else
	/* FSM Mode Select */
	uint32_t fsmmode : 1;
	/* Reserved */
	uint32_t res1 : 31;
	/* Maximum Request Size for Priority Refill */
	uint32_t maxsizep : 18;
	/* Reserved */
	uint32_t res2 : 6;
	/* Minimum Request Size for Priority Refill */
	uint32_t minsizep : 8;
	/* Maximum Request Size for Background Refill */
	uint32_t maxsizeb : 18;
	/* Reserved */
	uint32_t res3 : 6;
	/* Minimum Request Size for Background Refill */
	uint32_t minsizeb : 8;
	/* Request Duration */
	uint32_t reqduration : 16;
	/* Priority Refill Start */
	uint32_t priorefillstart : 16;
	/* Careful Margin */
	uint32_t cmargin : 16;
	/* Reserved */
	uint32_t res4 : 16;
	/* Maximum POBUF Occupation per AIX */
	uint32_t maxperaix : 18;
	/* Reserved */
	uint32_t res6 : 2;
	/* Minimum Number of Free POBUF Segments */
	uint32_t minfreespace : 9;
	/* Reserved */
	uint32_t res5 : 3;
	/* Maximum DMA Descriptors (Normal) */
	uint32_t maxringnormal : 5;
	/* Reserved */
	uint32_t res8 : 3;
	/* Maximum DMA Descriptors (Careful) */
	uint32_t maxringcareful : 5;
	/* Reserved */
	uint32_t res7 : 19;
	/* Maximum DMA Size (Careful) */
	uint32_t maxdmasizenormal : 16;
	/* Maximum DMA Size (Normal) */
	uint32_t maxdmasizecareful : 16;
	/* POBUF Level Check Enable Mask */
	uint32_t plevelcheck;
	/* POBUF Level In-Flight Enable Mask */
	uint32_t plevelinflight;
	/* POBUF Free Space In-Flight Enable Mask */
	uint32_t pfreespaceinflight;
	/* Target POBUF Filling Level for AIX0 */
	uint32_t watermark00;
	/* Target POBUF Filling Level for AIX 1 */
	uint32_t watermark01;
	/* Target POBUF Filling Level for AIX 2 */
	uint32_t watermark02;
	/* Target POBUF Filling Level for AIX 3 */
	uint32_t watermark03;
	/* Target POBUF Filling Level for AIX 4 */
	uint32_t watermark04;
	/* Target POBUF Filling Level for AIX 5 */
	uint32_t watermark05;
	/* Target POBUF Filling Level for AIX 6 */
	uint32_t watermark06;
	/* Target POBUF Filling Level for AIX 7 */
	uint32_t watermark07;
	/* Target POBUF Filling Level for AIX 8 */
	uint32_t watermark08;
	/* Target POBUF Filling Level for AIX 9 */
	uint32_t watermark09;
	/* Target POBUF Filling Level for AIX 10 */
	uint32_t watermark10;
	/* Target POBUF Filling Level for AIX 11 */
	uint32_t watermark11;
	/* Target POBUF Filling Level for AIX 12 */
	uint32_t watermark12;
	/* Target POBUF Filling Level for AIX 13 */
	uint32_t watermark13;
	/* Target POBUF Filling Level for AIX 14 */
	uint32_t watermark14;
	/* Target POBUF Filling Level for AIX 15 */
	uint32_t watermark15;
	/* Target POBUF Filling Level for AIX 16 */
	uint32_t watermark16;
	/* Target POBUF Filling Level for AIX 17 */
	uint32_t watermark17;
	/* Target POBUF Filling Level for AIX 18 */
	uint32_t watermark18;
	/* Target POBUF Filling Level for AIX 19 */
	uint32_t watermark19;
	/* Target POBUF Filling Level for AIX 20 */
	uint32_t watermark20;
	/* Target POBUF Filling Level for AIX 21 */
	uint32_t watermark21;
	/* Target POBUF Filling Level for AIX 22 */
	uint32_t watermark22;
	/* Target POBUF Filling Level for AIX 23 */
	uint32_t watermark23;
	/* Target POBUF Filling Level for AIX 24 */
	uint32_t watermark24;
	/* Target POBUF Filling Level for AIX 25 */
	uint32_t watermark25;
	/* Target POBUF Filling Level for AIX 26 */
	uint32_t watermark26;
	/* Target POBUF Filling Level for AIX 27 */
	uint32_t watermark27;
	/* Target POBUF Filling Level for AIX 28 */
	uint32_t watermark28;
	/* Target POBUF Filling Level for AIX 29 */
	uint32_t watermark29;
	/* Target POBUF Filling Level for AIX 30 */
	uint32_t watermark30;
	/* Target POBUF Filling Level for AIX 31 */
	uint32_t watermark31;
#endif
} __PACKED__;

/** Accounting Block Configuration */
#define PONFW_ACCOUNTING_BLOCK_CONFIG_CMD_ID (PONFW_STD_ITUT | 0x5B)
#define PONFW_ACCOUNTING_BLOCK_CONFIG_LEN 8

/* HW applicability of ACCOUNTING_BLOCK_CONFIG */
#define PONFW_ACCOUNTING_BLOCK_CONFIG_HW_PROP	PONFW_PROP_HW_TOPAZ

struct ponfw_accounting_block_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 16;
	/* Packet Adder */
	uint32_t perpacketadder : 16;
	/* Inactive Sum */
	uint32_t inactivesum;
#else
	/* Packet Adder */
	uint32_t perpacketadder : 16;
	/* Reserved */
	uint32_t res : 16;
	/* Inactive Sum */
	uint32_t inactivesum;
#endif
} __PACKED__;

/** GEM Port ID */
#define PONFW_GEM_PORT_ID_CMD_ID (PONFW_STD_ITUT | 0x60)
#define PONFW_GEM_PORT_ID_LENW 12
#define PONFW_GEM_PORT_ID_LENR 4

/* Ethernet (G.989), Ethernet unicast (G.984) */
#define PONFW_GEM_PORT_ID_TT_ETH 0
/* OMCI (G.984, G.989) */
#define PONFW_GEM_PORT_ID_TT_OMCI 1
/* Ethernet multicast (G.984 only) */
#define PONFW_GEM_PORT_ID_TT_ETHM 2
/* Encryption disabled (G.984, G989) */
#define PONFW_GEM_PORT_ID_ENC_DIS 0
/* Unicast payload encryption in both directions (G.989 only) */
#define PONFW_GEM_PORT_ID_ENC_UC 1
/* Broadcast encryption (G.989 only) */
#define PONFW_GEM_PORT_ID_ENC_BC 2
/* Unicast encryption in downstream only (G.984, G.989) */
#define PONFW_GEM_PORT_ID_ENC_DSEN 3
/* Disabled (GEM port not used) */
#define PONFW_GEM_PORT_ID_DIR_DIS 0
/* Upstream (UNI-to-ANI) */
#define PONFW_GEM_PORT_ID_DIR_US 1
/* Downstream (ANI-to-UNI) */
#define PONFW_GEM_PORT_ID_DIR_DS 2
/* Bidirectional */
#define PONFW_GEM_PORT_ID_DIR_BI 3
/* Disable selecting a GEM port Index */
#define PONFW_GEM_PORT_ID_USE_IDX_DIS 0
/* Enable selecting a GEM port Index */
#define PONFW_GEM_PORT_ID_USE_IDX_EN 1

/* HW applicability of GEM_PORT_ID */
#define PONFW_GEM_PORT_ID_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gem_port_id {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Traffic type */
	uint32_t tt : 2;
	/* Encryption */
	uint32_t enc : 2;
	/* Direction */
	uint32_t dir : 2;
	/* Reserved */
	uint32_t res1 : 1;
	/* GEM port Index Select */
	uint32_t use_idx : 1;
	/* GEM port Index */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res2 : 2;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res3 : 2;
	/* Maximum GEM Payload Size */
	uint32_t max_gem_size : 14;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#else
	/* GEM port Index */
	uint32_t gem_port_idx : 8;
	/* GEM port Index Select */
	uint32_t use_idx : 1;
	/* Reserved */
	uint32_t res1 : 1;
	/* Direction */
	uint32_t dir : 2;
	/* Encryption */
	uint32_t enc : 2;
	/* Traffic type */
	uint32_t tt : 2;
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Maximum GEM Payload Size */
	uint32_t max_gem_size : 14;
	/* Reserved */
	uint32_t res3 : 2;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res2 : 2;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#endif
} __PACKED__;

/** GEM Port ID Remove */
#define PONFW_GEM_PORT_ID_REMOVE_CMD_ID (PONFW_STD_ITUT | 0x62)
#define PONFW_GEM_PORT_ID_REMOVE_LEN 4

/* HW applicability of GEM_PORT_ID_REMOVE */
#define PONFW_GEM_PORT_ID_REMOVE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gem_port_id_remove {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* GEM Port Index */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res : 8;
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
#else
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Reserved */
	uint32_t res : 8;
	/* GEM Port Index */
	uint32_t gem_port_idx : 8;
#endif
} __PACKED__;

/** Link Allocation ID to QoS Index */
#define PONFW_ALLOC_ID_LINK_CMD_ID (PONFW_STD_ITUT | 0x63)
#define PONFW_ALLOC_ID_LINK_LENW 8
#define PONFW_ALLOC_ID_LINK_LENR 4

/* Read the Allocation information only. Do not request usage of this
 * Allocation ID.
 */
#define PONFW_ALLOC_ID_LINK_CTR_READ 0
/* This modifies the ALLOC_ID state in the FW from ASSIGNED to LINKED or from
 * UNUSED to REQUESTED such that future removal of this ALLOC_ID requires the
 * SW to send the ALLOC_ID_UNLINK message to release this ALLOC_ID. Assigning
 * GEM ports requires the ALLOC_ID to be in LINKED state.
 */
#define PONFW_ALLOC_ID_LINK_CTR_LINK 1
/* Allocation ID creation is pending in state REQUESTED or ASSIGNED. Once the
 * status changes, this message is sent from FW to the SW to announce the
 * change and allow GEM port assignment. Exception: No message is sent if the
 * status changes back from ASSIGNED to UNUSED.
 */
#define PONFW_ALLOC_ID_LINK_HW_STATUS_REQUESTED 0
/* Allocation ID creation is complete. */
#define PONFW_ALLOC_ID_LINK_HW_STATUS_LINKED 1
/* Allocation ID creation is pending in state REQUESTED. Once the status
 * changes to REQUESTED, this message is sent from FW to the SW to announce
 * the change and allow GEM port assignment.
 */
#define PONFW_ALLOC_ID_LINK_LINK_STATUS_REQUESTED 0x0
/* Allocation ID creation is complete. */
#define PONFW_ALLOC_ID_LINK_LINK_STATUS_LINKED 0x1
/* Allocation ID has been received on PLOAM level but not yet configured by
 * OMCI. Once the status changes to ASSIGNED, this message is sent from FW to
 * the SW to announce the change and allow T-CONT assignment.
 */
#define PONFW_ALLOC_ID_LINK_LINK_STATUS_ASSIGNED 0x2

/* HW applicability of ALLOC_ID_LINK */
#define PONFW_ALLOC_ID_LINK_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alloc_id_link {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* QoS Index */
	uint32_t qos_idx : 8;
	/* Access Control */
	uint32_t ctr : 1;
	/* Allocation ID Hardware Status */
	uint32_t hw_status : 1;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Allocation Link Status */
	uint32_t link_status : 2;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#else
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Allocation Link Status */
	uint32_t link_status : 2;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Allocation ID Hardware Status */
	uint32_t hw_status : 1;
	/* Access Control */
	uint32_t ctr : 1;
	/* QoS Index */
	uint32_t qos_idx : 8;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#endif
} __PACKED__;

/** Unlink Allocation ID and QoS Index */
#define PONFW_ALLOC_ID_UNLINK_CMD_ID (PONFW_STD_ITUT | 0x64)
#define PONFW_ALLOC_ID_UNLINK_LEN 8

/* HW applicability of ALLOC_ID_UNLINK */
#define PONFW_ALLOC_ID_UNLINK_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alloc_id_unlink {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 17;
	/* All Allocations */
	uint32_t all : 1;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#else
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* All Allocations */
	uint32_t all : 1;
	/* Reserved */
	uint32_t res : 17;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#endif
} __PACKED__;

/** Allocation to GEM Mapping */
#define PONFW_ALLOC_TO_GEM_MAP_CMD_ID (PONFW_STD_ITUT | 0x66)
#define PONFW_ALLOC_TO_GEM_MAP_LENR 8
#define PONFW_ALLOC_TO_GEM_MAP_MAXLENR 508

/* This is the last response message. */
#define PONFW_ALLOC_TO_GEM_MAP_PEND_DONE 0x0
/* There are more GEM ports to be reported. */
#define PONFW_ALLOC_TO_GEM_MAP_PEND_PENDING 0x1

/* HW applicability of ALLOC_TO_GEM_MAP */
#define PONFW_ALLOC_TO_GEM_MAP_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alloc_to_gem_map {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Pending Transaction */
	uint32_t pend : 1;
	/* Reserved */
	uint32_t res1 : 17;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
	/* Reserved */
	uint32_t res2 : 16;
	/* GEM Port ID 1 */
	uint32_t gem_port_id1 : 16;
	/* Reserved */
	uint32_t res3 : 16;
	/* GEM Port ID N */
	uint32_t gem_port_id2 : 16;
#else
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res1 : 17;
	/* Pending Transaction */
	uint32_t pend : 1;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
	/* GEM Port ID 1 */
	uint32_t gem_port_id1 : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* GEM Port ID N */
	uint32_t gem_port_id2 : 16;
	/* Reserved */
	uint32_t res3 : 16;
#endif
} __PACKED__;

/** GEM to Allocation Mapping */
#define PONFW_GEM_ALLOC_MAP_CMD_ID (PONFW_STD_ITUT | 0x69)
#define PONFW_GEM_ALLOC_MAP_LENR 4
#define PONFW_GEM_ALLOC_MAP_LEN 8


/* HW applicability of GEM_ALLOC_MAP */
#define PONFW_GEM_ALLOC_MAP_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gem_alloc_map {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 2;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#else
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res : 2;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#endif
} __PACKED__;

/** GEM Port Index */
#define PONFW_GEM_PORT_IDX_CMD_ID (PONFW_STD_ITUT | 0x6A)
#define PONFW_GEM_PORT_IDX_LENR 4
#define PONFW_GEM_PORT_IDX_LEN 8

/* Ethernet (G.989), Ethernet unicast (G.984) */
#define PONFW_GEM_PORT_IDX_TT_ETH 0
/* OMCI (G.984, G.989) */
#define PONFW_GEM_PORT_IDX_TT_OMCI 1
/* Ethernet multicast (G.984 only) */
#define PONFW_GEM_PORT_IDX_TT_ETHM 2
/* Encryption disabled (G.984, G989) */
#define PONFW_GEM_PORT_IDX_ENC_DIS 0
/* Unicast payload encryption in both directions (G.989 only) */
#define PONFW_GEM_PORT_IDX_ENC_UC 1
/* Broadcast encryption (G.989 only) */
#define PONFW_GEM_PORT_IDX_ENC_BC 2
/* Unicast encryption in downstream only (G.984, G.989) */
#define PONFW_GEM_PORT_IDX_ENC_DSEN 3
/* Disabled (GEM port index is not used) */
#define PONFW_GEM_PORT_IDX_DIR_DIS 0
/* Upstream (UNI-to-ANI) */
#define PONFW_GEM_PORT_IDX_DIR_US 1
/* Downstream (ANI-to-UNI) */
#define PONFW_GEM_PORT_IDX_DIR_DS 2
/* Bidirectional */
#define PONFW_GEM_PORT_IDX_DIR_BI 3

/* HW applicability of GEM_PORT_IDX */
#define PONFW_GEM_PORT_IDX_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gem_port_idx {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Traffic Type */
	uint32_t tt : 2;
	/* Encryption */
	uint32_t enc : 2;
	/* Direction */
	uint32_t dir : 2;
	/* Reserved */
	uint32_t res1 : 2;
	/* GEM port Index */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res2 : 10;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Reserved */
	uint32_t res3 : 2;
	/* Maximum GEM Payload Size */
	uint32_t max_gem_size : 14;
#else
	/* GEM port Index */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res1 : 2;
	/* Direction */
	uint32_t dir : 2;
	/* Encryption */
	uint32_t enc : 2;
	/* Traffic Type */
	uint32_t tt : 2;
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Maximum GEM Payload Size */
	uint32_t max_gem_size : 14;
	/* Reserved */
	uint32_t res3 : 2;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Reserved */
	uint32_t res2 : 10;
#endif
} __PACKED__;

/** Allocation Index */
#define PONFW_ALLOC_IDX_CMD_ID (PONFW_STD_ITUT | 0x6B)
#define PONFW_ALLOC_IDX_LENR 4
#define PONFW_ALLOC_IDX_LEN 8

/* The Alloc ID has not been assigned by the OLT and is free to be used. In
 * this case ALLOC_ID and ALLOC_LINK_REF will return zero.
 */
#define PONFW_ALLOC_IDX_STATUS_UNUSED 0
/* The Alloc ID has been requested by the OLT through OMCI but the OLT has
 * not yet assigned this Alloc ID through PLOAM.
 */
#define PONFW_ALLOC_IDX_STATUS_REQUESTED 1
/* The Alloc ID has been assigned by the OLT trough PLOAM but the software
 * has not yet requested this for OMCI-controlled GEM port mapping. It can be
 * deleted through PLOAM without further notice to the software.
 */
#define PONFW_ALLOC_IDX_STATUS_ASSIGNED 2
/* The Alloc ID has been assigned by the OLT trough PLOAM and the software
 * has requested this for OMCI-controlled GEM port mapping. It cannot be
 * deleted through PLOAM without waiting for software confirmation through
 * ALLOC_ID_UNLINK.
 */
#define PONFW_ALLOC_IDX_STATUS_LINKED 3
/* The Alloc ID has been de-assigned by the OLT trough PLOAM but the software
 * has requested this for OMCI-controlled GEM port mapping. It cannot be
 * deleted through PLOAM without waiting for software confirmation through
 * ALLOC_ID_UNLINK.
 */
#define PONFW_ALLOC_IDX_STATUS_BLOCKED 4

/* HW applicability of ALLOC_IDX */
#define PONFW_ALLOC_IDX_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alloc_idx {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 2;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res2 : 7;
	/* Allocation Index Status Indication */
	uint32_t status : 3;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#else
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Allocation Index Status Indication */
	uint32_t status : 3;
	/* Reserved */
	uint32_t res2 : 7;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res1 : 2;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#endif
} __PACKED__;

/** GTC Counters */
#define PONFW_GTC_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x81)
#define PONFW_GTC_COUNTERS_LEN 68

/* HW applicability of GTC_COUNTERS */
#define PONFW_GTC_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gtc_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Downstream BIP errors */
	uint32_t ds_bip_err;
	/* Reserved */
	uint32_t res1 : 24;
	/* Ignored GEM/XGEM frames (ID14) */
	uint32_t dis_gem_hi : 8;
	/* Ignored GEM/XGEM frames (ID14) */
	uint32_t dis_gem_lo;
	/* Reserved */
	uint32_t res2 : 24;
	/* Corrected bytes (ID16) */
	uint32_t corr_bytes_hi : 8;
	/* Corrected bytes (lD16) */
	uint32_t corr_bytes_lo;
	/* Reserved */
	uint32_t res3 : 24;
	/* Corrected FEC codewords (ID17) */
	uint32_t corr_fec_cw_hi : 8;
	/* Corrected FEC codewords (ID17) */
	uint32_t corr_fec_cw_lo;
	/* Reserved */
	uint32_t res4 : 24;
	/* Uncorrectable FEC codewords (ID18) */
	uint32_t uncorr_fec_cw_hi : 8;
	/* Uncorrectable FEC codewords (ID18) */
	uint32_t uncorr_fec_cw_lo;
	/* Reserved */
	uint32_t res5 : 24;
	/* Total received frames (ID1) */
	uint32_t frames_total_hi : 8;
	/* Total received frames (ID1) */
	uint32_t frames_total_lo;
	/* Reserved */
	uint32_t res6 : 24;
	/* GEM/XGEM HEC Error count (ID9) */
	uint32_t gem_hec_err_hi : 8;
	/* GEM/XGEM HEC Error count (ID9) */
	uint32_t gem_hec_err_lo;
	/* FEC errored seconds */
	uint32_t fec_sec;
	/* Reserved */
	uint32_t res7 : 24;
	/* Idle GEM/XGEM frames (ID13) */
	uint32_t idle_gem_hi : 8;
	/* Idle GEM/XGEM frames (ID13) */
	uint32_t idle_gem_lo;
	/* PLOAM CRC Errors */
	uint32_t ploam_crc_err;
#else
	/* Downstream BIP errors */
	uint32_t ds_bip_err;
	/* Ignored GEM/XGEM frames (ID14) */
	uint32_t dis_gem_hi : 8;
	/* Reserved */
	uint32_t res1 : 24;
	/* Ignored GEM/XGEM frames (ID14) */
	uint32_t dis_gem_lo;
	/* Corrected bytes (ID16) */
	uint32_t corr_bytes_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Corrected bytes (lD16) */
	uint32_t corr_bytes_lo;
	/* Corrected FEC codewords (ID17) */
	uint32_t corr_fec_cw_hi : 8;
	/* Reserved */
	uint32_t res3 : 24;
	/* Corrected FEC codewords (ID17) */
	uint32_t corr_fec_cw_lo;
	/* Uncorrectable FEC codewords (ID18) */
	uint32_t uncorr_fec_cw_hi : 8;
	/* Reserved */
	uint32_t res4 : 24;
	/* Uncorrectable FEC codewords (ID18) */
	uint32_t uncorr_fec_cw_lo;
	/* Total received frames (ID1) */
	uint32_t frames_total_hi : 8;
	/* Reserved */
	uint32_t res5 : 24;
	/* Total received frames (ID1) */
	uint32_t frames_total_lo;
	/* GEM/XGEM HEC Error count (ID9) */
	uint32_t gem_hec_err_hi : 8;
	/* Reserved */
	uint32_t res6 : 24;
	/* GEM/XGEM HEC Error count (ID9) */
	uint32_t gem_hec_err_lo;
	/* FEC errored seconds */
	uint32_t fec_sec;
	/* Idle GEM/XGEM frames (ID13) */
	uint32_t idle_gem_hi : 8;
	/* Reserved */
	uint32_t res7 : 24;
	/* Idle GEM/XGEM frames (ID13) */
	uint32_t idle_gem_lo;
	/* PLOAM CRC Errors */
	uint32_t ploam_crc_err;
#endif
} __PACKED__;

/** XGTC Counters */
#define PONFW_XGTC_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x82)
#define PONFW_XGTC_COUNTERS_LEN 44

/* HW applicability of XGTC_COUNTERS */
#define PONFW_XGTC_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 24;
	/* Uncorrected PSBd HEC errors (ID2) */
	uint32_t psbd_err_uncorr_hi : 8;
	/* Uncorrected PSBd HEC errors (ID2) */
	uint32_t psbd_err_uncorr_lo;
	/* Reserved */
	uint32_t res2 : 24;
	/* Corrected PSBd HEC errors (ID4) */
	uint32_t psbd_err_corr_hi : 8;
	/* Corrected PSBd HEC errors (ID4) */
	uint32_t psbd_err_corr_lo;
	/* Reserved */
	uint32_t res3 : 24;
	/* Uncorrected FS HEC errors (ID3) */
	uint32_t fs_err_uncorr_hi : 8;
	/* Uncorrected FS HEC errors (ID3) */
	uint32_t fs_err_uncorr_lo;
	/* Reserved */
	uint32_t res4 : 24;
	/* Corrected FS HEC errors (ID5) */
	uint32_t fs_err_corr_hi : 8;
	/* Corrected FS HEC errors (ID5) */
	uint32_t fs_err_corr_lo;
	/* Reserved */
	uint32_t res5 : 24;
	/* Lost words due to uncorrectable HEC errors (ID7) */
	uint32_t lost_hec_wc_hi : 8;
	/* Lost words due to uncorrectable HEC errors (ID7) */
	uint32_t lost_hec_wc_lo;
	/* PLOAM MIC errors */
	uint32_t ploam_mic_err;
#else
	/* Uncorrected PSBd HEC errors (ID2) */
	uint32_t psbd_err_uncorr_hi : 8;
	/* Reserved */
	uint32_t res1 : 24;
	/* Uncorrected PSBd HEC errors (ID2) */
	uint32_t psbd_err_uncorr_lo;
	/* Corrected PSBd HEC errors (ID4) */
	uint32_t psbd_err_corr_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Corrected PSBd HEC errors (ID4) */
	uint32_t psbd_err_corr_lo;
	/* Uncorrected FS HEC errors (ID3) */
	uint32_t fs_err_uncorr_hi : 8;
	/* Reserved */
	uint32_t res3 : 24;
	/* Uncorrected FS HEC errors (ID3) */
	uint32_t fs_err_uncorr_lo;
	/* Corrected FS HEC errors (ID5) */
	uint32_t fs_err_corr_hi : 8;
	/* Reserved */
	uint32_t res4 : 24;
	/* Corrected FS HEC errors (ID5) */
	uint32_t fs_err_corr_lo;
	/* Lost words due to uncorrectable HEC errors (ID7) */
	uint32_t lost_hec_wc_hi : 8;
	/* Reserved */
	uint32_t res5 : 24;
	/* Lost words due to uncorrectable HEC errors (ID7) */
	uint32_t lost_hec_wc_lo;
	/* PLOAM MIC errors */
	uint32_t ploam_mic_err;
#endif
} __PACKED__;

/** GTC PLOAM Downstream Counters */
#define PONFW_GTC_PLOAM_DS_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x83)
#define PONFW_GTC_PLOAM_DS_COUNTERS_LEN 92

/* HW applicability of GTC_PLOAM_DS_COUNTERS */
#define PONFW_GTC_PLOAM_DS_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gtc_ploam_ds_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Upstream Overhead */
	uint32_t us_ovh;
	/* Assign ONU ID */
	uint32_t ass_onu;
	/* Ranging Time */
	uint32_t rng_time;
	/* Deactivate ONU ID */
	uint32_t deact_onu;
	/* Disable Serial Number */
	uint32_t dis_ser;
	/* Encrypted Port ID */
	uint32_t enc_gem_pid;
	/* Request Password */
	uint32_t req_pw;
	/* Assign Alloc ID */
	uint32_t ass_alloc;
	/* No Message */
	uint32_t no_msg;
	/* Popup */
	uint32_t popup;
	/* Request Key */
	uint32_t req_key;
	/* Configure Port ID */
	uint32_t cfg_port;
	/* Physical Equipment Error */
	uint32_t phy_ee;
	/* Change Power Level */
	uint32_t chg_pl;
	/* PST Message */
	uint32_t pst;
	/* BER Interval */
	uint32_t ber;
	/* Key Switching Time */
	uint32_t key_swtime;
	/* Extended Burst Length */
	uint32_t ext_burst;
	/* PON ID */
	uint32_t pon_id;
	/* Swift POPUP */
	uint32_t swift_popup;
	/* Ranging Adjust */
	uint32_t rng_adj;
	/* Sleep Allow */
	uint32_t slp_allow;
	/* Unknown PLOAM message */
	uint32_t unknown;
#else
	/* Upstream Overhead */
	uint32_t us_ovh;
	/* Assign ONU ID */
	uint32_t ass_onu;
	/* Ranging Time */
	uint32_t rng_time;
	/* Deactivate ONU ID */
	uint32_t deact_onu;
	/* Disable Serial Number */
	uint32_t dis_ser;
	/* Encrypted Port ID */
	uint32_t enc_gem_pid;
	/* Request Password */
	uint32_t req_pw;
	/* Assign Alloc ID */
	uint32_t ass_alloc;
	/* No Message */
	uint32_t no_msg;
	/* Popup */
	uint32_t popup;
	/* Request Key */
	uint32_t req_key;
	/* Configure Port ID */
	uint32_t cfg_port;
	/* Physical Equipment Error */
	uint32_t phy_ee;
	/* Change Power Level */
	uint32_t chg_pl;
	/* PST Message */
	uint32_t pst;
	/* BER Interval */
	uint32_t ber;
	/* Key Switching Time */
	uint32_t key_swtime;
	/* Extended Burst Length */
	uint32_t ext_burst;
	/* PON ID */
	uint32_t pon_id;
	/* Swift POPUP */
	uint32_t swift_popup;
	/* Ranging Adjust */
	uint32_t rng_adj;
	/* Sleep Allow */
	uint32_t slp_allow;
	/* Unknown PLOAM message */
	uint32_t unknown;
#endif
} __PACKED__;

/** GTC PLOAM Upstream Counters */
#define PONFW_GTC_PLOAM_US_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x84)
#define PONFW_GTC_PLOAM_US_COUNTERS_LEN 40

/* HW applicability of GTC_PLOAM_US_COUNTERS */
#define PONFW_GTC_PLOAM_US_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gtc_ploam_us_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Serial Number ONU */
	uint32_t ser_onu;
	/* Password */
	uint32_t password;
	/* Dying Gasp */
	uint32_t dyg_gasp;
	/* No Message */
	uint32_t no_msg;
	/* Encryption Key */
	uint32_t enc_key;
	/* Physical Equipment Error */
	uint32_t phy_ee;
	/* PST Message */
	uint32_t pst_msg;
	/* Remote Error Indication */
	uint32_t rem_err;
	/* Acknowledge */
	uint32_t ack;
	/* Sleep Request */
	uint32_t slp_req;
#else
	/* Serial Number ONU */
	uint32_t ser_onu;
	/* Password */
	uint32_t password;
	/* Dying Gasp */
	uint32_t dyg_gasp;
	/* No Message */
	uint32_t no_msg;
	/* Encryption Key */
	uint32_t enc_key;
	/* Physical Equipment Error */
	uint32_t phy_ee;
	/* PST Message */
	uint32_t pst_msg;
	/* Remote Error Indication */
	uint32_t rem_err;
	/* Acknowledge */
	uint32_t ack;
	/* Sleep Request */
	uint32_t slp_req;
#endif
} __PACKED__;

/** XGTC PLOAM Downstream Counters */
#define PONFW_XGTC_PLOAM_DS_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x85)
#define PONFW_XGTC_PLOAM_DS_COUNTERS_LEN 92

/* HW applicability of XGTC_PLOAM_DS_COUNTERS */
#define PONFW_XGTC_PLOAM_DS_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_ploam_ds_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Burst Profile */
	uint32_t bst_profile;
	/* Assign ONU ID */
	uint32_t ass_onu;
	/* Ranging Time */
	uint32_t rng_time;
	/* Deactivate ONU ID */
	uint32_t deact_onu;
	/* Disable Serial Number */
	uint32_t dis_ser;
	/* Request Registration */
	uint32_t req_reg;
	/* Assign Alloc ID */
	uint32_t ass_alloc;
	/* Key Control */
	uint32_t key_ctrl;
	/* Sleep Allow */
	uint32_t slp_allow;
	/* Calibration Request */
	uint32_t calib_req;
	/* Adjust Transmitter Wavelength */
	uint32_t adj_tx_wl;
	/* Tuning Control */
	uint32_t tune_ctrl;
	/* System Profile */
	uint32_t sys_profile;
	/* Channel Profile */
	uint32_t ch_profile;
	/* Protection Control */
	uint32_t prot_control;
	/* Change Power Level */
	uint32_t chg_pw_lvl;
	/* Power Consumption Inquire */
	uint32_t pw_cons;
	/* Rate Control */
	uint32_t rate_ctrl;
	/* Reboot ONU Message */
	uint32_t reboot_onu;
	/* Unknown PLOAM Message */
	uint32_t unknown;
	/* Adjust Transmitter Wavelength Failure */
	uint32_t adj_tx_wl_fail;
	/* Tuning Control Request */
	uint32_t tune_req;
	/* Tuning Control Complete */
	uint32_t tune_compl;
#else
	/* Burst Profile */
	uint32_t bst_profile;
	/* Assign ONU ID */
	uint32_t ass_onu;
	/* Ranging Time */
	uint32_t rng_time;
	/* Deactivate ONU ID */
	uint32_t deact_onu;
	/* Disable Serial Number */
	uint32_t dis_ser;
	/* Request Registration */
	uint32_t req_reg;
	/* Assign Alloc ID */
	uint32_t ass_alloc;
	/* Key Control */
	uint32_t key_ctrl;
	/* Sleep Allow */
	uint32_t slp_allow;
	/* Calibration Request */
	uint32_t calib_req;
	/* Adjust Transmitter Wavelength */
	uint32_t adj_tx_wl;
	/* Tuning Control */
	uint32_t tune_ctrl;
	/* System Profile */
	uint32_t sys_profile;
	/* Channel Profile */
	uint32_t ch_profile;
	/* Protection Control */
	uint32_t prot_control;
	/* Change Power Level */
	uint32_t chg_pw_lvl;
	/* Power Consumption Inquire */
	uint32_t pw_cons;
	/* Rate Control */
	uint32_t rate_ctrl;
	/* Reboot ONU Message */
	uint32_t reboot_onu;
	/* Unknown PLOAM Message */
	uint32_t unknown;
	/* Adjust Transmitter Wavelength Failure */
	uint32_t adj_tx_wl_fail;
	/* Tuning Control Request */
	uint32_t tune_req;
	/* Tuning Control Complete */
	uint32_t tune_compl;
#endif
} __PACKED__;

/** XGTC PLOAM Upstream Counters */
#define PONFW_XGTC_PLOAM_US_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x86)
#define PONFW_XGTC_PLOAM_US_COUNTERS_LEN 44

/* HW applicability of XGTC_PLOAM_US_COUNTERS */
#define PONFW_XGTC_PLOAM_US_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgtc_ploam_us_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Serial Number ONU */
	uint32_t ser_onu;
	/* Registration */
	uint32_t reg;
	/* Key Report */
	uint32_t key_rep;
	/* Acknowledge */
	uint32_t ack;
	/* Sleep Request */
	uint32_t slp_req;
	/* Tuning Response */
	uint32_t tun_res;
	/* Power Consumption Report */
	uint32_t pw_cons;
	/* Rate Response */
	uint32_t rate_resp;
	/* Change Power Level Parameter Error Response */
	uint32_t cpl_err;
	/* Tuning Response ACK or NACK */
	uint32_t tun_res_an;
	/* Tuning Response Complete or Rollback */
	uint32_t tun_res_crb;
#else
	/* Serial Number ONU */
	uint32_t ser_onu;
	/* Registration */
	uint32_t reg;
	/* Key Report */
	uint32_t key_rep;
	/* Acknowledge */
	uint32_t ack;
	/* Sleep Request */
	uint32_t slp_req;
	/* Tuning Response */
	uint32_t tun_res;
	/* Power Consumption Report */
	uint32_t pw_cons;
	/* Rate Response */
	uint32_t rate_resp;
	/* Change Power Level Parameter Error Response */
	uint32_t cpl_err;
	/* Tuning Response ACK or NACK */
	uint32_t tun_res_an;
	/* Tuning Response Complete or Rollback */
	uint32_t tun_res_crb;
#endif
} __PACKED__;

/** GEM Port Counters */
#define PONFW_GEM_PORT_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x87)
#define PONFW_GEM_PORT_COUNTERS_LENR 4
#define PONFW_GEM_PORT_COUNTERS_LEN 60


/* HW applicability of GEM_PORT_COUNTERS */
#define PONFW_GEM_PORT_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gem_port_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 24;
	/* GEM/XGEM Port IDX */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Transmitted GEM/XGEM frame fragments (ID58) */
	uint32_t tx_gem_frag_hi : 8;
	/* Transmitted GEM/XGEM frame fragments (ID58) */
	uint32_t tx_gem_frag_lo;
	/* Reserved */
	uint32_t res3 : 24;
	/* Transmitted GEM/XGEM frames (ID59) */
	uint32_t tx_gem_fram_hi : 8;
	/* Transmitted GEM/XGEM frames (ID59) */
	uint32_t tx_gem_fram_lo;
	/* Reserved */
	uint32_t res4 : 24;
	/* Transmitted GEM/XGEM payload bytes (ID60) */
	uint32_t tx_bytes_hi : 8;
	/* Transmitted GEM/XGEM payload bytes (ID60) */
	uint32_t tx_bytes_lo;
	/* Reserved */
	uint32_t res5 : 24;
	/* Received GEM/XGEM frame fragments (ID61) */
	uint32_t rx_gem_frag_hi : 8;
	/* Received GEM/XGEM frame fragments (ID61) */
	uint32_t rx_gem_frag_lo;
	/* Reserved */
	uint32_t res6 : 24;
	/* Received GEM/XGEM frames (ID62) */
	uint32_t rx_gem_fram_hi : 8;
	/* Received GEM/XGEM frames (ID62) */
	uint32_t rx_gem_fram_lo;
	/* Reserved */
	uint32_t res7 : 24;
	/* Received GEM/XGEM payload bytes (ID63) */
	uint32_t rx_bytes_hi : 8;
	/* Received GEM/XGEM payload bytes (lID63) */
	uint32_t rx_bytes_lo;
	/* Reserved */
	uint32_t res8 : 24;
	/* Downstream XGEM key errors (ID57) */
	uint32_t ds_xgem_key_err_hi : 8;
	/* Downstream XGEM key errors (ID57) */
	uint32_t ds_xgem_key_err_lo;
#else
	/* GEM/XGEM Port IDX */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res1 : 24;
	/* Transmitted GEM/XGEM frame fragments (ID58) */
	uint32_t tx_gem_frag_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Transmitted GEM/XGEM frame fragments (ID58) */
	uint32_t tx_gem_frag_lo;
	/* Transmitted GEM/XGEM frames (ID59) */
	uint32_t tx_gem_fram_hi : 8;
	/* Reserved */
	uint32_t res3 : 24;
	/* Transmitted GEM/XGEM frames (ID59) */
	uint32_t tx_gem_fram_lo;
	/* Transmitted GEM/XGEM payload bytes (ID60) */
	uint32_t tx_bytes_hi : 8;
	/* Reserved */
	uint32_t res4 : 24;
	/* Transmitted GEM/XGEM payload bytes (ID60) */
	uint32_t tx_bytes_lo;
	/* Received GEM/XGEM frame fragments (ID61) */
	uint32_t rx_gem_frag_hi : 8;
	/* Reserved */
	uint32_t res5 : 24;
	/* Received GEM/XGEM frame fragments (ID61) */
	uint32_t rx_gem_frag_lo;
	/* Received GEM/XGEM frames (ID62) */
	uint32_t rx_gem_fram_hi : 8;
	/* Reserved */
	uint32_t res6 : 24;
	/* Received GEM/XGEM frames (ID62) */
	uint32_t rx_gem_fram_lo;
	/* Received GEM/XGEM payload bytes (ID63) */
	uint32_t rx_bytes_hi : 8;
	/* Reserved */
	uint32_t res7 : 24;
	/* Received GEM/XGEM payload bytes (lID63) */
	uint32_t rx_bytes_lo;
	/* Downstream XGEM key errors (ID57) */
	uint32_t ds_xgem_key_err_hi : 8;
	/* Reserved */
	uint32_t res8 : 24;
	/* Downstream XGEM key errors (ID57) */
	uint32_t ds_xgem_key_err_lo;
#endif
} __PACKED__;

/** Power Save State Machine Counters */
#define PONFW_PSM_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x88)
#define PONFW_PSM_COUNTERS_LEN 24

/* HW applicability of PSM_COUNTERS */
#define PONFW_PSM_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_psm_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Doze time counter high (64 bit) */
	uint32_t doze_hi;
	/* Doze time counter low (64 bit) */
	uint32_t doze_lo;
	/* Cyclic sleep time counter high (64 bit) */
	uint32_t cyclic_hi;
	/* Cyclic sleep time counter low (64 bit) */
	uint32_t cyclic_lo;
	/* Watchful sleep time counter high (64 bit) */
	uint32_t watchful_hi;
	/* Watchful sleep time counter low (64 bit) */
	uint32_t watchful_lo;
#else
	/* Doze time counter high (64 bit) */
	uint32_t doze_hi;
	/* Doze time counter low (64 bit) */
	uint32_t doze_lo;
	/* Cyclic sleep time counter high (64 bit) */
	uint32_t cyclic_hi;
	/* Cyclic sleep time counter low (64 bit) */
	uint32_t cyclic_lo;
	/* Watchful sleep time counter high (64 bit) */
	uint32_t watchful_hi;
	/* Watchful sleep time counter low (64 bit) */
	uint32_t watchful_lo;
#endif
} __PACKED__;

/** GTC Enhanced Counter */
#define PONFW_GTC_ENHANCED_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x89)
#define PONFW_GTC_ENHANCED_COUNTERS_LEN 24

/* HW applicability of GTC_ENHANCED_COUNTERS */
#define PONFW_GTC_ENHANCED_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_gtc_enhanced_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 24;
	/* Corrected GEM HEC errors (ID27) */
	uint32_t gem_hec_err_corr_hi : 8;
	/* Corrected GEM HEC errors (ID27) */
	uint32_t gem_hec_err_corr_lo;
	/* Reserved */
	uint32_t res2 : 24;
	/* Corrected bandwidth map errors (ID28) */
	uint32_t bwmap_err_corr_hi : 8;
	/* Corrected bandwidth map errors (ID28) */
	uint32_t bwmap_err_corr_lo;
	/* Total number of LODS/LOF events */
	uint32_t total_lods_lof;
	/* Total time of Dying Gasp activation */
	uint32_t dg_time;
#else
	/* Corrected GEM HEC errors (ID27) */
	uint32_t gem_hec_err_corr_hi : 8;
	/* Reserved */
	uint32_t res1 : 24;
	/* Corrected GEM HEC errors (ID27) */
	uint32_t gem_hec_err_corr_lo;
	/* Corrected bandwidth map errors (ID28) */
	uint32_t bwmap_err_corr_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Corrected bandwidth map errors (ID28) */
	uint32_t bwmap_err_corr_lo;
	/* Total number of LODS/LOF events */
	uint32_t total_lods_lof;
	/* Total time of Dying Gasp activation */
	uint32_t dg_time;
#endif
} __PACKED__;

/** Alloc ID Counters */
#define PONFW_ALLOC_ID_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x8A)
#define PONFW_ALLOC_ID_COUNTERS_LENR 4
#define PONFW_ALLOC_ID_COUNTERS_LEN 20


/* HW applicability of ALLOC_ID_COUNTERS */
#define PONFW_ALLOC_ID_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alloc_id_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 26;
	/* Alloc Index */
	uint32_t alloc_idx : 6;
	/* Reserved */
	uint32_t res2 : 24;
	/* Upstream GEM idle frames (ID55) */
	uint32_t us_gem_idle_hi : 8;
	/* Upstream GEM idle frames (ID55) */
	uint32_t us_gem_idle_lo;
	/* Reserved */
	uint32_t res3 : 24;
	/* Received T-CONT Allocations (ID56) */
	uint32_t rec_tcont_alloc_hi : 8;
	/* Received T-CONT Allocations (ID56) */
	uint32_t rec_tcont_alloc_lo;
#else
	/* Alloc Index */
	uint32_t alloc_idx : 6;
	/* Reserved */
	uint32_t res1 : 26;
	/* Upstream GEM idle frames (ID55) */
	uint32_t us_gem_idle_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Upstream GEM idle frames (ID55) */
	uint32_t us_gem_idle_lo;
	/* Received T-CONT Allocations (ID56) */
	uint32_t rec_tcont_alloc_hi : 8;
	/* Reserved */
	uint32_t res3 : 24;
	/* Received T-CONT Allocations (ID56) */
	uint32_t rec_tcont_alloc_lo;
#endif
} __PACKED__;

/** Received Ethernet Counters at WAN Side */
#define PONFW_RX_ETH_COUNTERS_CMD_ID (0x8B)
#define PONFW_RX_ETH_COUNTERS_LENR 4
#define PONFW_RX_ETH_COUNTERS_LEN 100


/* HW applicability of RX_ETH_COUNTERS */
#define PONFW_RX_ETH_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_rx_eth_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 24;
	/* Index */
	uint32_t gem_idx : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Received Ethernet Payload Bytes (ID65) */
	uint32_t rx_eth_bytes_hi : 8;
	/* Received Ethernet Payload Bytes (ID65) */
	uint32_t rx_eth_bytes_lo;
	/* Reserved */
	uint32_t res3 : 24;
	/* Received Ethernet Frames <64 bytes (ID66) */
	uint32_t rx_eth_fr_lt64_hi : 8;
	/* Received Ethernet Frames <64 bytes (ID66) */
	uint32_t rx_eth_fr_lt64_lo;
	/* Reserved */
	uint32_t res4 : 24;
	/* Received Ethernet Frames 64 bytes (ID670) */
	uint32_t rx_eth_fr_eq64_hi : 8;
	/* Received Ethernet Frames 64 bytes (ID670) */
	uint32_t rx_eth_fr_eq64_lo;
	/* Reserved */
	uint32_t res5 : 24;
	/* Received Ethernet Frames 65 to 127 bytes (ID671) */
	uint32_t rx_eth_fr_lt128_hi : 8;
	/* Received Ethernet Frames 65 to 127 bytes (ID671) */
	uint32_t rx_eth_fr_lt128_lo;
	/* Reserved */
	uint32_t res6 : 24;
	/* Received Ethernet Frames 128 to 255 bytes (ID68) */
	uint32_t rx_eth_fr_lt256_hi : 8;
	/* Received Ethernet Frames 128 to 255 bytes (ID68) */
	uint32_t rx_eth_fr_lt256_lo;
	/* Reserved */
	uint32_t res7 : 24;
	/* Received Ethernet Frames 256 to 511 bytes (ID69) */
	uint32_t rx_eth_fr_lt512_hi : 8;
	/* Received Ethernet Frames 256 to 511 bytes (ID69) */
	uint32_t rx_eth_fr_lt512_lo;
	/* Reserved */
	uint32_t res8 : 24;
	/* Received Ethernet Frames 512 to 1023 bytes (ID70) */
	uint32_t rx_eth_fr_lt1k_hi : 8;
	/* Received Ethernet Frames 512 to 1023 bytes (ID70) */
	uint32_t rx_eth_fr_lt1k_lo;
	/* Reserved */
	uint32_t res9 : 24;
	/* Received Ethernet Frames 1024 to 1518 bytes (ID71) */
	uint32_t rx_eth_fr_lt1k5_hi : 8;
	/* Received Ethernet Frames 1024 to 1518 bytes (ID71) */
	uint32_t rx_eth_fr_lt1k5_lo;
	/* Reserved */
	uint32_t res10 : 24;
	/* Received Ethernet Frames with more than 1518 bytes (ID72) */
	uint32_t rx_eth_fr_gt1k5_hi : 8;
	/* Received Ethernet Frames with more than 1518 bytes (ID72) */
	uint32_t rx_eth_fr_gt1k5_lo;
	/* Reserved */
	uint32_t res11 : 24;
	/* Received Ethernet Frames with incorrect FCS (ID84) */
	uint32_t rx_eth_fcs_err_hi : 8;
	/* Received Ethernet Frames with incorrect FCS (ID84) */
	uint32_t rx_eth_fcs_err_lo;
	/* Reserved */
	uint32_t res12 : 24;
	/* Received Number of bytes in Ethernet Frames with incorrect FCS
	 * (ID85)
	 */
	uint32_t rx_eth_fcs_bytes_hi : 8;
	/* Received Number of bytes in Ethernet Frames with incorrect FCS
	 * (ID85)
	 */
	uint32_t rx_eth_fcs_bytes_lo;
	/* Reserved */
	uint32_t res13 : 24;
	/* Received Too Long Ethernet Frames (ID86) */
	uint32_t rx_eth_too_long_hi : 8;
	/* Received Too Long Ethernet Frames (ID86) */
	uint32_t rx_eth_too_long_lo;
#else
	/* Index */
	uint32_t gem_idx : 8;
	/* Reserved */
	uint32_t res1 : 24;
	/* Received Ethernet Payload Bytes (ID65) */
	uint32_t rx_eth_bytes_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Received Ethernet Payload Bytes (ID65) */
	uint32_t rx_eth_bytes_lo;
	/* Received Ethernet Frames <64 bytes (ID66) */
	uint32_t rx_eth_fr_lt64_hi : 8;
	/* Reserved */
	uint32_t res3 : 24;
	/* Received Ethernet Frames <64 bytes (ID66) */
	uint32_t rx_eth_fr_lt64_lo;
	/* Received Ethernet Frames 64 bytes (ID670) */
	uint32_t rx_eth_fr_eq64_hi : 8;
	/* Reserved */
	uint32_t res4 : 24;
	/* Received Ethernet Frames 64 bytes (ID670) */
	uint32_t rx_eth_fr_eq64_lo;
	/* Received Ethernet Frames 65 to 127 bytes (ID671) */
	uint32_t rx_eth_fr_lt128_hi : 8;
	/* Reserved */
	uint32_t res5 : 24;
	/* Received Ethernet Frames 65 to 127 bytes (ID671) */
	uint32_t rx_eth_fr_lt128_lo;
	/* Received Ethernet Frames 128 to 255 bytes (ID68) */
	uint32_t rx_eth_fr_lt256_hi : 8;
	/* Reserved */
	uint32_t res6 : 24;
	/* Received Ethernet Frames 128 to 255 bytes (ID68) */
	uint32_t rx_eth_fr_lt256_lo;
	/* Received Ethernet Frames 256 to 511 bytes (ID69) */
	uint32_t rx_eth_fr_lt512_hi : 8;
	/* Reserved */
	uint32_t res7 : 24;
	/* Received Ethernet Frames 256 to 511 bytes (ID69) */
	uint32_t rx_eth_fr_lt512_lo;
	/* Received Ethernet Frames 512 to 1023 bytes (ID70) */
	uint32_t rx_eth_fr_lt1k_hi : 8;
	/* Reserved */
	uint32_t res8 : 24;
	/* Received Ethernet Frames 512 to 1023 bytes (ID70) */
	uint32_t rx_eth_fr_lt1k_lo;
	/* Received Ethernet Frames 1024 to 1518 bytes (ID71) */
	uint32_t rx_eth_fr_lt1k5_hi : 8;
	/* Reserved */
	uint32_t res9 : 24;
	/* Received Ethernet Frames 1024 to 1518 bytes (ID71) */
	uint32_t rx_eth_fr_lt1k5_lo;
	/* Received Ethernet Frames with more than 1518 bytes (ID72) */
	uint32_t rx_eth_fr_gt1k5_hi : 8;
	/* Reserved */
	uint32_t res10 : 24;
	/* Received Ethernet Frames with more than 1518 bytes (ID72) */
	uint32_t rx_eth_fr_gt1k5_lo;
	/* Received Ethernet Frames with incorrect FCS (ID84) */
	uint32_t rx_eth_fcs_err_hi : 8;
	/* Reserved */
	uint32_t res11 : 24;
	/* Received Ethernet Frames with incorrect FCS (ID84) */
	uint32_t rx_eth_fcs_err_lo;
	/* Received Number of bytes in Ethernet Frames with incorrect FCS
	 * (ID85)
	 */
	uint32_t rx_eth_fcs_bytes_hi : 8;
	/* Reserved */
	uint32_t res12 : 24;
	/* Received Number of bytes in Ethernet Frames with incorrect FCS
	 * (ID85)
	 */
	uint32_t rx_eth_fcs_bytes_lo;
	/* Received Too Long Ethernet Frames (ID86) */
	uint32_t rx_eth_too_long_hi : 8;
	/* Reserved */
	uint32_t res13 : 24;
	/* Received Too Long Ethernet Frames (ID86) */
	uint32_t rx_eth_too_long_lo;
#endif
} __PACKED__;

/** Transmitted Ethernet Counters at WAN Side */
#define PONFW_TX_ETH_COUNTERS_CMD_ID (0x8C)
#define PONFW_TX_ETH_COUNTERS_LENR 4
#define PONFW_TX_ETH_COUNTERS_LEN 76


/* HW applicability of TX_ETH_COUNTERS */
#define PONFW_TX_ETH_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_tx_eth_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 24;
	/* IDX */
	uint32_t idx : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Transmitted Ethernet Payload Bytes (ID74) */
	uint32_t tx_eth_bytes_hi : 8;
	/* Transmitted Ethernet Payload Bytes (ID74) */
	uint32_t tx_eth_bytes_lo;
	/* Reserved */
	uint32_t res3 : 24;
	/* Transmitted Ethernet Frames <64 bytes (ID75) */
	uint32_t tx_eth_fr_lt64_hi : 8;
	/* Transmitted Ethernet Frames <64 bytes (ID75) */
	uint32_t tx_eth_fr_lt64_lo;
	/* Reserved */
	uint32_t res4 : 24;
	/* Transmitted Ethernet Frames 64 bytes (IDx760) */
	uint32_t tx_eth_fr_eq64_hi : 8;
	/* Transmitted Ethernet Frames 64 bytes (ID760) */
	uint32_t tx_eth_fr_eq64_lo;
	/* Reserved */
	uint32_t res5 : 24;
	/* Transmitted Ethernet Frames 65 to 127 bytes (ID761) */
	uint32_t tx_eth_fr_lt128_hi : 8;
	/* Transmitted Ethernet Frames 65 to 127 bytes (ID761) */
	uint32_t tx_eth_fr_lt128_lo;
	/* Reserved */
	uint32_t res6 : 24;
	/* Transmitted Ethernet Frames 128 to 255 bytes (ID77) */
	uint32_t tx_eth_fr_lt256_hi : 8;
	/* Transmitted Ethernet Frames 128 to 255 bytes (ID77) */
	uint32_t tx_eth_fr_lt256_lo;
	/* Reserved */
	uint32_t res7 : 24;
	/* Transmitted Ethernet Frames 256 to 511 bytes (ID78) */
	uint32_t tx_eth_fr_lt512_hi : 8;
	/* Transmitted Ethernet Frames 256 to 511 bytes (ID78) */
	uint32_t tx_eth_fr_lt512_lo;
	/* Reserved */
	uint32_t res8 : 24;
	/* Transmitted Ethernet Frames 512 to 1023 bytes (ID79) */
	uint32_t tx_eth_fr_lt1k_hi : 8;
	/* Transmitted Ethernet Frames 512 to 1023 bytes (ID79) */
	uint32_t tx_eth_fr_lt1k_lo;
	/* Reserved */
	uint32_t res9 : 24;
	/* Transmitted Ethernet Frames 1024 to 1518 bytes (ID80) */
	uint32_t tx_eth_fr_lt1k5_hi : 8;
	/* Transmitted Ethernet Frames 1024 to 1518 bytes (ID80) */
	uint32_t tx_eth_fr_lt1k5_lo;
	/* Reserved */
	uint32_t res10 : 24;
	/* Transmitted Ethernet Frames with more than 1518 bytes (ID81) */
	uint32_t tx_eth_fr_gt1k5_hi : 8;
	/* Transmitted Ethernet Frames with more than 1518 bytes (ID81) */
	uint32_t tx_eth_fr_gt1k5_lo;
#else
	/* IDX */
	uint32_t idx : 8;
	/* Reserved */
	uint32_t res1 : 24;
	/* Transmitted Ethernet Payload Bytes (ID74) */
	uint32_t tx_eth_bytes_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Transmitted Ethernet Payload Bytes (ID74) */
	uint32_t tx_eth_bytes_lo;
	/* Transmitted Ethernet Frames <64 bytes (ID75) */
	uint32_t tx_eth_fr_lt64_hi : 8;
	/* Reserved */
	uint32_t res3 : 24;
	/* Transmitted Ethernet Frames <64 bytes (ID75) */
	uint32_t tx_eth_fr_lt64_lo;
	/* Transmitted Ethernet Frames 64 bytes (IDx760) */
	uint32_t tx_eth_fr_eq64_hi : 8;
	/* Reserved */
	uint32_t res4 : 24;
	/* Transmitted Ethernet Frames 64 bytes (ID760) */
	uint32_t tx_eth_fr_eq64_lo;
	/* Transmitted Ethernet Frames 65 to 127 bytes (ID761) */
	uint32_t tx_eth_fr_lt128_hi : 8;
	/* Reserved */
	uint32_t res5 : 24;
	/* Transmitted Ethernet Frames 65 to 127 bytes (ID761) */
	uint32_t tx_eth_fr_lt128_lo;
	/* Transmitted Ethernet Frames 128 to 255 bytes (ID77) */
	uint32_t tx_eth_fr_lt256_hi : 8;
	/* Reserved */
	uint32_t res6 : 24;
	/* Transmitted Ethernet Frames 128 to 255 bytes (ID77) */
	uint32_t tx_eth_fr_lt256_lo;
	/* Transmitted Ethernet Frames 256 to 511 bytes (ID78) */
	uint32_t tx_eth_fr_lt512_hi : 8;
	/* Reserved */
	uint32_t res7 : 24;
	/* Transmitted Ethernet Frames 256 to 511 bytes (ID78) */
	uint32_t tx_eth_fr_lt512_lo;
	/* Transmitted Ethernet Frames 512 to 1023 bytes (ID79) */
	uint32_t tx_eth_fr_lt1k_hi : 8;
	/* Reserved */
	uint32_t res8 : 24;
	/* Transmitted Ethernet Frames 512 to 1023 bytes (ID79) */
	uint32_t tx_eth_fr_lt1k_lo;
	/* Transmitted Ethernet Frames 1024 to 1518 bytes (ID80) */
	uint32_t tx_eth_fr_lt1k5_hi : 8;
	/* Reserved */
	uint32_t res9 : 24;
	/* Transmitted Ethernet Frames 1024 to 1518 bytes (ID80) */
	uint32_t tx_eth_fr_lt1k5_lo;
	/* Transmitted Ethernet Frames with more than 1518 bytes (ID81) */
	uint32_t tx_eth_fr_gt1k5_hi : 8;
	/* Reserved */
	uint32_t res10 : 24;
	/* Transmitted Ethernet Frames with more than 1518 bytes (ID81) */
	uint32_t tx_eth_fr_gt1k5_lo;
#endif
} __PACKED__;

/** Allocation Lost Counters */
#define PONFW_ALLOC_LOST_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x8D)
#define PONFW_ALLOC_LOST_COUNTERS_LEN 116

/* HW applicability of ALLOC_LOST_COUNTERS */
#define PONFW_ALLOC_LOST_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_alloc_lost_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 24;
	/* Discard 0 Counter */
	uint32_t discard0_hi : 8;
	/* Discard 0 Counter */
	uint32_t discard0_lo;
	/* Reserved */
	uint32_t res2 : 24;
	/* Discard 1 Counter */
	uint32_t discard1_hi : 8;
	/* Discard 1 Counter */
	uint32_t discard1_lo;
	/* Reserved */
	uint32_t res3 : 24;
	/* Discard 2 Counter */
	uint32_t discard2_hi : 8;
	/* Discard 2 Counter */
	uint32_t discard2_lo;
	/* Reserved */
	uint32_t res4 : 24;
	/* Discard 3 Counter */
	uint32_t discard3_hi : 8;
	/* Discard 3 Counter */
	uint32_t discard3_lo;
	/* Reserved */
	uint32_t res5 : 24;
	/* Discard 4 Counter */
	uint32_t discard4_hi : 8;
	/* Discard 4 Counter */
	uint32_t discard4_lo;
	/* Reserved */
	uint32_t res6 : 24;
	/* Discard 5 Counter */
	uint32_t discard5_hi : 8;
	/* Discard 5 Counter */
	uint32_t discard5_lo;
	/* Reserved */
	uint32_t res7 : 24;
	/* Discard 6 Counter */
	uint32_t discard6_hi : 8;
	/* Discard 6 Counter */
	uint32_t discard6_lo;
	/* Reserved */
	uint32_t res8 : 24;
	/* Discard 7 Counter */
	uint32_t discard7_hi : 8;
	/* Discard 7 Counter */
	uint32_t discard7_lo;
	/* Rule 2 Counter */
	uint32_t rule2;
	/* Rule 4 Counter */
	uint32_t rule4;
	/* Rule 6 Counter */
	uint32_t rule6;
	/* Rule 7 Counter */
	uint32_t rule7;
	/* Rule 8 Counter */
	uint32_t rule8;
	/* Rule 9 Counter */
	uint32_t rule9;
	/* Rule 10 Counter */
	uint32_t rule10;
	/* Rule 11 Counter */
	uint32_t rule11;
	/* Customized Rule 12 Counter */
	uint32_t rule12;
	/* Customized Rule 13 Counter */
	uint32_t rule13;
	/* Customized Rule 14 Counter */
	uint32_t rule14;
	/* Customized Rule 15 Counter */
	uint32_t rule15;
	/* Customized Rule 16 Counter */
	uint32_t rule16;
#else
	/* Discard 0 Counter */
	uint32_t discard0_hi : 8;
	/* Reserved */
	uint32_t res1 : 24;
	/* Discard 0 Counter */
	uint32_t discard0_lo;
	/* Discard 1 Counter */
	uint32_t discard1_hi : 8;
	/* Reserved */
	uint32_t res2 : 24;
	/* Discard 1 Counter */
	uint32_t discard1_lo;
	/* Discard 2 Counter */
	uint32_t discard2_hi : 8;
	/* Reserved */
	uint32_t res3 : 24;
	/* Discard 2 Counter */
	uint32_t discard2_lo;
	/* Discard 3 Counter */
	uint32_t discard3_hi : 8;
	/* Reserved */
	uint32_t res4 : 24;
	/* Discard 3 Counter */
	uint32_t discard3_lo;
	/* Discard 4 Counter */
	uint32_t discard4_hi : 8;
	/* Reserved */
	uint32_t res5 : 24;
	/* Discard 4 Counter */
	uint32_t discard4_lo;
	/* Discard 5 Counter */
	uint32_t discard5_hi : 8;
	/* Reserved */
	uint32_t res6 : 24;
	/* Discard 5 Counter */
	uint32_t discard5_lo;
	/* Discard 6 Counter */
	uint32_t discard6_hi : 8;
	/* Reserved */
	uint32_t res7 : 24;
	/* Discard 6 Counter */
	uint32_t discard6_lo;
	/* Discard 7 Counter */
	uint32_t discard7_hi : 8;
	/* Reserved */
	uint32_t res8 : 24;
	/* Discard 7 Counter */
	uint32_t discard7_lo;
	/* Rule 2 Counter */
	uint32_t rule2;
	/* Rule 4 Counter */
	uint32_t rule4;
	/* Rule 6 Counter */
	uint32_t rule6;
	/* Rule 7 Counter */
	uint32_t rule7;
	/* Rule 8 Counter */
	uint32_t rule8;
	/* Rule 9 Counter */
	uint32_t rule9;
	/* Rule 10 Counter */
	uint32_t rule10;
	/* Rule 11 Counter */
	uint32_t rule11;
	/* Customized Rule 12 Counter */
	uint32_t rule12;
	/* Customized Rule 13 Counter */
	uint32_t rule13;
	/* Customized Rule 14 Counter */
	uint32_t rule14;
	/* Customized Rule 15 Counter */
	uint32_t rule15;
	/* Customized Rule 16 Counter */
	uint32_t rule16;
#endif
} __PACKED__;

/** TWDM Tuning Control Counters */
#define PONFW_TWDM_TC_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x8E)
#define PONFW_TWDM_TC_COUNTERS_LEN 136

/* HW applicability of TWDM_TC_COUNTERS */
#define PONFW_TWDM_TC_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_tc_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Tuning Control Counter 0 */
	uint32_t tc_[34];
#else
	/* Tuning Control Counter 0 */
	uint32_t tc_[34];
#endif
} __PACKED__;

/** TWDM Transmit Power Leveling Counters */
#define PONFW_TWDM_ONU_OPTIC_PL_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x8F)
#define PONFW_TWDM_ONU_OPTIC_PL_COUNTERS_LEN 12

/* HW applicability of TWDM_ONU_OPTIC_PL_COUNTERS */
#define PONFW_TWDM_ONU_OPTIC_PL_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_onu_optic_pl_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Power Leveling Rejected Counter */
	uint32_t cpl_rejected;
	/* Power Leveling Incomplete Counter */
	uint32_t cpl_incomplete;
	/* Power Leveling Complete Counter */
	uint32_t cpl_complete;
#else
	/* Power Leveling Rejected Counter */
	uint32_t cpl_rejected;
	/* Power Leveling Incomplete Counter */
	uint32_t cpl_incomplete;
	/* Power Leveling Complete Counter */
	uint32_t cpl_complete;
#endif
} __PACKED__;

/** TWDM LODS Counters */
#define PONFW_TWDM_LODS_COUNTERS_CMD_ID (PONFW_STD_ITUT | 0x91)
#define PONFW_TWDM_LODS_COUNTERS_LEN 28

/* HW applicability of TWDM_LODS_COUNTERS */
#define PONFW_TWDM_LODS_COUNTERS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_twdm_lods_counters {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* LODS Total Events */
	uint32_t lods;
	/* LODS Reactivation Events */
	uint32_t react_oper;
	/* LODS Reactivation Events in the Protection Channel */
	uint32_t react_prot;
	/* LODS Reactivation Events in a Discretionary Channel */
	uint32_t react_disc;
	/* LODS Restored to the Operational Channel */
	uint32_t rest_oper;
	/* LODS Restored to the Protection Channel */
	uint32_t rest_prot;
	/* LODS Restored to a Discretionary Channel */
	uint32_t rest_disc;
#else
	/* LODS Total Events */
	uint32_t lods;
	/* LODS Reactivation Events */
	uint32_t react_oper;
	/* LODS Reactivation Events in the Protection Channel */
	uint32_t react_prot;
	/* LODS Reactivation Events in a Discretionary Channel */
	uint32_t react_disc;
	/* LODS Restored to the Operational Channel */
	uint32_t rest_oper;
	/* LODS Restored to the Protection Channel */
	uint32_t rest_prot;
	/* LODS Restored to a Discretionary Channel */
	uint32_t rest_disc;
#endif
} __PACKED__;

/** Debug Configuration */
#define PONFW_DEBUG_CONFIG_CMD_ID (0xE0)
#define PONFW_DEBUG_CONFIG_LEN 4
/* Only errors are written to the log */
#define PONFW_DEBUG_CONFIG_LOG_LVL_ERROR 0
/* Warnings are also written to the log */
#define PONFW_DEBUG_CONFIG_LOG_LVL_WARNING 1
/* Now infos are also written to the log (default) */
#define PONFW_DEBUG_CONFIG_LOG_LVL_INFO 2
/* A fully detailed log is written */
#define PONFW_DEBUG_CONFIG_LOG_LVL_DETAILS 3
/* Normal operation. */
#define PONFW_DEBUG_CONFIG_ROGUE_INT_DIS 0
/* Trigger the internal Rogue ONU detection */
#define PONFW_DEBUG_CONFIG_ROGUE_INT_TEST 1
/* Normal operation. */
#define PONFW_DEBUG_CONFIG_ROGUE_DIS 0
/* Light is constantly switched on. The data sent to the OLT depends on the
 * pattern defined by value of BPP in the ONU_OPTIC_CONFIG message.
 */
#define PONFW_DEBUG_CONFIG_ROGUE_ON 1
/* The received allocations are stretched to the end of the upstream time
 * slot to violate the timing.
 */
#define PONFW_DEBUG_CONFIG_ROGUE_STRETCH 3
/* Normal operation, debug mode is disabled. DBRu fetching is active. */
#define PONFW_DEBUG_CONFIG_DBRU_DIS_DIS 0
/* Debug function is enabled, DBRu fetching is inactive. */
#define PONFW_DEBUG_CONFIG_DBRU_DIS_EN 1
/* Debug function is disabled, use a random value. */
#define PONFW_DEBUG_CONFIG_RND_DEL_ZERO_DIS 0
/* Debug function is enabled, use the value 0. */
#define PONFW_DEBUG_CONFIG_RND_DEL_ZERO_EN 1
/* Requesting is disabled. */
#define PONFW_DEBUG_CONFIG_REQ_ACT_DIS 0
/* Requesting is enabled. */
#define PONFW_DEBUG_CONFIG_REQ_ACT_EN 1
/* PMA ingress loop is disabled. */
#define PONFW_DEBUG_CONFIG_PMA_IGL_DIS 0
/* PMA ingress loop is enabled */
#define PONFW_DEBUG_CONFIG_PMA_IGL_EN 1
/* MAC ingress loop is disabled. */
#define PONFW_DEBUG_CONFIG_MAC_IGL_DIS 0
/* MAC ingress loop is enabled */
#define PONFW_DEBUG_CONFIG_MAC_IGL_EN 1
/* FW PLOAM processing in DS and US is disabled. HW PLOAM processing in DS
 * and US is enabled.
 */
#define PONFW_DEBUG_CONFIG_PLOAMD_DIS 0
/* FW PLOAM message may be send with Debug GTC PLOAM Send or Debug XGTC PLOAM
 * Send. HW PLOAM processing in DS and US is disabled.
 */
#define PONFW_DEBUG_CONFIG_PLOAMD_EN 1

/* HW applicability of DEBUG_CONFIG */
#define PONFW_DEBUG_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 12;
	/* Logging Level */
	uint32_t log_lvl : 4;
	/* Reserved */
	uint32_t res2 : 3;
	/* Internal Rogue ONU Detection Test */
	uint32_t rogue_int : 1;
	/* Stimulate Rogue ONU Behavior */
	uint32_t rogue : 3;
	/* Inhibit DBRu Fetching */
	uint32_t dbru_dis : 1;
	/* Fixed Random Delay */
	uint32_t rnd_del_zero : 1;
	/* Requesting Activation */
	uint32_t req_act : 1;
	/* PMA Ingress Loop */
	uint32_t pma_igl : 1;
	/* Reserved */
	uint32_t pma_egl : 1;
	/* Reserved */
	uint32_t pcs_egl : 1;
	/* MAC Ingress Loop */
	uint32_t mac_igl : 1;
	/* Reserved */
	uint32_t res3 : 1;
	/* PLOAM Processing */
	uint32_t ploamd : 1;
#else
	/* PLOAM Processing */
	uint32_t ploamd : 1;
	/* Reserved */
	uint32_t res3 : 1;
	/* MAC Ingress Loop */
	uint32_t mac_igl : 1;
	/* Reserved */
	uint32_t pcs_egl : 1;
	/* Reserved */
	uint32_t pma_egl : 1;
	/* PMA Ingress Loop */
	uint32_t pma_igl : 1;
	/* Requesting Activation */
	uint32_t req_act : 1;
	/* Fixed Random Delay */
	uint32_t rnd_del_zero : 1;
	/* Inhibit DBRu Fetching */
	uint32_t dbru_dis : 1;
	/* Stimulate Rogue ONU Behavior */
	uint32_t rogue : 3;
	/* Internal Rogue ONU Detection Test */
	uint32_t rogue_int : 1;
	/* Reserved */
	uint32_t res2 : 3;
	/* Logging Level */
	uint32_t log_lvl : 4;
	/* Reserved */
	uint32_t res1 : 12;
#endif
} __PACKED__;

/** Debug Data Access */
#define PONFW_DEBUG_DATA_ACCESS_CMD_ID (0xE1)
#define PONFW_DEBUG_DATA_ACCESS_MAXLENW 508
#define PONFW_DEBUG_DATA_ACCESS_LENR 8

/* I/O bus access */
#define PONFW_DEBUG_DATA_ACCESS_BUS_IO 0
/* Crossbar access */
#define PONFW_DEBUG_DATA_ACCESS_BUS_CB 1
/* Memory access */
#define PONFW_DEBUG_DATA_ACCESS_BUS_MEM 2

/* HW applicability of DEBUG_DATA_ACCESS */
#define PONFW_DEBUG_DATA_ACCESS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_data_access {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 13;
	/* Bus which shall be addressed */
	uint32_t bus : 3;
	/* Requested Read Length */
	uint32_t plength : 16;
	/* Address */
	uint32_t address;
	/* Data N */
	uint32_t data;
#else
	/* Requested Read Length */
	uint32_t plength : 16;
	/* Bus which shall be addressed */
	uint32_t bus : 3;
	/* Reserved */
	uint32_t res : 13;
	/* Address */
	uint32_t address;
	/* Data N */
	uint32_t data;
#endif
} __PACKED__;

/** Debug GTC PLOAM Send */
#define PONFW_DEBUG_GTC_PLOAM_SEND_CMD_ID (PONFW_STD_ITUT | 0xE2)
#define PONFW_DEBUG_GTC_PLOAM_SEND_LEN 12

/* HW applicability of DEBUG_GTC_PLOAM_SEND */
#define PONFW_DEBUG_GTC_PLOAM_SEND_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_gtc_ploam_send {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* ONU-ID */
	uint32_t id : 8;
	/* Message type ID */
	uint32_t mid : 8;
	/* DATA0 */
	uint32_t data1 : 16;
	/* DATA1 */
	uint32_t data2 : 16;
	/* DATA2 */
	uint32_t data3 : 16;
	/* DATA3 */
	uint32_t data4 : 16;
	/* DATA4 */
	uint32_t data5 : 16;
#else
	/* DATA0 */
	uint32_t data1 : 16;
	/* Message type ID */
	uint32_t mid : 8;
	/* ONU-ID */
	uint32_t id : 8;
	/* DATA2 */
	uint32_t data3 : 16;
	/* DATA1 */
	uint32_t data2 : 16;
	/* DATA4 */
	uint32_t data5 : 16;
	/* DATA3 */
	uint32_t data4 : 16;
#endif
} __PACKED__;

/** Debug XGTC PLOAM Send */
#define PONFW_DEBUG_XGTC_PLOAM_SEND_CMD_ID (PONFW_STD_ITUT | 0xE3)
#define PONFW_DEBUG_XGTC_PLOAM_SEND_LEN 40

/* HW applicability of DEBUG_XGTC_PLOAM_SEND */
#define PONFW_DEBUG_XGTC_PLOAM_SEND_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_xgtc_ploam_send {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* ONU-ID */
	uint32_t id : 16;
	/* Message type ID */
	uint32_t type : 8;
	/* Sequence Number */
	uint32_t seqno : 8;
	/* Message Content 0 */
	uint32_t msg[9];
#else
	/* Sequence Number */
	uint32_t seqno : 8;
	/* Message type ID */
	uint32_t type : 8;
	/* ONU-ID */
	uint32_t id : 16;
	/* Message Content 0 */
	uint32_t msg[9];
#endif
} __PACKED__;

/** Debug GEM Port Index */
#define PONFW_DEBUG_GEM_PORT_IDX_CMD_ID (PONFW_STD_ITUT | 0xE9)
#define PONFW_DEBUG_GEM_PORT_IDX_LENR 4
#define PONFW_DEBUG_GEM_PORT_IDX_LEN 8

/* Ethernet (G.989), Ethernet unicast (G.984) */
#define PONFW_DEBUG_GEM_PORT_IDX_TT_ETH 0
/* OMCI (G.984, G.989) */
#define PONFW_DEBUG_GEM_PORT_IDX_TT_OMCI 1
/* Ethernet multicast (G.984 only) */
#define PONFW_DEBUG_GEM_PORT_IDX_TT_ETHM 2
/* Encryption disabled (G.984, G989) */
#define PONFW_DEBUG_GEM_PORT_IDX_ENC_DIS 0
/* Unicast payload encryption in both directions (G.989 only) */
#define PONFW_DEBUG_GEM_PORT_IDX_ENC_UC 1
/* Broadcast encryption (G.989 only) */
#define PONFW_DEBUG_GEM_PORT_IDX_ENC_BC 2
/* Unicast encryption in downstream only (G.984, G.989) */
#define PONFW_DEBUG_GEM_PORT_IDX_ENC_DSEN 3
/* Disabled (GEM port not used) */
#define PONFW_DEBUG_GEM_PORT_IDX_DIR_DIS 0
/* Upstream (UNI-to-ANI) */
#define PONFW_DEBUG_GEM_PORT_IDX_DIR_US 1
/* Downstream (ANI-to-UNI) */
#define PONFW_DEBUG_GEM_PORT_IDX_DIR_DS 2
/* Bidirectional */
#define PONFW_DEBUG_GEM_PORT_IDX_DIR_BI 3

/* HW applicability of DEBUG_GEM_PORT_IDX */
#define PONFW_DEBUG_GEM_PORT_IDX_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_gem_port_idx {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Traffic Type */
	uint32_t tt : 2;
	/* Encryption */
	uint32_t enc : 2;
	/* Direction */
	uint32_t dir : 2;
	/* Reserved */
	uint32_t res1 : 2;
	/* GEM port Index */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res2 : 10;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Reserved */
	uint32_t res3 : 2;
	/* Maximum GEM Payload Size */
	uint32_t max_gem_size : 14;
#else
	/* GEM port Index */
	uint32_t gem_port_idx : 8;
	/* Reserved */
	uint32_t res1 : 2;
	/* Direction */
	uint32_t dir : 2;
	/* Encryption */
	uint32_t enc : 2;
	/* Traffic Type */
	uint32_t tt : 2;
	/* GEM Port ID */
	uint32_t gem_port_id : 16;
	/* Maximum GEM Payload Size */
	uint32_t max_gem_size : 14;
	/* Reserved */
	uint32_t res3 : 2;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Reserved */
	uint32_t res2 : 10;
#endif
} __PACKED__;

/** Debug Allocation Index */
#define PONFW_DEBUG_ALLOC_IDX_CMD_ID (PONFW_STD_ITUT | 0xEA)
#define PONFW_DEBUG_ALLOC_IDX_LENR 4
#define PONFW_DEBUG_ALLOC_IDX_LEN 8

/* The Alloc ID has not been assigned by the OLT and is free to be used. In
 * this case ALLOC_ID and ALLOC_LINK_REF will return zero.
 */
#define PONFW_DEBUG_ALLOC_IDX_STATUS_UNUSED 0
/* The Alloc ID has been requested by the OLT through OMCI but the OLT has
 * not yet assigned this Alloc ID through PLOAM.
 */
#define PONFW_DEBUG_ALLOC_IDX_STATUS_REQUESTED 1
/* The Alloc ID has been assigned by the OLT trough PLOAM but the software
 * has not yet requested this for OMCI-controlled GEM port mapping. It can be
 * deleted through PLOAM without further notice to the software.
 */
#define PONFW_DEBUG_ALLOC_IDX_STATUS_ASSIGNED 2
/* The Alloc ID has been assigned by the OLT trough PLOAM and the software
 * has requested this for OMCI-controlled GEM port mapping. It cannot be
 * deleted through PLOAM without waiting for software confirmation through
 * ALLOC_ID_UNLINK.
 */
#define PONFW_DEBUG_ALLOC_IDX_STATUS_LINKED 3
/* The Alloc ID has been de-assigned by the OLT trough PLOAM but the software
 * has requested this for OMCI-controlled GEM port mapping. It cannot be
 * deleted through PLOAM without waiting for software confirmation through
 * ALLOC_ID_UNLINK.
 */
#define PONFW_DEBUG_ALLOC_IDX_STATUS_BLOCKED 4

/* HW applicability of DEBUG_ALLOC_IDX */
#define PONFW_DEBUG_ALLOC_IDX_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_alloc_idx {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 2;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res2 : 7;
	/* Allocation Index Status Indication */
	uint32_t status : 3;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#else
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Allocation Index Status Indication */
	uint32_t status : 3;
	/* Reserved */
	uint32_t res2 : 7;
	/* Allocation ID */
	uint32_t alloc_id : 14;
	/* Reserved */
	uint32_t res1 : 2;
	/* Allocation Link Reference */
	uint32_t alloc_link_ref;
#endif
} __PACKED__;

/** Debug Mailbox Loop-back */
#define PONFW_DEBUG_MAILBOX_LOOP_CMD_ID (0xEB)
#define PONFW_DEBUG_MAILBOX_LOOP_LEN 508

/* HW applicability of DEBUG_MAILBOX_LOOP */
#define PONFW_DEBUG_MAILBOX_LOOP_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_mailbox_loop {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Loop-back Message Header */
	uint32_t data[127];
#else
	/* Loop-back Message Header */
	uint32_t data[127];
#endif
} __PACKED__;

/** Debug QoS Index */
#define PONFW_DEBUG_QOS_IDX_CMD_ID (PONFW_STD_ITUT | 0xEC)
#define PONFW_DEBUG_QOS_IDX_LEN 4
/* No QoS index is mapped. */
#define PONFW_DEBUG_QOS_IDX_QOS_VALID_INVALID 0
/* The QoS index is mapped. */
#define PONFW_DEBUG_QOS_IDX_QOS_VALID_VALID 1

/* HW applicability of DEBUG_QOS_IDX */
#define PONFW_DEBUG_QOS_IDX_HW_PROP	PONFW_PROP_HW_PRXURX

struct ponfw_debug_qos_idx {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 8;
	/* QoS Index */
	uint32_t qos_idx : 8;
	/* Reserved */
	uint32_t res2 : 9;
	/* Status of the QoS Index */
	uint32_t qos_valid : 1;
	/* Allocation Index */
	uint32_t alloc_idx : 6;
#else
	/* Allocation Index */
	uint32_t alloc_idx : 6;
	/* Status of the QoS Index */
	uint32_t qos_valid : 1;
	/* Reserved */
	uint32_t res2 : 9;
	/* QoS Index */
	uint32_t qos_idx : 8;
	/* Reserved */
	uint32_t res1 : 8;
#endif
} __PACKED__;

/** Debug DBRu Status */
#define PONFW_DEBUG_DBRU_CMD_ID (PONFW_STD_ITUT | 0xED)
#define PONFW_DEBUG_DBRU_LEN 16
/* DBRu is disabled */
#define PONFW_DEBUG_DBRU_AIX15_DIS 0
/* DBRu Mode 0 is enabled (2 bytes) */
#define PONFW_DEBUG_DBRU_AIX15_DBRM0 1
/* DBRu Mode 1 is enabled (3 bytes) */
#define PONFW_DEBUG_DBRU_AIX15_DBRM1 2
/* DBRu is disabled */
#define PONFW_DEBUG_DBRU_AIX15_DIS 0
/* DBRu is enabled */
#define PONFW_DEBUG_DBRU_AIX15_EN 1

/* HW applicability of DEBUG_DBRU */
#define PONFW_DEBUG_DBRU_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_dbru {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* DBRu Flags for Allocation Index 15 */
	uint32_t aix15 : 2;
	/* DBRu Flags for Allocation Index 14 */
	uint32_t aix14 : 2;
	/* DBRu Flags for Allocation Index 13 */
	uint32_t aix13 : 2;
	/* DBRu Flags for Allocation Index 12 */
	uint32_t aix12 : 2;
	/* DBRu Flags for Allocation Index 11 */
	uint32_t aix11 : 2;
	/* DBRu Flags for Allocation Index 10 */
	uint32_t aix10 : 2;
	/* DBRu Flags for Allocation Index 9 */
	uint32_t aix9 : 2;
	/* DBRu Flags for Allocation Index 8 */
	uint32_t aix8 : 2;
	/* DBRu Flags for Allocation Index 7 */
	uint32_t aix7 : 2;
	/* DBRu Flags for Allocation Index 6 */
	uint32_t aix6 : 2;
	/* DBRu Flags for Allocation Index 5 */
	uint32_t aix5 : 2;
	/* DBRu Flags for Allocation Index 4 */
	uint32_t aix4 : 2;
	/* DBRu Flags for Allocation Index 3 */
	uint32_t aix3 : 2;
	/* DBRu Flags for Allocation Index 2 */
	uint32_t aix2 : 2;
	/* DBRu Flags for Allocation Index 1 */
	uint32_t aix1 : 2;
	/* DBRu Flags for Allocation Index 0 */
	uint32_t aix0 : 2;
	/* DBRu Flags for Allocation Index 31 */
	uint32_t aix31 : 2;
	/* DBRu Flags for Allocation Index 30 */
	uint32_t aix30 : 2;
	/* DBRu Flags for Allocation Index 29 */
	uint32_t aix29 : 2;
	/* DBRu Flags for Allocation Index 28 */
	uint32_t aix28 : 2;
	/* DBRu Flags for Allocation Index 27 */
	uint32_t aix27 : 2;
	/* DBRu Flags for Allocation Index 26 */
	uint32_t aix26 : 2;
	/* DBRu Flags for Allocation Index 25 */
	uint32_t aix25 : 2;
	/* DBRu Flags for Allocation Index 24 */
	uint32_t aix24 : 2;
	/* DBRu Flags for Allocation Index 23 */
	uint32_t aix23 : 2;
	/* DBRu Flags for Allocation Index 22 */
	uint32_t aix22 : 2;
	/* DBRu Flags for Allocation Index 21 */
	uint32_t aix21 : 2;
	/* DBRu Flags for Allocation Index 20 */
	uint32_t aix20 : 2;
	/* DBRu Flags for Allocation Index 19 */
	uint32_t aix19 : 2;
	/* DBRu Flags for Allocation Index 18 */
	uint32_t aix18 : 2;
	/* DBRu Flags for Allocation Index 17 */
	uint32_t aix17 : 2;
	/* DBRu Flags for Allocation Index 16 */
	uint32_t aix16 : 2;
	/* DBRu Flags for Allocation Index 47 */
	uint32_t aix47 : 2;
	/* DBRu Flags for Allocation Index 46 */
	uint32_t aix46 : 2;
	/* DBRu Flags for Allocation Index 45 */
	uint32_t aix45 : 2;
	/* DBRu Flags for Allocation Index 44 */
	uint32_t aix44 : 2;
	/* DBRu Flags for Allocation Index 43 */
	uint32_t aix43 : 2;
	/* DBRu Flags for Allocation Index 42 */
	uint32_t aix42 : 2;
	/* DBRu Flags for Allocation Index 41 */
	uint32_t aix41 : 2;
	/* DBRu Flags for Allocation Index 40 */
	uint32_t aix40 : 2;
	/* DBRu Flags for Allocation Index 39 */
	uint32_t aix39 : 2;
	/* DBRu Flags for Allocation Index 38 */
	uint32_t aix38 : 2;
	/* DBRu Flags for Allocation Index 37 */
	uint32_t aix37 : 2;
	/* DBRu Flags for Allocation Index 36 */
	uint32_t aix36 : 2;
	/* DBRu Flags for Allocation Index 35 */
	uint32_t aix35 : 2;
	/* DBRu Flags for Allocation Index 34 */
	uint32_t aix34 : 2;
	/* DBRu Flags for Allocation Index 33 */
	uint32_t aix33 : 2;
	/* DBRu Flags for Allocation Index 32 */
	uint32_t aix32 : 2;
	/* DBRu Flags for Allocation Index 63 */
	uint32_t aix63 : 2;
	/* DBRu Flags for Allocation Index 62 */
	uint32_t aix62 : 2;
	/* DBRu Flags for Allocation Index 61 */
	uint32_t aix61 : 2;
	/* DBRu Flags for Allocation Index 60 */
	uint32_t aix60 : 2;
	/* DBRu Flags for Allocation Index 59 */
	uint32_t aix59 : 2;
	/* DBRu Flags for Allocation Index 58 */
	uint32_t aix58 : 2;
	/* DBRu Flags for Allocation Index 57 */
	uint32_t aix57 : 2;
	/* DBRu Flags for Allocation Index 56 */
	uint32_t aix56 : 2;
	/* DBRu Flags for Allocation Index 55 */
	uint32_t aix55 : 2;
	/* DBRu Flags for Allocation Index 54 */
	uint32_t aix54 : 2;
	/* DBRu Flags for Allocation Index 53 */
	uint32_t aix53 : 2;
	/* DBRu Flags for Allocation Index 52 */
	uint32_t aix52 : 2;
	/* DBRu Flags for Allocation Index 51 */
	uint32_t aix51 : 2;
	/* DBRu Flags for Allocation Index 50 */
	uint32_t aix50 : 2;
	/* DBRu Flags for Allocation Index 49 */
	uint32_t aix49 : 2;
	/* DBRu Flags for Allocation Index 48 */
	uint32_t aix48 : 2;
#else
	/* DBRu Flags for Allocation Index 0 */
	uint32_t aix0 : 2;
	/* DBRu Flags for Allocation Index 1 */
	uint32_t aix1 : 2;
	/* DBRu Flags for Allocation Index 2 */
	uint32_t aix2 : 2;
	/* DBRu Flags for Allocation Index 3 */
	uint32_t aix3 : 2;
	/* DBRu Flags for Allocation Index 4 */
	uint32_t aix4 : 2;
	/* DBRu Flags for Allocation Index 5 */
	uint32_t aix5 : 2;
	/* DBRu Flags for Allocation Index 6 */
	uint32_t aix6 : 2;
	/* DBRu Flags for Allocation Index 7 */
	uint32_t aix7 : 2;
	/* DBRu Flags for Allocation Index 8 */
	uint32_t aix8 : 2;
	/* DBRu Flags for Allocation Index 9 */
	uint32_t aix9 : 2;
	/* DBRu Flags for Allocation Index 10 */
	uint32_t aix10 : 2;
	/* DBRu Flags for Allocation Index 11 */
	uint32_t aix11 : 2;
	/* DBRu Flags for Allocation Index 12 */
	uint32_t aix12 : 2;
	/* DBRu Flags for Allocation Index 13 */
	uint32_t aix13 : 2;
	/* DBRu Flags for Allocation Index 14 */
	uint32_t aix14 : 2;
	/* DBRu Flags for Allocation Index 15 */
	uint32_t aix15 : 2;
	/* DBRu Flags for Allocation Index 16 */
	uint32_t aix16 : 2;
	/* DBRu Flags for Allocation Index 17 */
	uint32_t aix17 : 2;
	/* DBRu Flags for Allocation Index 18 */
	uint32_t aix18 : 2;
	/* DBRu Flags for Allocation Index 19 */
	uint32_t aix19 : 2;
	/* DBRu Flags for Allocation Index 20 */
	uint32_t aix20 : 2;
	/* DBRu Flags for Allocation Index 21 */
	uint32_t aix21 : 2;
	/* DBRu Flags for Allocation Index 22 */
	uint32_t aix22 : 2;
	/* DBRu Flags for Allocation Index 23 */
	uint32_t aix23 : 2;
	/* DBRu Flags for Allocation Index 24 */
	uint32_t aix24 : 2;
	/* DBRu Flags for Allocation Index 25 */
	uint32_t aix25 : 2;
	/* DBRu Flags for Allocation Index 26 */
	uint32_t aix26 : 2;
	/* DBRu Flags for Allocation Index 27 */
	uint32_t aix27 : 2;
	/* DBRu Flags for Allocation Index 28 */
	uint32_t aix28 : 2;
	/* DBRu Flags for Allocation Index 29 */
	uint32_t aix29 : 2;
	/* DBRu Flags for Allocation Index 30 */
	uint32_t aix30 : 2;
	/* DBRu Flags for Allocation Index 31 */
	uint32_t aix31 : 2;
	/* DBRu Flags for Allocation Index 32 */
	uint32_t aix32 : 2;
	/* DBRu Flags for Allocation Index 33 */
	uint32_t aix33 : 2;
	/* DBRu Flags for Allocation Index 34 */
	uint32_t aix34 : 2;
	/* DBRu Flags for Allocation Index 35 */
	uint32_t aix35 : 2;
	/* DBRu Flags for Allocation Index 36 */
	uint32_t aix36 : 2;
	/* DBRu Flags for Allocation Index 37 */
	uint32_t aix37 : 2;
	/* DBRu Flags for Allocation Index 38 */
	uint32_t aix38 : 2;
	/* DBRu Flags for Allocation Index 39 */
	uint32_t aix39 : 2;
	/* DBRu Flags for Allocation Index 40 */
	uint32_t aix40 : 2;
	/* DBRu Flags for Allocation Index 41 */
	uint32_t aix41 : 2;
	/* DBRu Flags for Allocation Index 42 */
	uint32_t aix42 : 2;
	/* DBRu Flags for Allocation Index 43 */
	uint32_t aix43 : 2;
	/* DBRu Flags for Allocation Index 44 */
	uint32_t aix44 : 2;
	/* DBRu Flags for Allocation Index 45 */
	uint32_t aix45 : 2;
	/* DBRu Flags for Allocation Index 46 */
	uint32_t aix46 : 2;
	/* DBRu Flags for Allocation Index 47 */
	uint32_t aix47 : 2;
	/* DBRu Flags for Allocation Index 48 */
	uint32_t aix48 : 2;
	/* DBRu Flags for Allocation Index 49 */
	uint32_t aix49 : 2;
	/* DBRu Flags for Allocation Index 50 */
	uint32_t aix50 : 2;
	/* DBRu Flags for Allocation Index 51 */
	uint32_t aix51 : 2;
	/* DBRu Flags for Allocation Index 52 */
	uint32_t aix52 : 2;
	/* DBRu Flags for Allocation Index 53 */
	uint32_t aix53 : 2;
	/* DBRu Flags for Allocation Index 54 */
	uint32_t aix54 : 2;
	/* DBRu Flags for Allocation Index 55 */
	uint32_t aix55 : 2;
	/* DBRu Flags for Allocation Index 56 */
	uint32_t aix56 : 2;
	/* DBRu Flags for Allocation Index 57 */
	uint32_t aix57 : 2;
	/* DBRu Flags for Allocation Index 58 */
	uint32_t aix58 : 2;
	/* DBRu Flags for Allocation Index 59 */
	uint32_t aix59 : 2;
	/* DBRu Flags for Allocation Index 60 */
	uint32_t aix60 : 2;
	/* DBRu Flags for Allocation Index 61 */
	uint32_t aix61 : 2;
	/* DBRu Flags for Allocation Index 62 */
	uint32_t aix62 : 2;
	/* DBRu Flags for Allocation Index 63 */
	uint32_t aix63 : 2;
#endif
} __PACKED__;

/** Debug Trigger Alarm Event */
#define PONFW_DEBUG_TRIGGER_ALARM_CMD_ID (0xEE)
#define PONFW_DEBUG_TRIGGER_ALARM_LEN 4
/* Edge alarm mode */
#define PONFW_DEBUG_TRIGGER_ALARM_MODE_EDGE 0
/* Static alarm mode */
#define PONFW_DEBUG_TRIGGER_ALARM_MODE_STATIC 1

/* HW applicability of DEBUG_TRIGGER_ALARM */
#define PONFW_DEBUG_TRIGGER_ALARM_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_trigger_alarm {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 15;
	/* Alarm mode */
	uint32_t mode : 1;
	/* Alarm ID */
	uint32_t alarm_id : 16;
#else
	/* Alarm ID */
	uint32_t alarm_id : 16;
	/* Alarm mode */
	uint32_t mode : 1;
	/* Reserved */
	uint32_t res : 15;
#endif
} __PACKED__;

/** Debug Trace Configuration */
#define PONFW_DEBUG_TRACE_CONFIG_CMD_ID (PONFW_STD_ITUT | 0xEF)
#define PONFW_DEBUG_TRACE_CONFIG_LEN 8
/* Nothing selected */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_NO 0
/* DS timer input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_DSTIN 1
/* DS timer output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_DSTOUT 2
/* DS descrambler output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_DSCR 3
/* DS FEC decoder output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_FEC 4
/* DS FS header/trailer parser */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_FSPARSER 5
/* DS (X)GEM header parser */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_GEMPARSER 6
/* DS AES-codec decryption module output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_AES 7
/* US control output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_USCTRL 8
/* US encryption output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_USENC 9
/* US FS Burst output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_FSBURST 10
/* US FEC encoder output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_USFEC 11
/* US descrambler output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_SCR 12
/* US PSBu output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_PSBU 13
/* US output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_US 14
/* XGMII RX/DS Reassembly buffer input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_RBUFIN 15
/* XGMII RX/DS Reassembly memory write */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_RBUFMEMW 16
/* XGMII RX/DS Reassembly memory read */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_RBUFMEMR 17
/* XGMII RX/DS Encapsulation input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_ENCIN 18
/* XGMII RX/DS FCS check input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_FCHKIN 19
/* XGMII RX/DS SUBST input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_SUBSTIN 20
/* XGMII RX/DS Packet Prep input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_PPREPIN 21
/* XGMII RX/DS Avalon 2 XGMII input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_A2XIN 22
/* XGMII RX/DS Avalon 2 XGMII output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_A2XOUT 23
/* XGMII TX/US XGMI 2 Avalon input */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_X2AIN 24
/* XGMII TX/US XGMII 2 Avalon output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_X2AOUT 25
/* XGMII TX/US Decapsulate output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_DECOUT 26
/* XGMII TX/US output */
#define PONFW_DEBUG_TRACE_CONFIG_SRC_TXOUT 27

/* HW applicability of DEBUG_TRACE_CONFIG */
#define PONFW_DEBUG_TRACE_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_trace_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Suppress Trigger */
	uint32_t st : 1;
	/* Assume Valid */
	uint32_t av : 1;
	/* Reserved */
	uint32_t res1 : 6;
	/* Trigger Source */
	uint32_t src : 8;
	/* Reserved */
	uint32_t res2 : 2;
	/* POCS */
	uint32_t pocs : 14;
	/* Reserved */
	uint32_t res3 : 8;
	/* Number of Ignored Triggers */
	uint32_t nit : 8;
	/* Trigger Shift Samples */
	uint32_t tss : 16;
#else
	/* POCS */
	uint32_t pocs : 14;
	/* Reserved */
	uint32_t res2 : 2;
	/* Trigger Source */
	uint32_t src : 8;
	/* Reserved */
	uint32_t res1 : 6;
	/* Assume Valid */
	uint32_t av : 1;
	/* Suppress Trigger */
	uint32_t st : 1;
	/* Trigger Shift Samples */
	uint32_t tss : 16;
	/* Number of Ignored Triggers */
	uint32_t nit : 8;
	/* Reserved */
	uint32_t res3 : 8;
#endif
} __PACKED__;

/** Debug Trace Result */
#define PONFW_DEBUG_TRACE_RESULT_CMD_ID (PONFW_STD_ITUT | 0xF0)
#define PONFW_DEBUG_TRACE_RESULT_LEN 12

/* HW applicability of DEBUG_TRACE_RESULT */
#define PONFW_DEBUG_TRACE_RESULT_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_trace_result {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 8;
	/* Total number of samples */
	uint32_t tns : 24;
	/* Reserved */
	uint32_t res2 : 16;
	/* Total Number of Triggers */
	uint32_t tnt : 16;
	/* Reserved */
	uint32_t res3 : 19;
	/* Address of the Trigger Sample */
	uint32_t ats : 13;
#else
	/* Total number of samples */
	uint32_t tns : 24;
	/* Reserved */
	uint32_t res1 : 8;
	/* Total Number of Triggers */
	uint32_t tnt : 16;
	/* Reserved */
	uint32_t res2 : 16;
	/* Address of the Trigger Sample */
	uint32_t ats : 13;
	/* Reserved */
	uint32_t res3 : 19;
#endif
} __PACKED__;

/** Debug Trace Control */
#define PONFW_DEBUG_TRACE_CONTROL_CMD_ID (PONFW_STD_ITUT | 0xF1)
#define PONFW_DEBUG_TRACE_CONTROL_LEN 4
/* Initializes the trace HW when written. Clears results and trace counters
 * and prepares for next execution.
 */
#define PONFW_DEBUG_TRACE_CONTROL_RUN_INIT 0
/* Start the trace with the current configuration. */
#define PONFW_DEBUG_TRACE_CONTROL_RUN_EXEC 1
/* The data acquisition is in progress. Does nothing on write. */
#define PONFW_DEBUG_TRACE_CONTROL_DONE_RUN 0
/* The data acquisition has stopped and result data can be read. Stops
 * current acquisition on write.
 */
#define PONFW_DEBUG_TRACE_CONTROL_DONE_STOP 1

/* HW applicability of DEBUG_TRACE_CONTROL */
#define PONFW_DEBUG_TRACE_CONTROL_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_trace_control {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Run Tracing */
	uint32_t run : 1;
	/* Trace Done */
	uint32_t done : 1;
	/* Reserved */
	uint32_t res : 30;
#else
	/* Reserved */
	uint32_t res : 30;
	/* Trace Done */
	uint32_t done : 1;
	/* Run Tracing */
	uint32_t run : 1;
#endif
} __PACKED__;

/** Debug PLOAM Breakpoint */
#define PONFW_DEBUG_PLOAM_BREAK_CMD_ID (PONFW_STD_ITUT | 0xF2)
#define PONFW_DEBUG_PLOAM_BREAK_LEN 4
/* Clear the selected breakpoint. */
#define PONFW_DEBUG_PLOAM_BREAK_BREAK_ENABLE_CLR 0
/* Enable the selected breakpoint. */
#define PONFW_DEBUG_PLOAM_BREAK_BREAK_ENABLE_SET 1
/* No state forcing. */
#define PONFW_DEBUG_PLOAM_BREAK_FORCE_STATE_NONE 0
/* Force the selected state. */
#define PONFW_DEBUG_PLOAM_BREAK_FORCE_STATE_FORCE 1

/* HW applicability of DEBUG_PLOAM_BREAK */
#define PONFW_DEBUG_PLOAM_BREAK_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_ploam_break {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Enable Breakpoint */
	uint32_t break_enable : 1;
	/* Force the Selected State */
	uint32_t force_state : 1;
	/* Reserved */
	uint32_t res : 22;
	/* PLOAM State */
	uint32_t state : 8;
#else
	/* PLOAM State */
	uint32_t state : 8;
	/* Reserved */
	uint32_t res : 22;
	/* Force the Selected State */
	uint32_t force_state : 1;
	/* Enable Breakpoint */
	uint32_t break_enable : 1;
#endif
} __PACKED__;

/** Debug PLOAM Breakpoint Status */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_CMD_ID (PONFW_STD_ITUT | 0xF3)
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_LEN 4
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_90_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_90_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_82_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_82_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_81_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_81_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_72_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_72_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_71_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_71_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_70_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_70_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_60_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_60_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_52_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_52_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_51_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_51_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_50_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_50_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_40_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_40_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_30_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_30_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_23_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_23_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_20_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_20_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_12_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_12_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_11_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_11_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_10_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_10_SET 1
/* The breakpoint is cleared. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_00_CLR 0
/* The breakpoint is set. */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_O_00_SET 1

/* HW applicability of DEBUG_PLOAM_BREAK_STATUS */
#define PONFW_DEBUG_PLOAM_BREAK_STATUS_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_ploam_break_status {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 14;
	/* Breakpoint at PLOAM State O9 */
	uint32_t o_90 : 1;
	/* Breakpoint at PLOAM State O8.2 */
	uint32_t o_82 : 1;
	/* Breakpoint at PLOAM State O8.1 */
	uint32_t o_81 : 1;
	/* Breakpoint at PLOAM State O7.2 */
	uint32_t o_72 : 1;
	/* Breakpoint at PLOAM State O7.1 */
	uint32_t o_71 : 1;
	/* Breakpoint at PLOAM State O7 */
	uint32_t o_70 : 1;
	/* Breakpoint at PLOAM State O6 */
	uint32_t o_60 : 1;
	/* Breakpoint at PLOAM State O5.2 */
	uint32_t o_52 : 1;
	/* Breakpoint at PLOAM State O5.1 */
	uint32_t o_51 : 1;
	/* Breakpoint at PLOAM State O5 */
	uint32_t o_50 : 1;
	/* Breakpoint at PLOAM State O4 */
	uint32_t o_40 : 1;
	/* Breakpoint at PLOAM State O3 */
	uint32_t o_30 : 1;
	/* Breakpoint at PLOAM State O2-3 */
	uint32_t o_23 : 1;
	/* Breakpoint at PLOAM State O2 */
	uint32_t o_20 : 1;
	/* Breakpoint at PLOAM State O1.2 */
	uint32_t o_12 : 1;
	/* Breakpoint at PLOAM State O1.1 */
	uint32_t o_11 : 1;
	/* Breakpoint at PLOAM State O1 */
	uint32_t o_10 : 1;
	/* Breakpoint at PLOAM State O0 */
	uint32_t o_00 : 1;
#else
	/* Breakpoint at PLOAM State O0 */
	uint32_t o_00 : 1;
	/* Breakpoint at PLOAM State O1 */
	uint32_t o_10 : 1;
	/* Breakpoint at PLOAM State O1.1 */
	uint32_t o_11 : 1;
	/* Breakpoint at PLOAM State O1.2 */
	uint32_t o_12 : 1;
	/* Breakpoint at PLOAM State O2 */
	uint32_t o_20 : 1;
	/* Breakpoint at PLOAM State O2-3 */
	uint32_t o_23 : 1;
	/* Breakpoint at PLOAM State O3 */
	uint32_t o_30 : 1;
	/* Breakpoint at PLOAM State O4 */
	uint32_t o_40 : 1;
	/* Breakpoint at PLOAM State O5 */
	uint32_t o_50 : 1;
	/* Breakpoint at PLOAM State O5.1 */
	uint32_t o_51 : 1;
	/* Breakpoint at PLOAM State O5.2 */
	uint32_t o_52 : 1;
	/* Breakpoint at PLOAM State O6 */
	uint32_t o_60 : 1;
	/* Breakpoint at PLOAM State O7 */
	uint32_t o_70 : 1;
	/* Breakpoint at PLOAM State O7.1 */
	uint32_t o_71 : 1;
	/* Breakpoint at PLOAM State O7.2 */
	uint32_t o_72 : 1;
	/* Breakpoint at PLOAM State O8.1 */
	uint32_t o_81 : 1;
	/* Breakpoint at PLOAM State O8.2 */
	uint32_t o_82 : 1;
	/* Breakpoint at PLOAM State O9 */
	uint32_t o_90 : 1;
	/* Reserved */
	uint32_t res : 14;
#endif
} __PACKED__;

/** Debug Random Number Values */
#define PONFW_DEBUG_RANDOM_VALUES_CMD_ID (0xF4)
#define PONFW_DEBUG_RANDOM_VALUES_LENR 4
#define PONFW_DEBUG_RANDOM_VALUES_LEN 20

/* Cryptographic key (128 bit) */
#define PONFW_DEBUG_RANDOM_VALUES_TYPE_KEY 0
/* Random delay value (32 bit) */
#define PONFW_DEBUG_RANDOM_VALUES_TYPE_DELAY 1

/* HW applicability of DEBUG_RANDOM_VALUES */
#define PONFW_DEBUG_RANDOM_VALUES_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_random_values {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 31;
	/* Random Number Type */
	uint32_t type : 1;
	/* Random Key or Delay Value */
	uint8_t rnd[16];
#else
	/* Random Number Type */
	uint32_t type : 1;
	/* Reserved */
	uint32_t res : 31;
	/* Random Key or Delay Value */
	uint8_t rnd[16];
#endif
} __PACKED__;

/** ONU Response Time Offset Configuration */
#define PONFW_ONU_RESP_TIME_OFFSET_CONFIG_CMD_ID (PONFW_STD_ITUT | 0xF5)
#define PONFW_ONU_RESP_TIME_OFFSET_CONFIG_LEN 4

/* HW applicability of ONU_RESP_TIME_OFFSET_CONFIG */
#define PONFW_ONU_RESP_TIME_OFFSET_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_onu_resp_time_offset_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* ONU Response Time Offset */
	uint32_t offset;
#else
	/* ONU Response Time Offset */
	uint32_t offset;
#endif
} __PACKED__;

/** Write XGEM Key */
#define PONFW_XGEM_KEY_WRITE_CMD_ID (PONFW_STD_ITUT | 0xF6)
#define PONFW_XGEM_KEY_WRITE_LEN 20
/* First Unicast Key Index */
#define PONFW_XGEM_KEY_WRITE_KEY_IDX_UC1 0x0
/* Second Unicast Key Index */
#define PONFW_XGEM_KEY_WRITE_KEY_IDX_UC2 0x1
/* First Broadcast Key Index */
#define PONFW_XGEM_KEY_WRITE_KEY_IDX_BC1 0x2
/* Second Broadcast Key Index */
#define PONFW_XGEM_KEY_WRITE_KEY_IDX_BC2 0x3

/* HW applicability of XGEM_KEY_WRITE */
#define PONFW_XGEM_KEY_WRITE_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_xgem_key_write {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 30;
	/* Key Index */
	uint32_t key_idx : 2;
	/* Key Word 1 */
	uint32_t key1;
	/* Key Word 2 */
	uint32_t key2;
	/* Key Word 3 */
	uint32_t key3;
	/* Key Word 4 */
	uint32_t key4;
#else
	/* Key Index */
	uint32_t key_idx : 2;
	/* Reserved */
	uint32_t res : 30;
	/* Key Word 1 */
	uint32_t key1;
	/* Key Word 2 */
	uint32_t key2;
	/* Key Word 3 */
	uint32_t key3;
	/* Key Word 4 */
	uint32_t key4;
#endif
} __PACKED__;

/** Test Pattern Configuration */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_CMD_ID (0xF7)
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_LEN 4
/* The received signal is not inverted. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_INV_NORM 0
/* The received signal is inverted. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_INV_INV 1
/* The transmitted signal is not inverted. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_INV_NORM 0
/* The transmitted signal is inverted. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_INV_INV 1
/* PRBS pattern using the polynomialX^31 + X^28 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS31_28 1
/* PRBS pattern using the polynomialX^23 + X^18 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS23_18 2
/* PRBS pattern using the polynomialX^23 + X^21 + X^16 + X^8 + X^5 + X^2 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS23_21 3
/* PRBS pattern using the polynomialX^16 + X^5 + X^4 + X^3 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS16 4
/* PRBS pattern using the polynomialX^15 + X^14 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS15 5
/* PRBS pattern using the polynomialX^11 + X^9 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS11 6
/* PRBS pattern using the polynomialX^11 + X^9 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS9 7
/* PRBS pattern using the polynomialX^7 + X^6 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_PRBS7 8
/* Repetitive test pattern as defined by TP. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_TP 9
/* Repetitive test pattern as defined by TP, every second pattern is inverted
 * to make the signal DC-balanced.
 */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_TP_DCBAL 10
/* Mixed pattern mode. The following sequence is repeated:0x000 - TP - 0x3FF
 * - ~TP
 */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_RX_MODE_TP_MIXED 11
/* PRBS pattern using the polynomialX^31 + X^28 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS31_28 1
/* PRBS pattern using the polynomialX^23 + X^18 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS23_18 2
/* PRBS pattern using the polynomialX^23 + X^21 + X^16 + X^8 + X^5 + X^2 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS23_21 3
/* PRBS pattern using the polynomialX^16 + X^5 + X^4 + X^3 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS16 4
/* PRBS pattern using the polynomialX^15 + X^14 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS15 5
/* PRBS pattern using the polynomialX^11 + X^9 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS11 6
/* PRBS pattern using the polynomialX^11 + X^9 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS9 7
/* PRBS pattern using the polynomialX^7 + X^6 + 1. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_PRBS7 8
/* Repetitive test pattern as defined by TP. */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_TP 9
/* Repetitive test pattern as defined by TP, every second pattern is inverted
 * to make the signal DC-balanced.
 */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_TP_DCBAL 10
/* Mixed pattern mode. The following sequence is repeated:0x000 - TP - 0x3FF
 * - ~TP
 */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_TX_MODE_TP_MIXED 11

/* HW applicability of DEBUG_TEST_PATTERN_CONFIG */
#define PONFW_DEBUG_TEST_PATTERN_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_test_pattern_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res1 : 6;
	/* Receive Signal Inversion */
	uint32_t rx_inv : 1;
	/* Transmit Signal Inversion */
	uint32_t tx_inv : 1;
	/* Test Pattern Receive Mode */
	uint32_t rx_mode : 4;
	/* Test Pattern Transmission Mode */
	uint32_t tx_mode : 4;
	/* Reserved */
	uint32_t res2 : 6;
	/* Fixed Transmit and Receive Test Pattern */
	uint32_t tp : 10;
#else
	/* Fixed Transmit and Receive Test Pattern */
	uint32_t tp : 10;
	/* Reserved */
	uint32_t res2 : 6;
	/* Test Pattern Transmission Mode */
	uint32_t tx_mode : 4;
	/* Test Pattern Receive Mode */
	uint32_t rx_mode : 4;
	/* Transmit Signal Inversion */
	uint32_t tx_inv : 1;
	/* Receive Signal Inversion */
	uint32_t rx_inv : 1;
	/* Reserved */
	uint32_t res1 : 6;
#endif
} __PACKED__;

/** Test Pattern Control */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_CMD_ID (0xF8)
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_LEN 4
/* The test pattern transmission and reception is switched off. */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_OFF 0
/* The test pattern reception is switched on. */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_RX 1
/* The test pattern transmission is switched on with loop timing. */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_TX_LOOP 2
/* The test pattern transmission is switched on with local timing. */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_TX_LOCAL 3
/* The test pattern reception and transmission is switched on with loop
 * timing.
 */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_TXRX_LOOP 4
/* The test pattern transmission and reception are switched on, the
 * transmitter is looped back to the receiver internally.
 */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_TXRX_CHECK 5
/* The received data is looped back to the remote end. */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_RLOOP 6
/* Received data is looped back to the transmit path within the PON TC layer
 * (the loop PLL is enabled).
 */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_TMO_PON_RLOOP 7

/* HW applicability of DEBUG_TEST_PATTERN_CONTROL */
#define PONFW_DEBUG_TEST_PATTERN_CONTROL_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_test_pattern_control {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 29;
	/* Test Mode Option */
	uint32_t tmo : 3;
#else
	/* Test Mode Option */
	uint32_t tmo : 3;
	/* Reserved */
	uint32_t res : 29;
#endif
} __PACKED__;

/** Bit Error Insertion */
#define PONFW_DEBUG_INSERT_BIT_ERROR_W_WRITE 0x0
#define PONFW_DEBUG_INSERT_BIT_ERROR_CMD_ID (0xF9)
/* Length of write command. */
#define PONFW_DEBUG_INSERT_BIT_ERROR_LENGTH_FIXLENW 0
/* Length of write acknowledge. */
#define PONFW_DEBUG_INSERT_BIT_ERROR_LENGTH_FIXLENWA 0

/* HW applicability of DEBUG_INSERT_BIT_ERROR */
#define PONFW_DEBUG_INSERT_BIT_ERROR_HW_PROP	PONFW_PROP_HW_ALL

/** Test Pattern Error Counter */
#define PONFW_DEBUG_BIT_ERROR_COUNTER_CMD_ID (0xFA)
#define PONFW_DEBUG_BIT_ERROR_COUNTER_LEN 4
/* The counter value does not exceed 0x7FFF. */
#define PONFW_DEBUG_BIT_ERROR_COUNTER_BERR_OFL_LOW 0x0
/* The counter value exceeds 0x7FFF. */
#define PONFW_DEBUG_BIT_ERROR_COUNTER_BERR_OFL_HIGH 0x1

/* HW applicability of DEBUG_BIT_ERROR_COUNTER */
#define PONFW_DEBUG_BIT_ERROR_COUNTER_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_bit_error_counter {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Reserved */
	uint32_t res : 16;
	/* Bit Error Counter Overflow */
	uint32_t berr_ofl : 1;
	/* Bit Error Count */
	uint32_t berr_cnt : 15;
#else
	/* Bit Error Count */
	uint32_t berr_cnt : 15;
	/* Bit Error Counter Overflow */
	uint32_t berr_ofl : 1;
	/* Reserved */
	uint32_t res : 16;
#endif
} __PACKED__;

/** Debug Alarm Control Configuration */
#define PONFW_DEBUG_ALARM_CONTROL_CONFIG_CMD_ID (0xFB)
#define PONFW_DEBUG_ALARM_CONTROL_CONFIG_LEN 4
/* Disable debug alarm */
#define PONFW_DEBUG_ALARM_CONTROL_CONFIG_AEN_DIS 0x0
/* Enable debug alarm */
#define PONFW_DEBUG_ALARM_CONTROL_CONFIG_AEN_EN 0x1
/* Disable alarm logging */
#define PONFW_DEBUG_ALARM_CONTROL_CONFIG_LOGEN_LOGDIS 0x0
/* Enable alarm logging */
#define PONFW_DEBUG_ALARM_CONTROL_CONFIG_LOGEN_LOGEN 0x1

/* HW applicability of DEBUG_ALARM_CONTROL_CONFIG */
#define PONFW_DEBUG_ALARM_CONTROL_CONFIG_HW_PROP	PONFW_PROP_HW_ALL

struct ponfw_debug_alarm_control_config {
#if __BYTE_ORDER == __BIG_ENDIAN
	/* Debug Alarm Enable */
	uint32_t aen : 1;
	/* Alarm Logging on UART Enable */
	uint32_t logen : 1;
	/* Reserved */
	uint32_t res : 14;
	/* Alarm ID */
	uint32_t alarm_id : 16;
#else
	/* Alarm ID */
	uint32_t alarm_id : 16;
	/* Reserved */
	uint32_t res : 14;
	/* Alarm Logging on UART Enable */
	uint32_t logen : 1;
	/* Debug Alarm Enable */
	uint32_t aen : 1;
#endif
} __PACKED__;

/** Maximum message length in 32 bit words */
#define PONFW_MSG_MAX_LEN 86
/** Maximum message cmd id */
#define PONFW_MSG_CMD_ID 0xFB

/** Union to hold all message definitions */
union ponfw_msg {
	/** Generic message contents */
	uint8_t byte[4 * PONFW_MSG_MAX_LEN];
	uint32_t val[PONFW_MSG_MAX_LEN];
	/** Message Format */
	struct ponfw_generic_message generic_message;
	/** Firmware Version */
	struct ponfw_version fw_version;
	/** Firmware Capabilities */
	struct ponfw_capabilities fw_capabilities;
	/** XGTC ONU Configuration */
	struct ponfw_xgtc_onu_config xgtc_onu_config;
	/** Time of Day Synchronization */
	struct ponfw_onu_tod_sync onu_tod_sync;
	/** Time of Day Configuration */
	struct ponfw_onu_tod_config onu_tod_config;
	/** Random Number */
	struct ponfw_rand_num rand_num;
	/** Monitor Configuration */
	struct ponfw_monitor_config monitor_config;
	/** XGTC PLOAM Log Messages */
	struct ponfw_xgtc_ploam_log xgtc_ploam_log;
	/** GTC PLOAM Log Messages */
	struct ponfw_gtc_ploam_log gtc_ploam_log;
	/** ONU Optical Interface Configuration */
	struct ponfw_onu_optic_config onu_optic_config;
	/** XGTC ONU Reboot Request */
	struct ponfw_xgtc_onu_reboot_req xgtc_onu_reboot_req;
	/** Transmit Power Level Request */
	struct ponfw_tx_power_level_req tx_power_level_req;
	/** Time Capture Value */
	struct ponfw_onu_time_capture onu_time_capture;
	/** Time Compare Value */
	struct ponfw_onu_time_compare onu_time_compare;
	/** GTC ONU Configuration */
	struct ponfw_gtc_onu_config gtc_onu_config;
	/** Transmitter Enable Control for Active Ethernet */
	struct ponfw_aon_config aon_config;
	/** TWDM Downstream Wavelength Configuration */
	struct ponfw_twdm_ds_wl_config twdm_ds_wl_config;
	/** TWDM Upstream Wavelength Configuration */
	struct ponfw_twdm_us_wl_config twdm_us_wl_config;
	/** TWDM Upstream Wavelength Tuning */
	struct ponfw_twdm_us_wl_tuning twdm_us_wl_tuning;
	/** Optical Power Save Mode Configuration */
	struct ponfw_optic_power_save_config optic_power_save_config;
	/** Local Wake-up */
	struct ponfw_local_wakeup local_wakeup;
	/** TWDM Calibration Record */
	struct ponfw_twdm_onu_cal_record twdm_onu_cal_record;
	/** TWDM Optical Interface Configuration */
	struct ponfw_twdm_optic_config twdm_optic_config;
	/** Loop Timing Configuration */
	struct ponfw_loop_time_config loop_time_config;
	/** Physical Equipment Error Configuration */
	struct ponfw_pee_config pee_config;
	/** Alarm Control Configuration */
	struct ponfw_alarm_control_config alarm_control_config;
	/** Hardware Version Configuration */
	struct ponfw_hw_version hw_version;
	/** PLOAM Forwarding Configuration */
	struct ponfw_ploam_forward_config ploam_forward_config;
	/** Synchronous Ethernet Control */
	struct ponfw_synce_control synce_control;
	/** GPIO Configuration */
	struct ponfw_gpio_config gpio_config;
	/** SerDes Configuration */
	struct ponfw_serdes_config serdes_config;
	/** Get Static Alarm Status */
	struct ponfw_get_static_alarm get_static_alarm;
	/** Report Alarm Event */
	struct ponfw_report_alarm report_alarm;
	/** Clear Alarm Event */
	struct ponfw_clear_alarm clear_alarm;
	/** ONU Status */
	struct ponfw_onu_status onu_status;
	/** PLOAM State */
	struct ponfw_ploam_state ploam_state;
	/** XGTC Authentication Status */
	struct ponfw_xgtc_auth_status xgtc_auth_status;
	/** XGTC Master Session Key Hash */
	struct ponfw_xgtc_msk_hash xgtc_msk_hash;
	/** XGTC OMCI Integrity Key */
	struct ponfw_xgtc_omci_ik xgtc_omci_ik;
	/** US Overhead Status */
	struct ponfw_us_overhead_status us_overhead_status;
	/** Allocation Bandwidth */
	struct ponfw_alloc_bw alloc_bw;
	/** TWDM Wavelength Status */
	struct ponfw_twdm_wl_status twdm_wl_status;
	/** Burst Profile Status */
	struct ponfw_burst_profile_status burst_profile_status;
	/** Power Saving State */
	struct ponfw_psm_state psm_state;
	/** TWDM Channel Profile */
	struct ponfw_twdm_channel_profile twdm_channel_profile;
	/** Synchronous Ethernet Status */
	struct ponfw_synce_status synce_status;
	/** Power Save State Machine Status */
	struct ponfw_psm_status psm_status;
	/** Log Info */
	struct ponfw_log_info log_info;
	/** BIP Error Configuration */
	struct ponfw_bip_err_config bip_err_config;
	/** Synchronous Ethernet Configuration */
	struct ponfw_synce_config synce_config;
	/** Power Saving Mode Configuration */
	struct ponfw_psm_config psm_config;
	/** XGTC Encryption Configuration */
	struct ponfw_xgtc_enc_config xgtc_enc_config;
	/** XGTC OLT Random Challenge Table */
	struct ponfw_xgtc_olt_rnd_chal_table xgtc_olt_rnd_chal_table;
	/** XGTC ONU Random Challenge Table */
	struct ponfw_xgtc_onu_rnd_chal_table xgtc_onu_rnd_chal_table;
	/** XGTC OLT Authentication Result Table */
	struct ponfw_xgtc_olt_auth_result_table xgtc_olt_auth_result_table;
	/** XGTC ONU Authentication Result Table */
	struct ponfw_xgtc_onu_auth_result_table xgtc_onu_auth_result_table;
	/** XGTC Broadcast Key Table */
	struct ponfw_xgtc_broadcast_key_table xgtc_broadcast_key_table;
	/** OMCI Encapsulation Configuration */
	struct ponfw_omci_encap_config omci_encap_config;
	/** MPLS Encapsulation Configuration */
	struct ponfw_mpls_encap_config mpls_encap_config;
	/** QoS Configuration */
	struct ponfw_onu_qos_config onu_qos_config;
	/** TWDM Configuration */
	struct ponfw_twdm_config twdm_config;
	/** Timeout Values */
	struct ponfw_timeout_values timeout_values;
	/** ITU Interoperability Configuration */
	struct ponfw_onu_interop_config onu_interop_config;
	/** TWDM Power Configuration */
	struct ponfw_twdm_power twdm_power;
	/** Enhanced Inter-burst Pattern Configuration */
	struct ponfw_burst_pause_config burst_pause_config;
	/** XGTC Credentials Configuration */
	struct ponfw_xgtc_credentials_config xgtc_credentials_config;
	/** GTC Credentials Configuration */
	struct ponfw_gtc_credentials_config gtc_credentials_config;
	/** Link Control */
	struct ponfw_link_control link_control;
	/** Adaptive Request Control */
	struct ponfw_requesting_adaptation_config requesting_adaptation_config;
	/** Descriptor Controller Configuration */
	struct ponfw_desc_control_config desc_control_config;
	/** Descriptor Controller Configuration Watermark */
	struct ponfw_desc_control_wmk_config desc_control_wmk_config;
	/** Accounting Block Configuration */
	struct ponfw_accounting_block_config accounting_block_config;
	/** GEM Port ID */
	struct ponfw_gem_port_id gem_port_id;
	/** GEM Port ID Remove */
	struct ponfw_gem_port_id_remove gem_port_id_remove;
	/** Link Allocation ID to QoS Index */
	struct ponfw_alloc_id_link alloc_id_link;
	/** Unlink Allocation ID and QoS Index */
	struct ponfw_alloc_id_unlink alloc_id_unlink;
	/** Allocation to GEM Mapping */
	struct ponfw_alloc_to_gem_map alloc_to_gem_map;
	/** GEM to Allocation Mapping */
	struct ponfw_gem_alloc_map gem_alloc_map;
	/** GEM Port Index */
	struct ponfw_gem_port_idx gem_port_idx;
	/** Allocation Index */
	struct ponfw_alloc_idx alloc_idx;
	/** GTC Counters */
	struct ponfw_gtc_counters gtc_counters;
	/** XGTC Counters */
	struct ponfw_xgtc_counters xgtc_counters;
	/** GTC PLOAM Downstream Counters */
	struct ponfw_gtc_ploam_ds_counters gtc_ploam_ds_counters;
	/** GTC PLOAM Upstream Counters */
	struct ponfw_gtc_ploam_us_counters gtc_ploam_us_counters;
	/** XGTC PLOAM Downstream Counters */
	struct ponfw_xgtc_ploam_ds_counters xgtc_ploam_ds_counters;
	/** XGTC PLOAM Upstream Counters */
	struct ponfw_xgtc_ploam_us_counters xgtc_ploam_us_counters;
	/** GEM Port Counters */
	struct ponfw_gem_port_counters gem_port_counters;
	/** Power Save State Machine Counters */
	struct ponfw_psm_counters psm_counters;
	/** GTC Enhanced Counter */
	struct ponfw_gtc_enhanced_counters gtc_enhanced_counters;
	/** Alloc ID Counters */
	struct ponfw_alloc_id_counters alloc_id_counters;
	/** Received Ethernet Counters at WAN Side */
	struct ponfw_rx_eth_counters rx_eth_counters;
	/** Transmitted Ethernet Counters at WAN Side */
	struct ponfw_tx_eth_counters tx_eth_counters;
	/** Allocation Lost Counters */
	struct ponfw_alloc_lost_counters alloc_lost_counters;
	/** TWDM Tuning Control Counters */
	struct ponfw_twdm_tc_counters twdm_tc_counters;
	/** TWDM Transmit Power Leveling Counters */
	struct ponfw_twdm_onu_optic_pl_counters twdm_onu_optic_pl_counters;
	/** TWDM LODS Counters */
	struct ponfw_twdm_lods_counters twdm_lods_counters;
	/** Debug Configuration */
	struct ponfw_debug_config debug_config;
	/** Debug Data Access */
	struct ponfw_debug_data_access debug_data_access;
	/** Debug GTC PLOAM Send */
	struct ponfw_debug_gtc_ploam_send debug_gtc_ploam_send;
	/** Debug XGTC PLOAM Send */
	struct ponfw_debug_xgtc_ploam_send debug_xgtc_ploam_send;
	/** Debug GEM Port Index */
	struct ponfw_debug_gem_port_idx debug_gem_port_idx;
	/** Debug Allocation Index */
	struct ponfw_debug_alloc_idx debug_alloc_idx;
	/** Debug Mailbox Loop-back */
	struct ponfw_debug_mailbox_loop debug_mailbox_loop;
	/** Debug QoS Index */
	struct ponfw_debug_qos_idx debug_qos_idx;
	/** Debug DBRu Status */
	struct ponfw_debug_dbru debug_dbru;
	/** Debug Trigger Alarm Event */
	struct ponfw_debug_trigger_alarm debug_trigger_alarm;
	/** Debug Trace Configuration */
	struct ponfw_debug_trace_config debug_trace_config;
	/** Debug Trace Result */
	struct ponfw_debug_trace_result debug_trace_result;
	/** Debug Trace Control */
	struct ponfw_debug_trace_control debug_trace_control;
	/** Debug PLOAM Breakpoint */
	struct ponfw_debug_ploam_break debug_ploam_break;
	/** Debug PLOAM Breakpoint Status */
	struct ponfw_debug_ploam_break_status debug_ploam_break_status;
	/** Debug Random Number Values */
	struct ponfw_debug_random_values debug_random_values;
	/** ONU Response Time Offset Configuration */
	struct ponfw_onu_resp_time_offset_config onu_resp_time_offset_config;
	/** Write XGEM Key */
	struct ponfw_xgem_key_write xgem_key_write;
	/** Test Pattern Configuration */
	struct ponfw_debug_test_pattern_config debug_test_pattern_config;
	/** Test Pattern Control */
	struct ponfw_debug_test_pattern_control debug_test_pattern_control;
	/** Test Pattern Error Counter */
	struct ponfw_debug_bit_error_counter debug_bit_error_counter;
	/** Debug Alarm Control Configuration */
	struct ponfw_debug_alarm_control_config debug_alarm_control_config;
};

#define FW_MSG_SIZE_ARRAY \
{\
	[PONFW_VERSION_CMD_ID] =\
		sizeof(struct ponfw_version),\
	[PONFW_CAPABILITIES_CMD_ID] =\
		sizeof(struct ponfw_capabilities),\
	[PONFW_XGTC_ONU_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_xgtc_onu_config),\
	[PONFW_ONU_TOD_SYNC_CMD_ID] =\
		sizeof(struct ponfw_onu_tod_sync),\
	[PONFW_ONU_TOD_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_onu_tod_config),\
	[PONFW_RAND_NUM_CMD_ID] =\
		sizeof(struct ponfw_rand_num),\
	[PONFW_MONITOR_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_monitor_config),\
	[PONFW_XGTC_PLOAM_LOG_CMD_ID] =\
		sizeof(struct ponfw_xgtc_ploam_log),\
	[PONFW_GTC_PLOAM_LOG_CMD_ID] =\
		sizeof(struct ponfw_gtc_ploam_log),\
	[PONFW_ONU_OPTIC_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_onu_optic_config),\
	[PONFW_XGTC_ONU_REBOOT_REQ_CMD_ID] =\
		sizeof(struct ponfw_xgtc_onu_reboot_req),\
	[PONFW_TX_POWER_LEVEL_REQ_CMD_ID] =\
		sizeof(struct ponfw_tx_power_level_req),\
	[PONFW_ONU_TIME_CAPTURE_CMD_ID] =\
		sizeof(struct ponfw_onu_time_capture),\
	[PONFW_ONU_TIME_COMPARE_CMD_ID] =\
		sizeof(struct ponfw_onu_time_compare),\
	[PONFW_GTC_ONU_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_gtc_onu_config),\
	[PONFW_AON_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_aon_config),\
	[PONFW_TWDM_DS_WL_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_twdm_ds_wl_config),\
	[PONFW_TWDM_US_WL_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_twdm_us_wl_config),\
	[PONFW_TWDM_US_WL_TUNING_CMD_ID] =\
		sizeof(struct ponfw_twdm_us_wl_tuning),\
	[PONFW_OPTIC_POWER_SAVE_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_optic_power_save_config),\
	[PONFW_LOCAL_WAKEUP_CMD_ID] =\
		sizeof(struct ponfw_local_wakeup),\
	[PONFW_TWDM_ONU_CAL_RECORD_CMD_ID] =\
		sizeof(struct ponfw_twdm_onu_cal_record),\
	[PONFW_TWDM_OPTIC_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_twdm_optic_config),\
	[PONFW_LOOP_TIME_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_loop_time_config),\
	[PONFW_PEE_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_pee_config),\
	[PONFW_ALARM_CONTROL_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_alarm_control_config),\
	[PONFW_HW_VERSION_CMD_ID] =\
		sizeof(struct ponfw_hw_version),\
	[PONFW_PLOAM_FORWARD_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_ploam_forward_config),\
	[PONFW_SYNCE_CONTROL_CMD_ID] =\
		sizeof(struct ponfw_synce_control),\
	[PONFW_GPIO_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_gpio_config),\
	[PONFW_SERDES_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_serdes_config),\
	[PONFW_GET_STATIC_ALARM_CMD_ID] =\
		sizeof(struct ponfw_get_static_alarm),\
	[PONFW_REPORT_ALARM_CMD_ID] =\
		sizeof(struct ponfw_report_alarm),\
	[PONFW_CLEAR_ALARM_CMD_ID] =\
		sizeof(struct ponfw_clear_alarm),\
	[PONFW_ONU_STATUS_CMD_ID] =\
		sizeof(struct ponfw_onu_status),\
	[PONFW_PLOAM_STATE_CMD_ID] =\
		sizeof(struct ponfw_ploam_state),\
	[PONFW_XGTC_AUTH_STATUS_CMD_ID] =\
		sizeof(struct ponfw_xgtc_auth_status),\
	[PONFW_XGTC_MSK_HASH_CMD_ID] =\
		sizeof(struct ponfw_xgtc_msk_hash),\
	[PONFW_XGTC_OMCI_IK_CMD_ID] =\
		sizeof(struct ponfw_xgtc_omci_ik),\
	[PONFW_US_OVERHEAD_STATUS_CMD_ID] =\
		sizeof(struct ponfw_us_overhead_status),\
	[PONFW_ALLOC_BW_CMD_ID] =\
		sizeof(struct ponfw_alloc_bw),\
	[PONFW_TWDM_WL_STATUS_CMD_ID] =\
		sizeof(struct ponfw_twdm_wl_status),\
	[PONFW_BURST_PROFILE_STATUS_CMD_ID] =\
		sizeof(struct ponfw_burst_profile_status),\
	[PONFW_PSM_STATE_CMD_ID] =\
		sizeof(struct ponfw_psm_state),\
	[PONFW_TWDM_CHANNEL_PROFILE_CMD_ID] =\
		sizeof(struct ponfw_twdm_channel_profile),\
	[PONFW_SYNCE_STATUS_CMD_ID] =\
		sizeof(struct ponfw_synce_status),\
	[PONFW_PSM_STATUS_CMD_ID] =\
		sizeof(struct ponfw_psm_status),\
	[PONFW_LOG_INFO_CMD_ID] =\
		sizeof(struct ponfw_log_info),\
	[PONFW_BIP_ERR_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_bip_err_config),\
	[PONFW_SYNCE_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_synce_config),\
	[PONFW_PSM_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_psm_config),\
	[PONFW_XGTC_ENC_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_xgtc_enc_config),\
	[PONFW_XGTC_OLT_RND_CHAL_TABLE_CMD_ID] =\
		sizeof(struct ponfw_xgtc_olt_rnd_chal_table),\
	[PONFW_XGTC_ONU_RND_CHAL_TABLE_CMD_ID] =\
		sizeof(struct ponfw_xgtc_onu_rnd_chal_table),\
	[PONFW_XGTC_OLT_AUTH_RESULT_TABLE_CMD_ID] =\
		sizeof(struct ponfw_xgtc_olt_auth_result_table),\
	[PONFW_XGTC_ONU_AUTH_RESULT_TABLE_CMD_ID] =\
		sizeof(struct ponfw_xgtc_onu_auth_result_table),\
	[PONFW_XGTC_BROADCAST_KEY_TABLE_CMD_ID] =\
		sizeof(struct ponfw_xgtc_broadcast_key_table),\
	[PONFW_OMCI_ENCAP_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_omci_encap_config),\
	[PONFW_MPLS_ENCAP_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_mpls_encap_config),\
	[PONFW_ONU_QOS_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_onu_qos_config),\
	[PONFW_TWDM_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_twdm_config),\
	[PONFW_TIMEOUT_VALUES_CMD_ID] =\
		sizeof(struct ponfw_timeout_values),\
	[PONFW_ONU_INTEROP_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_onu_interop_config),\
	[PONFW_TWDM_POWER_CMD_ID] =\
		sizeof(struct ponfw_twdm_power),\
	[PONFW_BURST_PAUSE_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_burst_pause_config),\
	[PONFW_XGTC_CREDENTIALS_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_xgtc_credentials_config),\
	[PONFW_GTC_CREDENTIALS_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_gtc_credentials_config),\
	[PONFW_LINK_CONTROL_CMD_ID] =\
		sizeof(struct ponfw_link_control),\
	[PONFW_REQUESTING_ADAPTATION_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_requesting_adaptation_config),\
	[PONFW_DESC_CONTROL_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_desc_control_config),\
	[PONFW_DESC_CONTROL_WMK_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_desc_control_wmk_config),\
	[PONFW_ACCOUNTING_BLOCK_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_accounting_block_config),\
	[PONFW_GEM_PORT_ID_CMD_ID] =\
		sizeof(struct ponfw_gem_port_id),\
	[PONFW_GEM_PORT_ID_REMOVE_CMD_ID] =\
		sizeof(struct ponfw_gem_port_id_remove),\
	[PONFW_ALLOC_ID_LINK_CMD_ID] =\
		sizeof(struct ponfw_alloc_id_link),\
	[PONFW_ALLOC_ID_UNLINK_CMD_ID] =\
		sizeof(struct ponfw_alloc_id_unlink),\
	[PONFW_ALLOC_TO_GEM_MAP_CMD_ID] =\
		sizeof(struct ponfw_alloc_to_gem_map),\
	[PONFW_GEM_ALLOC_MAP_CMD_ID] =\
		sizeof(struct ponfw_gem_alloc_map),\
	[PONFW_GEM_PORT_IDX_CMD_ID] =\
		sizeof(struct ponfw_gem_port_idx),\
	[PONFW_ALLOC_IDX_CMD_ID] =\
		sizeof(struct ponfw_alloc_idx),\
	[PONFW_GTC_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_gtc_counters),\
	[PONFW_XGTC_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_xgtc_counters),\
	[PONFW_GTC_PLOAM_DS_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_gtc_ploam_ds_counters),\
	[PONFW_GTC_PLOAM_US_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_gtc_ploam_us_counters),\
	[PONFW_XGTC_PLOAM_DS_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_xgtc_ploam_ds_counters),\
	[PONFW_XGTC_PLOAM_US_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_xgtc_ploam_us_counters),\
	[PONFW_GEM_PORT_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_gem_port_counters),\
	[PONFW_PSM_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_psm_counters),\
	[PONFW_GTC_ENHANCED_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_gtc_enhanced_counters),\
	[PONFW_ALLOC_ID_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_alloc_id_counters),\
	[PONFW_RX_ETH_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_rx_eth_counters),\
	[PONFW_TX_ETH_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_tx_eth_counters),\
	[PONFW_ALLOC_LOST_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_alloc_lost_counters),\
	[PONFW_TWDM_TC_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_twdm_tc_counters),\
	[PONFW_TWDM_ONU_OPTIC_PL_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_twdm_onu_optic_pl_counters),\
	[PONFW_TWDM_LODS_COUNTERS_CMD_ID] =\
		sizeof(struct ponfw_twdm_lods_counters),\
	[PONFW_DEBUG_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_debug_config),\
	[PONFW_DEBUG_DATA_ACCESS_CMD_ID] =\
		sizeof(struct ponfw_debug_data_access),\
	[PONFW_DEBUG_GTC_PLOAM_SEND_CMD_ID] =\
		sizeof(struct ponfw_debug_gtc_ploam_send),\
	[PONFW_DEBUG_XGTC_PLOAM_SEND_CMD_ID] =\
		sizeof(struct ponfw_debug_xgtc_ploam_send),\
	[PONFW_DEBUG_GEM_PORT_IDX_CMD_ID] =\
		sizeof(struct ponfw_debug_gem_port_idx),\
	[PONFW_DEBUG_ALLOC_IDX_CMD_ID] =\
		sizeof(struct ponfw_debug_alloc_idx),\
	[PONFW_DEBUG_MAILBOX_LOOP_CMD_ID] =\
		sizeof(struct ponfw_debug_mailbox_loop),\
	[PONFW_DEBUG_QOS_IDX_CMD_ID] =\
		sizeof(struct ponfw_debug_qos_idx),\
	[PONFW_DEBUG_DBRU_CMD_ID] =\
		sizeof(struct ponfw_debug_dbru),\
	[PONFW_DEBUG_TRIGGER_ALARM_CMD_ID] =\
		sizeof(struct ponfw_debug_trigger_alarm),\
	[PONFW_DEBUG_TRACE_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_debug_trace_config),\
	[PONFW_DEBUG_TRACE_RESULT_CMD_ID] =\
		sizeof(struct ponfw_debug_trace_result),\
	[PONFW_DEBUG_TRACE_CONTROL_CMD_ID] =\
		sizeof(struct ponfw_debug_trace_control),\
	[PONFW_DEBUG_PLOAM_BREAK_CMD_ID] =\
		sizeof(struct ponfw_debug_ploam_break),\
	[PONFW_DEBUG_PLOAM_BREAK_STATUS_CMD_ID] =\
		sizeof(struct ponfw_debug_ploam_break_status),\
	[PONFW_DEBUG_RANDOM_VALUES_CMD_ID] =\
		sizeof(struct ponfw_debug_random_values),\
	[PONFW_ONU_RESP_TIME_OFFSET_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_onu_resp_time_offset_config),\
	[PONFW_XGEM_KEY_WRITE_CMD_ID] =\
		sizeof(struct ponfw_xgem_key_write),\
	[PONFW_DEBUG_TEST_PATTERN_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_debug_test_pattern_config),\
	[PONFW_DEBUG_TEST_PATTERN_CONTROL_CMD_ID] =\
		sizeof(struct ponfw_debug_test_pattern_control),\
	[PONFW_DEBUG_BIT_ERROR_COUNTER_CMD_ID] =\
		sizeof(struct ponfw_debug_bit_error_counter),\
	[PONFW_DEBUG_ALARM_CONTROL_CONFIG_CMD_ID] =\
		sizeof(struct ponfw_debug_alarm_control_config),\
}

#ifdef __cplusplus
}
#endif
/*! @} */

#if !defined(__GNUC__) && !defined(__GNUG__)
#  pragma pack(pop)
#endif

#endif /* _PON_IP_MSG_H_ */
