/******************************************************************************
 *
 * Copyright (c) 2021 MaxLinear, Inc.
 *
 * For licensing information, see the file 'LICENSE' in the root folder of
 * this software module.
 *
 ******************************************************************************/

#ifndef DRV_PON_MBOX_SERDES_H
#define DRV_PON_MBOX_SERDES_H

/** \addtogroup PON_MBOX_SERDES
 *  @{
 */

/**
 * Serdes related handling for URX and PRX chipset families.
 */

#include <pon/pon_mbox.h>
#include "drv_pon_mbox.h"

/** URX addresses */

/** CGU registers */
#define URX_CGU_IF_CLK2					0x01A4
#define URX_CGU_IF_CLK2_P2_SEL				BIT(18)

/** PON shell registers */
#define PON_SHELL_GEN_CTRL				0x0
#define PON_SHELL_GEN_CTRL_TX_RESET			BIT(0)
#define PON_SHELL_GEN_CTRL_RX_RESET			BIT(1)
#define PON_SHELL_GEN_CTRL_CR_PARA_CLK_DIV2_EN		BIT(2)
#define PON_SHELL_GEN_CTRL_PON_RST			BIT(4)
#define PON_SHELL_GEN_CTRL_PHY_RST			BIT(5)
#define PON_SHELL_GEN_CTRL_XPCS_RST			BIT(6)
#define PON_SHELL_GEN_CTRL_RX_CDR_SSC_EN		BIT(8)
#define PON_SHELL_GEN_CTRL_RX_TERM_ACDC			BIT(10)
#define PON_SHELL_GEN_CTRL_AON_CLK_GATE			BIT(11)
#define PON_SHELL_GEN_CTRL_PON_CLK_GATE			BIT(12)
#define PON_SHELL_GEN_CTRL_CR_PARA_CLK_GATE		BIT(13)
#define PON_SHELL_GEN_CTRL_REF_CLK_EN			BIT(16)
#define PON_SHELL_GEN_CTRL_REF_USE_PAD			BIT(17)
#define PON_SHELL_GEN_CTRL_TX_RATE_MASK			GENMASK(20, 18)
#define PON_SHELL_GEN_CTRL_TX_RATE_SHIFT		18
#define PON_SHELL_GEN_CTRL_RX_RATE_MASK			GENMASK(22, 21)
#define PON_SHELL_GEN_CTRL_RX_RATE_SHIFT		21
#define PON_SHELL_GEN_CTRL_RX_DATA_EN			BIT(26)
#define PON_SHELL_GEN_CTRL_RX_ACK			BIT(28)
#define PON_SHELL_GEN_CTRL_TX_ACK			BIT(29)
#define PON_SHELL_GEN_CTRL_REF_CLK_REQ			BIT(30)

#define PON_SHELL_SRAM_CSR				0x8
#define PON_SHELL_SRAM_CSR_SRAM_BYPASS			BIT(0)
#define PON_SHELL_SRAM_CSR_SRAM_EXT_LD_DONE		BIT(1)
#define PON_SHELL_SRAM_CSR_SRAM_INIT_DONE		BIT(2)

#define PON_SHELL_MPLLA_CTRL				0x0C


#define PON_SHELL_EXT_CTRL_SEL				0x14
#define PON_SHELL_EXT_CTRL_SEL_PHY_CTRL_SEL		BIT(0)

#define PON_SHELL_EXT_BS_CTRL				0x18
#define PON_SHELL_EXT_BS_CTRL_RX_LEVEL			GENMASK(4, 0)
#define PON_SHELL_EXT_BS_CTRL_RX_BIGSWING		BIT(5)
#define PON_SHELL_EXT_BS_CTRL_TX_LOWSWING		BIT(6)

#define PON_SHELL_REF_CLK_CTRL				0x1C
#define PON_SHELL_REF_CLK_CTRL_MPLLA_DIV2_EN		BIT(0)
#define PON_SHELL_REF_CLK_CTRL_MPLLB_DIV2_EN		BIT(1)
#define PON_SHELL_REF_CLK_CTRL_DIV2_EN			BIT(2)
#define PON_SHELL_REF_CLK_CTRL_REF_RANGE_SHIFT		3
#define PON_SHELL_REF_CLK_CTRL_REF_RANGE_MASK		GENMASK(5, 3)

#define PON_SHELL_EXT_MPLLA_CTRL_0			0x20
#define PON_SHELL_EXT_MPLLA_CTRL_0_BANDWIDTH_MASK	GENMASK(15, 0)
#define PON_SHELL_EXT_MPLLA_CTRL_0_TX_CLK_DIV_MASK	GENMASK(18, 17)
#define PON_SHELL_EXT_MPLLA_CTRL_0_TX_CLK_DIV_SHIFT	17

#define PON_SHELL_EXT_MPLLA_CTRL_1			0x24
#define PON_SHELL_EXT_MPLLA_CTRL_1_DIV10_CLK_EN		BIT(8)
#define PON_SHELL_EXT_MPLLA_CTRL_1_DIV16P5_CLK_EN	BIT(9)
#define PON_SHELL_EXT_MPLLA_CTRL_1_DIV8_CLK_EN		BIT(10)
#define PON_SHELL_EXT_MPLLA_CTRL_1_DIV_CLK_EN		BIT(11)
#define PON_SHELL_EXT_MPLLA_CTRL_1_DIV_MULTIPLIER_MASK	GENMASK(22, 16)
#define PON_SHELL_EXT_MPLLA_CTRL_1_DIV_MULTIPLIER_SHIFT	16
#define PON_SHELL_EXT_MPLLA_CTRL_1_MULTIPLIER_MASK	GENMASK(31, 24)
#define PON_SHELL_EXT_MPLLA_CTRL_1_MULTIPLIER_SHIFT	24

#define PON_SHELL_EXT_MPLLB_CTRL_0			0x2C
#define PON_SHELL_EXT_MPLLB_CTRL_MPLLB_INIT_CAL_DISABLE	BIT(16)

#define PON_SHELL_EXT_EQ_CTRL_1				0x38
#define PON_SHELL_EXT_EQ_CTRL_ATT_LVL_G1_SHIFT		2
#define PON_SHELL_EXT_EQ_CTRL_ATT_LVL_G1_MASK		GENMASK(4, 2)
#define PON_SHELL_EXT_EQ_CTRL_CTLE_BOOST_G1_SHIFT	8
#define PON_SHELL_EXT_EQ_CTRL_CTLE_BOOST_G1_MASK	GENMASK(12, 8)
#define PON_SHELL_EXT_EQ_CTRL_CTLE_POLE_SHIFT		13
#define PON_SHELL_EXT_EQ_CTRL_CTLE_POLE_MASK		GENMASK(14, 13)
#define PON_SHELL_EXT_EQ_CTRL_DFE_TAP1_G1_SHIFT		16
#define PON_SHELL_EXT_EQ_CTRL_DFE_TAP1_G1_MASK		GENMASK(23, 16)
#define PON_SHELL_EXT_EQ_CTRL_VGA1_GAIN_G1_SHIFT	24
#define PON_SHELL_EXT_EQ_CTRL_VGA1_GAIN_G1_MASK		GENMASK(26, 24)
#define PON_SHELL_EXT_EQ_CTRL_VGA2_GAIN_G1_SHIFT	28
#define PON_SHELL_EXT_EQ_CTRL_VGA2_GAIN_G1_MASK		GENMASK(30, 28)

#define PON_SHELL_EXT_CALI_CTRL_1			0x3C
#define PON_SHELL_EXT_CALI_CTRL_1_RX_VCO_LD_VAL_MASK	GENMASK(12, 0)
#define PON_SHELL_EXT_CALI_CTRL_1_RX_REF_LD_VAL_MASK	GENMASK(22, 16)
#define PON_SHELL_EXT_CALI_CTRL_1_RX_REF_LD_VAL_SHIFT	16

#define PON_SHELL_EXT_MISC_CTRL0			0x40
#define PON_SHELL_EXT_MISC_CTRL0_RX_LOS_THRESHOLD_MASK	GENMASK(3, 1)
#define PON_SHELL_EXT_MISC_CTRL0_RX_LOS_THRESHOLD_SHIFT	1
#define PON_SHELL_EXT_MISC_CTRL0_TX_IBOOST_LVL_MASK	GENMASK(7, 4)
#define PON_SHELL_EXT_MISC_CTRL0_TX_IBOOST_LVL_SHIFT	4
#define PON_SHELL_EXT_MISC_CTRL0_RX_VREF_CTRL_MASK	GENMASK(12, 8)
#define PON_SHELL_EXT_MISC_CTRL0_RX_VREF_CTRL_SHIFT	8
#define PON_SHELL_EXT_MISC_CTRL0_TX_VBOOST_LVL_MASK	GENMASK(18, 16)
#define PON_SHELL_EXT_MISC_CTRL0_TX_VBOOST_LVL_SHIFT	16
#define PON_SHELL_EXT_MISC_CTRL0_REF_REPEAT_CLK_EN	BIT(19)
#define PON_SHELL_EXT_MISC_CTRL0_SUP_MISC_MASK		GENMASK(27, 20)
#define PON_SHELL_EXT_MISC_CTRL0_SUP_MISC_SHIFT		20

#define PON_SHELL_EXT_MISC_CTRL1			0x44
#define PON_SHELL_EXT_MISC_CTRL1_TX_LPD			BIT(0)
#define PON_SHELL_EXT_MISC_CTRL1_TX_WIDTH_MASK		GENMASK(2, 1)
#define PON_SHELL_EXT_MISC_CTRL1_TX_WIDTH_SHIFT		1
#define PON_SHELL_EXT_MISC_CTRL1_TX_VBOOST_EN		BIT(3)
#define PON_SHELL_EXT_MISC_CTRL1_TX_MPLL_EN		BIT(4)
#define PON_SHELL_EXT_MISC_CTRL1_TX_MPLLB_SEL		BIT(5)
#define PON_SHELL_EXT_MISC_CTRL1_TX_CLK_RDY		BIT(9)
#define PON_SHELL_EXT_MISC_CTRL1_TX_EQ_PRE_MASK		GENMASK(18, 13)
#define PON_SHELL_EXT_MISC_CTRL1_TX_EQ_PRE_SHIFT	13
#define PON_SHELL_EXT_MISC_CTRL1_TX_EQ_MAIN_MASK	GENMASK(24, 19)
#define PON_SHELL_EXT_MISC_CTRL1_TX_EQ_MAIN_SHIFT	19
#define PON_SHELL_EXT_MISC_CTRL1_TX_EQ_POST_MASK	GENMASK(30, 25)
#define PON_SHELL_EXT_MISC_CTRL1_TX_EQ_POST_SHIFT	25

#define PON_SHELL_EXT_MISC_CTRL2			0x48
#define PON_SHELL_EXT_MISC_CTRL2_RX_LPD			BIT(0)
#define PON_SHELL_EXT_MISC_CTRL2_RX_WIDTH_MASK		GENMASK(2, 1)
#define PON_SHELL_EXT_MISC_CTRL2_RX_WIDTH_SHIFT		1
#define PON_SHELL_EXT_MISC_CTRL2_RX_TERM_EN		BIT(4)
#define PON_SHELL_EXT_MISC_CTRL2_RX_DIV16P5_CLK_EN	BIT(8)
#define PON_SHELL_EXT_MISC_CTRL2_RX_ADAPT_CONT		BIT(9)
#define PON_SHELL_EXT_MISC_CTRL2_RX_OFFCAN_COUNT	BIT(10)
#define PON_SHELL_EXT_MISC_CTRL2_RX_ADAPT_REQ		BIT(11)
#define PON_SHELL_EXT_MISC_CTRL2_ADAPT_RX_ACK		BIT(12)
#define PON_SHELL_EXT_MISC_CTRL2_RX_MISC_MASK		GENMASK(20, 13)
#define PON_SHELL_EXT_MISC_CTRL2_RX_MISC_SHIFT		13
#define PON_SHELL_EXT_MISC_CTRL2_RX_ADAPT_MODE_MASK	GENMASK(22, 21)
#define PON_SHELL_EXT_MISC_CTRL2_RX_ADAPT_MODE_SHIFT	21
#define PON_SHELL_EXT_MISC_CTRL2_RX_ADAPT_IN_PROG	BIT(31)

#define PON_SHELL_EXT_CDR_CTRL				0x4C
#define PON_SHELL_EXT_CDR_CTRL_RX_CDR_PPM_MAX_MASK	GENMASK(11, 7)
#define PON_SHELL_EXT_CDR_CTRL_RX_CDR_PPM_MAX_SHIFT	7
#define PON_SHELL_EXT_CDR_CTRL_RX_DFE_BYPASS		BIT(12)
#define PON_SHELL_EXT_CDR_CTRL_RX_ADAPT_SEL		BIT(13)
#define PON_SHELL_EXT_CDR_CTRL_RX_CDR_VCO_FREQBAND_MASK	GENMASK(15, 14)
#define PON_SHELL_EXT_CDR_CTRL_RX_CDR_VCO_FREQBAND_SHIFT	14
#define PON_SHELL_EXT_CDR_CTRL_RX_CDR_VCO_STEP_CTRL	BIT(16)
#define PON_SHELL_EXT_CDR_CTRL_RX_CDR_VCO_TEMP_COMP_EN	BIT(17)
#define PON_SHELL_EXT_CDR_CTRL_RX_DELTA_IQ_MASK		GENMASK(21, 18)
#define PON_SHELL_EXT_CDR_CTRL_RX_DELTA_IQ_SHIFT	18
#define PON_SHELL_EXT_CDR_CTRL_RX_MARGIN_IQ_MASK	GENMASK(28, 22)
#define PON_SHELL_EXT_CDR_CTRL_RX_MARGIN_IQ_SHIFT	22

#define PON_SHELL_EXT_PG_CTRL				0x50
#define PON_SHELL_EXT_PG_CTR_PMA_PWR_STABLE		BIT(3)
#define PON_SHELL_EXT_PG_CTR_PCS_PWR_STABLE		BIT(5)

#define PON_SHELL_MODE_SEL				0x58
#define PON_SHELL_MODE_SEL_PON_ETH_SEL			BIT(0)
#define PON_SHELL_MODE_SEL_LOOP_SYNCE_SEL		BIT(1)
#define PON_SHELL_MODE_SEL_PON_SHELL_REFCLK_EN		BIT(2)
#define PON_SHELL_MODE_SEL_10GEPON_SEL			BIT(3)

#define PON_SHELL_LOOP_PLL_CFG0				0x5C
#define PON_SHELL_LOOP_PLL_CFG0_PLLEN			BIT(0)
#define PON_SHELL_LOOP_PLL_CFG0_LOCK			BIT(1)
#define PON_SHELL_LOOP_PLL_CFG0_FRAC_MASK		GENMASK(25, 2)
#define PON_SHELL_LOOP_PLL_CFG0_FRAC_SHIFT		2
#define PON_SHELL_LOOP_PLL_CFG0_DSMEN			BIT(28)
#define PON_SHELL_LOOP_PLL_CFG0_DACEN			BIT(30)

#define PON_SHELL_LOOP_PLL_CFG1				0x60
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV0A_MASK		GENMASK(2, 0)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV0B_MASK		GENMASK(5, 3)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV0B_SHIFT	3
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV1A_MASK		GENMASK(8, 6)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV1A_SHIFT	6
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV1B_MASK		GENMASK(11, 9)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV1B_SHIFT	9
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV2A_MASK		GENMASK(14, 12)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV2A_SHIFT	12
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV2B_MASK		GENMASK(17, 15)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV2B_SHIFT	15
#define PON_SHELL_LOOP_PLL_CFG1_FOUT0EN			BIT(18)
#define PON_SHELL_LOOP_PLL_CFG1_FOUT1EN			BIT(19)
#define PON_SHELL_LOOP_PLL_CFG1_FOUT2EN			BIT(20)
#define PON_SHELL_LOOP_PLL_CFG1_FOUT3EN			BIT(21)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV3A_MASK		GENMASK(24, 22)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV3A_SHIFT	22
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV3B_MASK		GENMASK(27, 25)
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV3B_SHIFT	25
#define PON_SHELL_LOOP_PLL_CFG1_POST_DIV0PRE		BIT(28)

#define PON_SHELL_LOOP_PLL_CFG2				0x64
#define PON_SHELL_LOOP_PLL_CFG2_FBDIV_MASK		GENMASK(11, 0)
#define PON_SHELL_LOOP_PLL_CFG2_REFDIV_MASK		GENMASK(23, 18)
#define PON_SHELL_LOOP_PLL_CFG2_REFDIV_SHIFT		18
#define PON_SHELL_LOOP_PLL_CFG2_FREFCMLEN		BIT(28)

#define PON_SHELL_ARB					0x0
/** APB Clock frequency 800MHz / 4 = 200MHz -> 0xC8 */
#define PON_SHELL_ARB_TIMEOUT_CTRL_VAL			0x006400C8

#define PON_PHY_SUP_DIG_LVL_OVRD_IN			0x0048
#define PON_PHY_SUP_DIG_LVL_OVRD_IN_TX_VBOOST_LVL_MASK	GENMASK(8, 6)
#define PON_PHY_SUP_DIG_LVL_OVRD_IN_TX_VBOOST_LVL_SHIFT	6
#define PON_PHY_SUP_DIG_LVL_OVRD_IN_TX_VBOOST_LVL_EN	BIT(9)

#define PON_PHY_SUP_DIG_ASIC_IN				0x006C
#define PON_PHY_SUP_DIG_ASIC_IN_PHY_RESET		BIT(0)

#define PON_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_0		0x4004
#define PON_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_0_CLK_RDY	BIT(0)
#define PON_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_0_DATA_EN	BIT(3)
#define PON_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_0_RATE_MASK	GENMASK(10, 8)
#define PON_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_0_WIDTH_MASK	GENMASK(12, 11)
#define PON_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_0_WITH_SHIFT	11
#define PON_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_0_EN		BIT(15)

#define PON_PHY_SUP_DIG_ASIC_TX_IN_0			0x4034
#define PON_PHY_SUP_DIG_ASIC_TX_IN_0_PSTATE_MASK	GENMASK(7, 6)
#define PON_PHY_SUP_DIG_ASIC_TX_IN_0_PSTATE_SHIFT	6

#define PON_PHY_SUP_DIG_ASIC_RX_IN_0			0x4044
#define PON_PHY_SUP_DIG_ASIC_RX_IN_0_PSTATE_MASK	GENMASK(6, 5)
#define PON_PHY_SUP_DIG_ASIC_RX_IN_0_PSTATE_SHIFT	5

#define PON_PHY_LANE0_DIG_ASIC_RX_OUT_0			0x405C
#define PON_PHY_LANE0_DIG_ASIC_RX_OUT_0_VALID		BIT(2)
#define PON_PHY_LANE0_DIG_ASIC_RX_OUT_0_LOS		BIT(1)

#define PON_PHY_LANE0_DIG_AON_RX_CDR_DETECTOR_CTL	0xC1EC
#define PON_PHY_LANE0_DIG_AON_RX_CDR_DETECTOR_CTL_EN	BIT(0)

#define PON_PHY_LANE0_DIG_RX_DPLL_FREQ			0x4164
#define PON_PHY_LANE0_DIG_RX_DPLL_FREQ_VAL_MASK		GENMASK(13, 0)

#define PON_PHY_LANE0_DIG_TX_LBERT_CTL			0x40AC

#define PON_PHY_RAWLANE0_ATE_OVRD_IN_2			0xC020
#define PON_PHY_RAWLANE0_ATE_OVRD_IN_2_ADAPT_REQ	BIT(4)
#define PON_PHY_RAWLANE0_ATE_OVRD_IN_2_ADAPT_REQ_OVRD_EN	BIT(5)
#define PON_PHY_RAWLANE0_ATE_OVRD_IN_2_CONT_OVRD_EN	BIT(8)

#define PON_PHY_RAWLANE0_DIG_PCS_XF_RX_ADAPT_ACK	0xC040
#define PON_PHY_RAWLANE0_DIG_PCS_XF_RX_ADAPT_ACK_ACK	BIT(0)

#define PON_PHY_RAWLANE0_RX_ADAPT_DONE			0xC178
#define PON_PHY_RAWLANE0_RX_ADAPT_DONE_RX_ADAPT_DONE	BIT(0)

#define PON_PHY_RAWCMN_DIG_FW_PWRUP_DONE		0x8050
#define PON_PHY_RAWCMN_DIG_FW_PWRUP_DONE_DONE		BIT(0)

#define PON_PHY_RAWCMN_DIG_AON_CMNCAL_STATUS		0x80EC
#define PON_PHY_RAWCMN_DIG_AON_CMNCAL_STATUS_CMNCAL_DONE	BIT(1)

/* for RES_ACK workaround on step A */
#define PON_PHY_SUP_DIG_SUP_OVRD_IN_0			0x0038
#define PON_PHY_SUP_DIG_SUP_OVRD_IN_0_RES_REQ_IN	BIT(2)
#define PON_PHY_SUP_DIG_SUP_OVRD_IN_0_RES_ACK_IN	BIT(3)
#define PON_PHY_SUP_DIG_SUP_OVRD_IN_0_RES_OVRD_EN	BIT(4)

/** PRX addresses */

/** CGU registers */
#define PRX_CGU_CLKGCR1_A				0x0124
#define PRX_CGU_CLKGCR1_A_PON				BIT(29)
#define PRX_CGU_CLKGCR1_A_AON				BIT(30)

#define PRX_CGU_IF_CLK					0x0140
#define PRX_CGU_IF_CLK_PLL5_PLL3_SEL			BIT(0)
#define PRX_CGU_IF_CLK_P2_SEL				BIT(3)
#define PRX_CGU_IF_CLK_SW_REFCLK_EN			BIT(4)
#define PRX_CGU_IF_CLK_SW_HW_REFCLK_EN_SEL		BIT(5)

#define PRX_CGU_PLL5_CFG0				0x00C4
#define PRX_CGU_PLL5_CFG0_PLLEN				BIT(0)
#define PRX_CGU_PLL5_CFG0_LOCK				BIT(1)
#define PRX_CGU_PLL5_CFG0_FRAC_MASK			GENMASK(25, 2)
#define PRX_CGU_PLL5_CFG0_FRAC_SHIFT			2
#define PRX_CGU_PLL5_CFG0_DSMEN				BIT(28)
#define PRX_CGU_PLL5_CFG0_DACEN				BIT(30)
#define PRX_CGU_PLL5_CFG0_LD				BIT(31)

#define PRX_CGU_PLL5_CFG1				0x00C8
#define PRX_CGU_PLL5_CFG1_POST_DIV0A_MASK		GENMASK(2, 0)
#define PRX_CGU_PLL5_CFG1_POST_DIV0B_MASK		GENMASK(5, 3)
#define PRX_CGU_PLL5_CFG1_POST_DIV0B_SHIFT		3
#define PRX_CGU_PLL5_CFG1_POST_DIV1A_MASK		GENMASK(8, 6)
#define PRX_CGU_PLL5_CFG1_POST_DIV1A_SHIFT		6
#define PRX_CGU_PLL5_CFG1_POST_DIV1B_MASK		GENMASK(11, 9)
#define PRX_CGU_PLL5_CFG1_POST_DIV1B_SHIFT		9
#define PRX_CGU_PLL5_CFG1_FOUT0EN			BIT(24)
#define PRX_CGU_PLL5_CFG1_FOUT1EN			BIT(25)
#define PRX_CGU_PLL5_CFG1_POST_DIV0PRE			BIT(29)

#define PRX_CGU_PLL5_CFG2				0x00CC
#define PRX_CGU_PLL5_CFG2_FBDIV_MASK			GENMASK(11, 0)
#define PRX_CGU_PLL5_CFG2_REFDIV_MASK			GENMASK(23, 18)
#define PRX_CGU_PLL5_CFG2_REFDIV_SHIFT			18
#define PRX_CGU_PLL5_CFG2_FREFCMLEN			BIT(28)

/** CHIPTOP registers */
#define CHIPTOP_IFMUX_CFG				0x120
#define CHIPTOP_IFMUX_CFG_WAN_MUX			BIT(0)

/** WAN phy registers */
#define WAN_PHY_GEN_CTRL				0x0
#define WAN_PHY_GEN_CTRL_TX_RESET			BIT(0)
#define WAN_PHY_GEN_CTRL_RX_RESET			BIT(1)
#define WAN_PHY_GEN_CTRL_CR_PARA_CLK_DIV2_EN		BIT(2)
#define WAN_PHY_GEN_CTRL_CR_PARA_CLK_GATE		BIT(3)
#define WAN_PHY_GEN_CTRL_RX_CDR_SSC_EN			BIT(8)
#define WAN_PHY_GEN_CTRL_RX_TERM_ACDC			BIT(10)
#define WAN_PHY_GEN_CTRL_REF_CLK_EN			BIT(16)
#define WAN_PHY_GEN_CTRL_REF_USE_PAD			BIT(17)
#define WAN_PHY_GEN_CTRL_RX_RATE_MASK			GENMASK(20, 19)
#define WAN_PHY_GEN_CTRL_RX_RATE_SHIFT			19
#define WAN_PHY_GEN_CTRL_TX_RATE_MASK			GENMASK(23, 21)
#define WAN_PHY_GEN_CTRL_TX_RATE_SHIFT			21
#define WAN_PHY_GEN_CTRL_RX_DATA_EN			BIT(26)
#define WAN_PHY_GEN_CTRL_RX_ACK				BIT(28)
#define WAN_PHY_GEN_CTRL_TX_ACK				BIT(29)
#define WAN_PHY_GEN_CTRL_REF_CLK_REQ			BIT(30)

#define WAN_PHY_SRAM_CSR				0x0008
#define WAN_PHY_SRAM_CSR_BYPASS				BIT(0)
#define WAN_PHY_SRAM_CSR_EXT_LD_DONE			BIT(1)
#define WAN_PHY_SRAM_CSR_INIT_DONE			BIT(2)

#define WAN_PHY_REF_CLK_CTRL				0x0020
#define WAN_PHY_REF_CLK_CTRL_MPLLA_DIV2_EN		BIT(0)
#define WAN_PHY_REF_CLK_CTRL_DIV2_EN			BIT(2)
#define WAN_PHY_REF_CLK_CTRL_REF_RANGE_MASK		GENMASK(5, 3)
#define WAN_PHY_REF_CLK_CTRL_REF_RANGE_SHIFT		3

#define WAN_PHY_EXT_MPLLA_CTRL1				0x0030
#define WAN_PHY_EXT_MPLLA_CTRL1_BANDWIDTH_MASK		GENMASK(6, 0)
#define WAN_PHY_EXT_MPLLA_CTRL1_DIV10_CLK_EN		BIT(8)
#define WAN_PHY_EXT_MPLLA_CTRL1_DIV16P5_CLK_EN		BIT(9)
#define WAN_PHY_EXT_MPLLA_CTRL1_DIV8_CLK_EN		BIT(10)
#define WAN_PHY_EXT_MPLLA_CTRL1_DIV_CLK_EN		BIT(11)
#define WAN_PHY_EXT_MPLLA_CTRL1_DIV_MULTIPLIER_MASK	GENMASK(22, 16)
#define WAN_PHY_EXT_MPLLA_CTRL1_DIV_MULTIPLIER_SHIFT	16
#define WAN_PHY_EXT_MPLLA_CTRL1_MULTIPLIER_MASK		GENMASK(31, 24)
#define WAN_PHY_EXT_MPLLA_CTRL1_MULTIPLIER_SHIFT	24

#define WAN_PHY_EXT_EQ_CTRL1				0x0040
#define WAN_PHY_EXT_EQ_CTRL1_RX_ADAPT_AFE_EN		BIT(0)
#define WAN_PHY_EXT_EQ_CTRL1_RX_ADAPT_DFE_EN		BIT(1)
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_ATT_LVL_MASK		GENMASK(4, 2)
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_ATT_LVL_SHIFT	2
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_CTLE_BOOST_MASK	GENMASK(12, 8)
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_CTLE_BOOST_SHIFT	8
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_CTLE_POLE_MASK	GENMASK(15, 13)
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_CTLE_POLE_SHIFT	13
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_DFE_TAP1_MASK	GENMASK(23, 16)
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_DFE_TAP1_SHIFT	16
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_VGA1_GAIN_MASK	GENMASK(27, 24)
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_VGA1_GAIN_SHIFT	24
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_VGA2_GAIN_MASK	GENMASK(31, 28)
#define WAN_PHY_EXT_EQ_CTRL1_RX_EQ_VGA2_GAIN_SHIFT	28

#define WAN_PHY_EXT_CALI_CTRL1				0x0050
#define WAN_PHY_EXT_CALI_CTRL1_RX_VCO_LD_VAL_MASK	GENMASK(12, 0)
#define WAN_PHY_EXT_CALI_CTRL1_MPLLB_INIT_CAL_DISABLE	BIT(14)
#define WAN_PHY_EXT_CALI_CTRL1_RX_REF_LD_VAL_MASK	GENMASK(21, 16)
#define WAN_PHY_EXT_CALI_CTRL1_RX_REF_LD_VAL_SHIFT	16

#define WAN_PHY_EXT_MISC_CTRL0				0x0060
#define WAN_PHY_EXT_MISC_CTRL0_RX_LOS_THRESH_MASK	GENMASK(3, 1)
#define WAN_PHY_EXT_MISC_CTRL0_RX_LOS_THRESH_SHIFT	1
#define WAN_PHY_EXT_MISC_CTRL0_TX_IBOOST_LVL_MASK	GENMASK(7, 4)
#define WAN_PHY_EXT_MISC_CTRL0_TX_IBOOST_LVL_SHIFT	4
#define WAN_PHY_EXT_MISC_CTRL0_RX_VREF_CTRL_MASK	GENMASK(12, 8)
#define WAN_PHY_EXT_MISC_CTRL0_RX_VREF_CTRL_SHIFT	8
#define WAN_PHY_EXT_MISC_CTRL0_TX_VBOOST_LVL_MASK	GENMASK(18, 16)
#define WAN_PHY_EXT_MISC_CTRL0_TX_VBOOST_LVL_SHIFT	16
#define WAN_PHY_EXT_MISC_CTRL0_REF_REPEAT_CLK_EN	BIT(19)

#define WAN_PHY_EXT_MISC_CTRL1				0x0064
#define WAN_PHY_EXT_MISC_CTRL1_TX_WIDTH_MASK		GENMASK(2, 1)
#define WAN_PHY_EXT_MISC_CTRL1_TX_WIDTH_SHIFT		1
#define WAN_PHY_EXT_MISC_CTRL1_TX_VBOOST_EN		BIT(3)
#define WAN_PHY_EXT_MISC_CTRL1_TX_MPLL_EN		BIT(4)
#define WAN_PHY_EXT_MISC_CTRL1_TX_MPLLB_SEL		BIT(5)
#define WAN_PHY_EXT_MISC_CTRL1_TX_CLK_RDY		BIT(9)
#define WAN_PHY_EXT_MISC_CTRL1_TX_EQ_PRE_MASK		GENMASK(18, 13)
#define WAN_PHY_EXT_MISC_CTRL1_TX_EQ_PRE_SHIFT		13
#define WAN_PHY_EXT_MISC_CTRL1_TX_EQ_MAIN_MASK		GENMASK(24, 19)
#define WAN_PHY_EXT_MISC_CTRL1_TX_EQ_MAIN_SHIFT		19
#define WAN_PHY_EXT_MISC_CTRL1_TX_EQ_POST_MASK		GENMASK(30, 25)
#define WAN_PHY_EXT_MISC_CTRL1_TX_EQ_POST_SHIFT		25

#define WAN_PHY_EXT_MISC_CTRL2				0x0068
#define WAN_PHY_EXT_MISC_CTRL2_RX_WIDTH_MASK		GENMASK(2, 1)
#define WAN_PHY_EXT_MISC_CTRL2_RX_WIDTH_SHIFT		1
#define WAN_PHY_EXT_MISC_CTRL2_RX_TERM_EN		BIT(4)
#define WAN_PHY_EXT_MISC_CTRL2_RX_DIV16P5_CLK_EN	BIT(8)
#define WAN_PHY_EXT_MISC_CTRL2_RX_ADAPT_CONT		BIT(9)
#define WAN_PHY_EXT_MISC_CTRL2_RX_OFFCAN_COUNT		BIT(10)
#define WAN_PHY_EXT_MISC_CTRL2_RX_CDR_TRACK_EN		BIT(15)
#define WAN_PHY_EXT_MISC_CTRL2_RX_CDR_VCO_LOWFREQ	BIT(16)

/** WAN APB APP registers */
#define WAN_APB_TIMEOUT_CTRL				0x0
/** APB Clock frequency 500MHz / 4 = 125MHz -> 0x7D */
#define WAN_APB_TIMEOUT_CTRL_VAL			0x0064007D

/**  Serdes registers */
#define SRDS_RAWLANE0_DIG_PCS_XF_RX_OVRD_IN_3		0xC020
#define SRDS_RAWLANE0_DIG_PCS_XF_RX_OVRD_IN_3_CONT_OVRD_EN	BIT(15)

/** SRAM offsets for Serdes FW download */
/** URX 32 bit word offset 0xC000 */
/** #define URX800_FW_OFFSET					0x30000 */
/** PRX 32 bit word offset 0x6000 */
/** #define PRX300_FW_OFFSET					0x18000 */

/** Serdes firmware file names */
/** FW supporting Serdes for URX type A */
#define SRDS_FW_URX800_A "intel_pon_serdes_fw_urx_a.bin"
/** FW supporting Serdes for URX type B */
#define SRDS_FW_URX800_B "intel_pon_serdes_fw_urx_b.bin"
/** FW supporting Serdes for PRX type B */
#define SRDS_FW_PRX300_B "intel_pon_serdes_fw_prx_b.bin"

/** Mode dependent Serdes specific settings.
 *  Internal data structure which is filled up with serdes specific
 *  initializataion vales which are mode dependent.
 *  This structure is used by \ref urx800_serdes_init, \ref prx300_serdes_init.
 */
struct pon_mbox_serdes_init {
	/** Ref range */
	u8 ref_range;
	/** Ext MPLLA bandwidth */
	u16 mplla_bandwidth;
	/** Ext MPLLA multiplier */
	u8 mplla_multiplier;
	/** Ext MPLLA DIV16P5 clk divider enable */
	bool mplla_div16p5_clk_en;
	/** Ext RX VCO LD value */
	u16 rx_vco_ld_val;
	/** Ext RX REF LD value */
	u8 rx_ref_ld_val;
	/* TX rate */
	u8 tx_rate;
	/* RX rate */
	u8 rx_rate;
};

/**
 * @brief PON shell initalizatin for URX chipset family.
 *	  Remove PON RST and set clock gate.
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int urx800_pon_shell_init(struct pon_mbox *pon);

/**
 * @brief Basic Serdes initalizatin for URX chipset family.
 *	  Keeps Serdes resets asserted; Select PON mode.
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int urx800_serdes_basic_init(struct pon_mbox *pon);

/**
 * @brief Reference clock selection for URX chipset family.
 *	  Select PLL3 as reference clock
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int urx800_ref_clk_sel(struct pon_mbox *pon);

/**
 * @brief PLL5 initialization for URX chipset family.
 *	  Configures the LOOP PLL for initial Serdes
 *	  refclk with fix XTAL timing
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int urx800_pll5_init(struct pon_mbox *pon);

/**
 * @brief Serdes initialization for URX chipset family.
 *	  Configures static Serdes settings
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int urx800_serdes_init(struct pon_mbox *pon);

/**
 * @brief SW loop timing for URX chipset family.
 *	  Resetting of loop timing related parameters
 *	  after LOS.
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int urx800_sw_loop_timing_los(struct pon_mbox *pon);

/**
 * @brief SW loop timing for URX chipset family.
 *	  Perform loop timing in SW instead of FW.
 *	  PRBS is not supported.
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int urx800_sw_loop_timing(struct pon_mbox *pon);

/**
 * @brief Basic Serdes initalizatin for PRX chipset family.
 *	  Keeps Serdes resets asserted; Select PON mode.
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int prx300_serdes_basic_init(struct pon_mbox *pon);

/**
 * @brief Reference clock selection for PRX chipset family.
 *	  Select PLL3 as reference clock
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int prx300_ref_clk_sel(struct pon_mbox *pon);

/**
 * @brief PLL5 initialization for PRX chipset family.
 *	  Configures the PLL5 for initial Serdes
 *	  refclk with fix XTAL timing
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int prx300_pll5_init(struct pon_mbox *pon);

/**
 * @brief Serdes initialization for PRX chipset family.
 *	  Configures static Serdes settings
 *
 * @param in pointer to mailbox structure
 *
 * @return 0 on success, -ENODEV on missing resource
 */
int prx300_serdes_init(struct pon_mbox *pon);

/*! @} */

#endif /* end of include guard: DRV_PON_MBOX_SERDES_H */
